<Type Name="StringExtensions" FullName="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions">
  <TypeSignature Language="C#" Value="public static class StringExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StringExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module StringExtensions" />
  <TypeSignature Language="F#" Value="type StringExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit.HighPerformance</AssemblyName>
    <AssemblyVersion>6.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Helpers for working with the <see cref="T:System.String" /> type.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public static int Count (this string text, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count(string text, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Count(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count (text As String, c As Char) As Integer" />
      <MemberSignature Language="F#" Value="static member Count : string * char -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Count (text, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to read.</param>
        <param name="c">The character to look for.</param>
        <summary>
            Counts the number of occurrences of a given character into a target <see cref="T:System.String" /> instance.
            </summary>
        <returns>The number of occurrences of <paramref name="c" /> in <paramref name="text" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousGetReference">
      <MemberSignature Language="C#" Value="public static ref char DangerousGetReference (this string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char DangerousGetReference(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReference (text As String) As Char" />
      <MemberSignature Language="F#" Value="static member DangerousGetReference : string -&gt; char" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReference text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance.</param>
        <summary>
            Returns a reference to the first element within a given <see cref="T:System.String" />, with no bounds checks.
            </summary>
        <returns>A reference to the first element within <paramref name="text" />, or the location it would have used, if <paramref name="text" /> is empty.</returns>
        <remarks>This method doesn't do any bounds checks, therefore it is responsibility of the caller to perform checks in case the returned value is dereferenced.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousGetReferenceAt">
      <MemberSignature Language="C#" Value="public static ref char DangerousGetReferenceAt (this string text, int i);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char DangerousGetReferenceAt(string text, int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReferenceAt(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReferenceAt (text As String, i As Integer) As Char" />
      <MemberSignature Language="F#" Value="static member DangerousGetReferenceAt : string * int -&gt; char" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReferenceAt (text, i)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance.</param>
        <param name="i">The index of the element to retrieve within <paramref name="text" />.</param>
        <summary>
            Returns a reference to an element at a specified index within a given <see cref="T:System.String" />, with no bounds checks.
            </summary>
        <returns>A reference to the element within <paramref name="text" /> at the index specified by <paramref name="i" />.</returns>
        <remarks>This method doesn't do any bounds checks, therefore it is responsibility of the caller to ensure the <paramref name="i" /> parameter is valid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;char&gt; Enumerate (this string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable`1&lt;char&gt; Enumerate(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Enumerate(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Enumerate (text As String) As ReadOnlySpanEnumerable(Of Char)" />
      <MemberSignature Language="F#" Value="static member Enumerate : string -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;char&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Enumerate text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="text">The source <see cref="T:System.String" /> to enumerate.</param>
        <summary>
             Enumerates the items in the input <see cref="T:System.String" /> instance, as pairs of value/index values.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             string text = "Hello, world!";
            
             foreach (var item in text.Enumerate())
             {
                 // Access the index and value of each item here...
                 int index = item.Index;
                 string value = item.Value;
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        <returns>A wrapper type that will handle the value/index enumeration for <paramref name="text" />.</returns>
        <remarks>The returned <see cref="T:Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable`1" /> value shouldn't be used directly: use this extension in a <see langword="foreach" /> loop.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDjb2HashCode">
      <MemberSignature Language="C#" Value="public static int GetDjb2HashCode (this string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDjb2HashCode(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.GetDjb2HashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDjb2HashCode (text As String) As Integer" />
      <MemberSignature Language="F#" Value="static member GetDjb2HashCode : string -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.GetDjb2HashCode text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="text">The source <see cref="T:System.String" /> to enumerate.</param>
        <summary>
            Gets a content hash from the input <see cref="T:System.String" /> instance using the Djb2 algorithm.
            For more info, see the documentation for <see cref="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.GetDjb2HashCode``1(System.ReadOnlySpan{``0})" />.
            </summary>
        <returns>The Djb2 value for the input <see cref="T:System.String" /> instance.</returns>
        <remarks>The Djb2 hash is fully deterministic and with no random components.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tokenize">
      <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;char&gt; Tokenize (this string text, char separator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer`1&lt;char&gt; Tokenize(string text, char separator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Tokenize(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Tokenize (text As String, separator As Char) As ReadOnlySpanTokenizer(Of Char)" />
      <MemberSignature Language="F#" Value="static member Tokenize : string * char -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;char&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Tokenize (text, separator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="separator" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="text">The source <see cref="T:System.String" /> to tokenize.</param>
        <param name="separator">The separator character to use.</param>
        <summary>
             Tokenizes the values in the input <see cref="T:System.String" /> instance using a specified separator.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             string text = "Hello, world!";
            
             foreach (var token in text.Tokenize(','))
             {
                 // Access the tokens here...
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        <returns>A wrapper type that will handle the tokenization for <paramref name="text" />.</returns>
        <remarks>The returned <see cref="T:Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer`1" /> value shouldn't be used directly: use this extension in a <see langword="foreach" /> loop.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
