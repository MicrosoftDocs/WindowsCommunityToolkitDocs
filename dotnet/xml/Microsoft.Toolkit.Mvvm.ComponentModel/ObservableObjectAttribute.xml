<Type Name="ObservableObjectAttribute" FullName="Microsoft.Toolkit.Mvvm.ComponentModel.ObservableObjectAttribute">
  <TypeSignature Language="C#" Value="public sealed class ObservableObjectAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObservableObjectAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Toolkit.Mvvm.ComponentModel.ObservableObjectAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObservableObjectAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type ObservableObjectAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
    <AssemblyVersion>7.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            An attribute that indicates that a given type should have all the members from <see cref="T:Microsoft.Toolkit.Mvvm.ComponentModel.ObservableObject" />
            generated into it, as well as the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanging" />
            interfaces. This can be useful when you want the same functionality from <see cref="T:Microsoft.Toolkit.Mvvm.ComponentModel.ObservableObject" /> into a class
            that already inherits from another one (since C# doesn't support multiple inheritance). This attribute will trigger
            the source generator to just create the same APIs directly into the decorated class.
            <para>
            This attribute can be used as follows:
            <code>
            [ObservableObject]
            partial class MyViewModel : SomeOtherClass
            {
                // Other members here...
            }
            </code></para>
            And with this, the same APIs from <see cref="T:Microsoft.Toolkit.Mvvm.ComponentModel.ObservableObject" /> will be available on this type as well.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObservableObjectAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.ComponentModel.ObservableObjectAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
