<Type Name="ParallelHelper" FullName="CommunityToolkit.HighPerformance.Helpers.ParallelHelper">
  <TypeSignature Language="C#" Value="public static class ParallelHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ParallelHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:CommunityToolkit.HighPerformance.Helpers.ParallelHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelHelper" />
  <TypeSignature Language="F#" Value="type ParallelHelper = class" />
  <AssemblyInfo>
    <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Helpers to work with parallel code in a highly optimized manner.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="For&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For&lt;TAction&gt; (int start, int end) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction, class System.ValueType) TAction&gt;(int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For``1(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For(Of TAction As Structure) (start As Integer, end As Integer)" />
      <MemberSignature Language="F#" Value="static member For : int * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For (start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction" />) to invoke for each iteration index.</typeparam>
        <param name="start">The starting iteration index.</param>
        <param name="end">The final iteration index (exclusive).</param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For&lt;TAction&gt; (int start, int end, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction, class System.ValueType) TAction&gt;(int32 start, int32 end, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For``1(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For(Of TAction As Structure) (start As Integer, end As Integer, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member For : int * int * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For (start, end, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction" />) to invoke for each iteration index.</typeparam>
        <param name="start">The starting iteration index.</param>
        <param name="end">The final iteration index (exclusive).</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For&lt;TAction&gt; (int start, int end, in TAction action) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction, class System.ValueType) TAction&gt;(int32 start, int32 end, [in]!!TAction&amp; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For``1(System.Int32,System.Int32,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For(Of TAction As Structure) (start As Integer, end As Integer, ByRef action As TAction)" />
      <MemberSignature Language="F#" Value="static member For : int * int * 'Action -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For (start, end, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction" />) to invoke for each iteration index.</typeparam>
        <param name="start">The starting iteration index.</param>
        <param name="end">The final iteration index (exclusive).</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For&lt;TAction&gt; (int start, int end, in TAction action, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction, class System.ValueType) TAction&gt;(int32 start, int32 end, [in]!!TAction&amp; action, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For``1(System.Int32,System.Int32,``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For(Of TAction As Structure) (start As Integer, end As Integer, ByRef action As TAction, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member For : int * int * 'Action * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For (start, end, action, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction" />) to invoke for each iteration index.</typeparam>
        <param name="start">The starting iteration index.</param>
        <param name="end">The final iteration index (exclusive).</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For2D&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For2D&lt;TAction&gt; (System.Drawing.Rectangle area) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For2D&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction2D, class System.ValueType) TAction&gt;(valuetype System.Drawing.Rectangle area) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D``1(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For2D(Of TAction As Structure) (area As Rectangle)" />
      <MemberSignature Language="F#" Value="static member For2D : System.Drawing.Rectangle -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D area" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction2D</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="area" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction2D" />) to invoke for each pair of iteration indices.</typeparam>
        <param name="area">The <see cref="T:System.Drawing.Rectangle" /> value indicating the 2D iteration area to use.</param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For2D&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For2D&lt;TAction&gt; (System.Drawing.Rectangle area, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For2D&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction2D, class System.ValueType) TAction&gt;(valuetype System.Drawing.Rectangle area, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D``1(System.Drawing.Rectangle,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For2D(Of TAction As Structure) (area As Rectangle, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member For2D : System.Drawing.Rectangle * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D (area, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction2D</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="area" Type="System.Drawing.Rectangle" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction2D" />) to invoke for each pair of iteration indices.</typeparam>
        <param name="area">The <see cref="T:System.Drawing.Rectangle" /> value indicating the 2D iteration area to use.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For2D&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For2D&lt;TAction&gt; (System.Drawing.Rectangle area, in TAction action) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For2D&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction2D, class System.ValueType) TAction&gt;(valuetype System.Drawing.Rectangle area, [in]!!TAction&amp; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D``1(System.Drawing.Rectangle,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For2D(Of TAction As Structure) (area As Rectangle, ByRef action As TAction)" />
      <MemberSignature Language="F#" Value="static member For2D : System.Drawing.Rectangle * 'Action -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D (area, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction2D</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="area" Type="System.Drawing.Rectangle" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction2D" />) to invoke for each pair of iteration indices.</typeparam>
        <param name="area">The <see cref="T:System.Drawing.Rectangle" /> value indicating the 2D iteration area to use.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For2D&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For2D&lt;TAction&gt; (System.Drawing.Rectangle area, in TAction action, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For2D&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction2D, class System.ValueType) TAction&gt;(valuetype System.Drawing.Rectangle area, [in]!!TAction&amp; action, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D``1(System.Drawing.Rectangle,``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For2D(Of TAction As Structure) (area As Rectangle, ByRef action As TAction, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member For2D : System.Drawing.Rectangle * 'Action * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D (area, action, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction2D</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="area" Type="System.Drawing.Rectangle" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction2D" />) to invoke for each pair of iteration indices.</typeparam>
        <param name="area">The <see cref="T:System.Drawing.Rectangle" /> value indicating the 2D iteration area to use.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For2D&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For2D&lt;TAction&gt; (int top, int bottom, int left, int right) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For2D&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction2D, class System.ValueType) TAction&gt;(int32 top, int32 bottom, int32 left, int32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D``1(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For2D(Of TAction As Structure) (top As Integer, bottom As Integer, left As Integer, right As Integer)" />
      <MemberSignature Language="F#" Value="static member For2D : int * int * int * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D (top, bottom, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction2D</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction2D" />) to invoke for each pair of iteration indices.</typeparam>
        <param name="top">The starting iteration value for the outer loop.</param>
        <param name="bottom">The final iteration value for the outer loop (exclusive).</param>
        <param name="left">The starting iteration value for the inner loop.</param>
        <param name="right">The final iteration value for the inner loop (exclusive).</param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For2D&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For2D&lt;TAction&gt; (int top, int bottom, int left, int right, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For2D&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction2D, class System.ValueType) TAction&gt;(int32 top, int32 bottom, int32 left, int32 right, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For2D(Of TAction As Structure) (top As Integer, bottom As Integer, left As Integer, right As Integer, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member For2D : int * int * int * int * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D (top, bottom, left, right, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction2D</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction2D" />) to invoke for each pair of iteration indices.</typeparam>
        <param name="top">The starting iteration value for the outer loop.</param>
        <param name="bottom">The final iteration value for the outer loop (exclusive).</param>
        <param name="left">The starting iteration value for the inner loop.</param>
        <param name="right">The final iteration value for the inner loop (exclusive).</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For2D&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For2D&lt;TAction&gt; (int top, int bottom, int left, int right, in TAction action) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For2D&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction2D, class System.ValueType) TAction&gt;(int32 top, int32 bottom, int32 left, int32 right, [in]!!TAction&amp; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D``1(System.Int32,System.Int32,System.Int32,System.Int32,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For2D(Of TAction As Structure) (top As Integer, bottom As Integer, left As Integer, right As Integer, ByRef action As TAction)" />
      <MemberSignature Language="F#" Value="static member For2D : int * int * int * int * 'Action -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D (top, bottom, left, right, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction2D</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction2D" />) to invoke for each pair of iteration indices.</typeparam>
        <param name="top">The starting iteration value for the outer loop.</param>
        <param name="bottom">The final iteration value for the outer loop (exclusive).</param>
        <param name="left">The starting iteration value for the inner loop.</param>
        <param name="right">The final iteration value for the inner loop (exclusive).</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="For2D&lt;TAction&gt;">
      <MemberSignature Language="C#" Value="public static void For2D&lt;TAction&gt; (int top, int bottom, int left, int right, in TAction action, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void For2D&lt;struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IAction2D, class System.ValueType) TAction&gt;(int32 top, int32 bottom, int32 left, int32 right, [in]!!TAction&amp; action, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D``1(System.Int32,System.Int32,System.Int32,System.Int32,``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub For2D(Of TAction As Structure) (top As Integer, bottom As Integer, left As Integer, right As Integer, ByRef action As TAction, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member For2D : int * int * int * int * 'Action * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.For2D (top, bottom, left, right, action, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IAction2D</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="bottom" Type="System.Int32" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="right" Type="System.Int32" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IAction2D" />) to invoke for each pair of iteration indices.</typeparam>
        <param name="top">The starting iteration value for the outer loop.</param>
        <param name="bottom">The final iteration value for the outer loop (exclusive).</param>
        <param name="left">The starting iteration value for the inner loop.</param>
        <param name="right">The final iteration value for the inner loop (exclusive).</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (CommunityToolkit.HighPerformance.Memory2D&lt;TItem&gt; memory) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IRefAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype CommunityToolkit.HighPerformance.Memory2D`1&lt;!!TItem&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(CommunityToolkit.HighPerformance.Memory2D{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As Memory2D(Of TItem))" />
      <MemberSignature Language="F#" Value="static member ForEach : CommunityToolkit.HighPerformance.Memory2D&lt;'Item&gt; -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IRefAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="CommunityToolkit.HighPerformance.Memory2D&lt;TItem&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IRefAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:CommunityToolkit.HighPerformance.Memory2D`1" /> representing the data to process.</param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;TItem&gt; memory) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IInAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype CommunityToolkit.HighPerformance.ReadOnlyMemory2D`1&lt;!!TItem&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(CommunityToolkit.HighPerformance.ReadOnlyMemory2D{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As ReadOnlyMemory2D(Of TItem))" />
      <MemberSignature Language="F#" Value="static member ForEach : CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;'Item&gt; -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IInAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;TItem&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:CommunityToolkit.HighPerformance.ReadOnlyMemory2D`1" /> representing the data to process.</param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (Memory&lt;TItem&gt; memory) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IRefAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype System.Memory`1&lt;!!TItem&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(System.Memory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As Memory(Of TItem))" />
      <MemberSignature Language="F#" Value="static member ForEach : Memory&lt;'Item&gt; -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IRefAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;TItem&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IRefAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> representing the data to process.</param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (ReadOnlyMemory&lt;TItem&gt; memory) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IInAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype System.ReadOnlyMemory`1&lt;!!TItem&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As ReadOnlyMemory(Of TItem))" />
      <MemberSignature Language="F#" Value="static member ForEach : ReadOnlyMemory&lt;'Item&gt; -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IInAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;TItem&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> representing the data to process.</param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (CommunityToolkit.HighPerformance.Memory2D&lt;TItem&gt; memory, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IRefAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype CommunityToolkit.HighPerformance.Memory2D`1&lt;!!TItem&gt; memory, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(CommunityToolkit.HighPerformance.Memory2D{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As Memory2D(Of TItem), minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member ForEach : CommunityToolkit.HighPerformance.Memory2D&lt;'Item&gt; * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IRefAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="CommunityToolkit.HighPerformance.Memory2D&lt;TItem&gt;" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IRefAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:CommunityToolkit.HighPerformance.Memory2D`1" /> representing the data to process.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (CommunityToolkit.HighPerformance.Memory2D&lt;TItem&gt; memory, in TAction action) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IRefAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype CommunityToolkit.HighPerformance.Memory2D`1&lt;!!TItem&gt; memory, [in]!!TAction&amp; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(CommunityToolkit.HighPerformance.Memory2D{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As Memory2D(Of TItem), ByRef action As TAction)" />
      <MemberSignature Language="F#" Value="static member ForEach : CommunityToolkit.HighPerformance.Memory2D&lt;'Item&gt; * 'Action -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IRefAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="CommunityToolkit.HighPerformance.Memory2D&lt;TItem&gt;" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IRefAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:CommunityToolkit.HighPerformance.Memory2D`1" /> representing the data to process.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;TItem&gt; memory, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IInAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype CommunityToolkit.HighPerformance.ReadOnlyMemory2D`1&lt;!!TItem&gt; memory, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(CommunityToolkit.HighPerformance.ReadOnlyMemory2D{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As ReadOnlyMemory2D(Of TItem), minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member ForEach : CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;'Item&gt; * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IInAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;TItem&gt;" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:CommunityToolkit.HighPerformance.ReadOnlyMemory2D`1" /> representing the data to process.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;TItem&gt; memory, in TAction action) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IInAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype CommunityToolkit.HighPerformance.ReadOnlyMemory2D`1&lt;!!TItem&gt; memory, [in]!!TAction&amp; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(CommunityToolkit.HighPerformance.ReadOnlyMemory2D{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As ReadOnlyMemory2D(Of TItem), ByRef action As TAction)" />
      <MemberSignature Language="F#" Value="static member ForEach : CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;'Item&gt; * 'Action -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IInAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;TItem&gt;" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:CommunityToolkit.HighPerformance.ReadOnlyMemory2D`1" /> representing the data to process.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (Memory&lt;TItem&gt; memory, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IRefAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype System.Memory`1&lt;!!TItem&gt; memory, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(System.Memory{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As Memory(Of TItem), minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member ForEach : Memory&lt;'Item&gt; * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IRefAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;TItem&gt;" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> representing the data to process.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (Memory&lt;TItem&gt; memory, in TAction action) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IRefAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype System.Memory`1&lt;!!TItem&gt; memory, [in]!!TAction&amp; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(System.Memory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As Memory(Of TItem), ByRef action As TAction)" />
      <MemberSignature Language="F#" Value="static member ForEach : Memory&lt;'Item&gt; * 'Action -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IRefAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;TItem&gt;" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> representing the data to process.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (ReadOnlyMemory&lt;TItem&gt; memory, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IInAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype System.ReadOnlyMemory`1&lt;!!TItem&gt; memory, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(System.ReadOnlyMemory{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As ReadOnlyMemory(Of TItem), minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member ForEach : ReadOnlyMemory&lt;'Item&gt; * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IInAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;TItem&gt;" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> representing the data to process.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (ReadOnlyMemory&lt;TItem&gt; memory, in TAction action) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IInAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype System.ReadOnlyMemory`1&lt;!!TItem&gt; memory, [in]!!TAction&amp; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As ReadOnlyMemory(Of TItem), ByRef action As TAction)" />
      <MemberSignature Language="F#" Value="static member ForEach : ReadOnlyMemory&lt;'Item&gt; * 'Action -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IInAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;TItem&gt;" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> representing the data to process.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (CommunityToolkit.HighPerformance.Memory2D&lt;TItem&gt; memory, in TAction action, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IRefAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype CommunityToolkit.HighPerformance.Memory2D`1&lt;!!TItem&gt; memory, [in]!!TAction&amp; action, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(CommunityToolkit.HighPerformance.Memory2D{``0},``1@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As Memory2D(Of TItem), ByRef action As TAction, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member ForEach : CommunityToolkit.HighPerformance.Memory2D&lt;'Item&gt; * 'Action * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, action, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IRefAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="CommunityToolkit.HighPerformance.Memory2D&lt;TItem&gt;" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IRefAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:CommunityToolkit.HighPerformance.Memory2D`1" /> representing the data to process.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;TItem&gt; memory, in TAction action, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IInAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype CommunityToolkit.HighPerformance.ReadOnlyMemory2D`1&lt;!!TItem&gt; memory, [in]!!TAction&amp; action, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(CommunityToolkit.HighPerformance.ReadOnlyMemory2D{``0},``1@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As ReadOnlyMemory2D(Of TItem), ByRef action As TAction, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member ForEach : CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;'Item&gt; * 'Action * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, action, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IInAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="CommunityToolkit.HighPerformance.ReadOnlyMemory2D&lt;TItem&gt;" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:CommunityToolkit.HighPerformance.ReadOnlyMemory2D`1" /> representing the data to process.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (Memory&lt;TItem&gt; memory, in TAction action, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IRefAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype System.Memory`1&lt;!!TItem&gt; memory, [in]!!TAction&amp; action, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(System.Memory{``0},``1@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As Memory(Of TItem), ByRef action As TAction, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member ForEach : Memory&lt;'Item&gt; * 'Action * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, action, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IRefAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;TItem&gt;" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> representing the data to process.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TItem,TAction&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;TItem,TAction&gt; (ReadOnlyMemory&lt;TItem&gt; memory, in TAction action, int minimumActionsPerThread) where TAction : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;TItem, struct .ctor (class CommunityToolkit.HighPerformance.Helpers.IInAction`1&lt;!!TItem&gt;, class System.ValueType) TAction&gt;(valuetype System.ReadOnlyMemory`1&lt;!!TItem&gt; memory, [in]!!TAction&amp; action, int32 minimumActionsPerThread) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach``2(System.ReadOnlyMemory{``0},``1@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of TItem, TAction) (memory As ReadOnlyMemory(Of TItem), ByRef action As TAction, minimumActionsPerThread As Integer)" />
      <MemberSignature Language="F#" Value="static member ForEach : ReadOnlyMemory&lt;'Item&gt; * 'Action * int -&gt; unit (requires 'Action : struct)" Usage="CommunityToolkit.HighPerformance.Helpers.ParallelHelper.ForEach (memory, action, minimumActionsPerThread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItem" />
        <TypeParameter Name="TAction">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>CommunityToolkit.HighPerformance.Helpers.IInAction&lt;TItem&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;TItem&gt;" />
        <Parameter Name="action" Type="TAction" RefType="ref" />
        <Parameter Name="minimumActionsPerThread" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TItem">The type of items to iterate over.</typeparam>
        <typeparam name="TAction">The type of action (implementing <see cref="T:CommunityToolkit.HighPerformance.Helpers.IInAction`1" /> of <typeparamref name="TItem" />) to invoke over each item.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> representing the data to process.</param>
        <param name="action">The <typeparamref name="TAction" /> instance representing the action to invoke.</param>
        <param name="minimumActionsPerThread">
            The minimum number of actions to run per individual thread. Set to 1 if all invocations
            should be parallelized, or to a greater number if each individual invocation is fast
            enough that it is more efficient to set a lower bound per each running thread.
            </param>
        <summary>
            Executes a specified action in an optimized parallel loop over the input data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
