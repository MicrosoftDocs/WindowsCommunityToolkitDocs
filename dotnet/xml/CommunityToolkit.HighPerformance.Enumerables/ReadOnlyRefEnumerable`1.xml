<Type Name="ReadOnlyRefEnumerable&lt;T&gt;" FullName="CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable&lt;T&gt;">
  <TypeSignature Language="C#" Value="public readonly ref struct ReadOnlyRefEnumerable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlyRefEnumerable`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlyRefEnumerable(Of T)" />
  <TypeSignature Language="F#" Value="type ReadOnlyRefEnumerable&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">The type of items to enumerate.</typeparam>
    <summary>
            A <see langword="ref" /><see langword="struct" /> that iterates readonly items from arbitrary memory locations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1.CopyTo(CommunityToolkit.HighPerformance.Enumerables.RefEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As RefEnumerable(Of T))" />
      <MemberSignature Language="F#" Value="member this.CopyTo : CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;'T&gt; -&gt; unit" Usage="readOnlyRefEnumerable.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The destination <see cref="T:CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1" /> instance.</param>
        <summary>
            Copies the contents of this <see cref="T:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1" /> into a destination <see cref="T:CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="destination" /> is shorter than the source <see cref="T:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1" /> instance.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlyRefEnumerable.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The destination <see cref="T:System.Span`1" /> instance.</param>
        <summary>
            Copies the contents of this <see cref="T:CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1" /> into a destination <see cref="T:System.Span`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="destination" /> is shorter than the source <see cref="T:CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1" /> instance.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ReadOnlyRefEnumerable(Of T).Enumerator" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable&lt;'T&gt;.Enumerator" Usage="readOnlyRefEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through a collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
        <filterpriority>2</filterpriority>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable&lt;T&gt; (CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;T&gt; enumerable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1&lt;!T&gt; op_Implicit(valuetype CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1&lt;!T&gt; enumerable) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1.op_Implicit(CommunityToolkit.HighPerformance.Enumerables.RefEnumerable{`0})~CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (enumerable As RefEnumerable(Of T)) As ReadOnlyRefEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;'T&gt; -&gt; CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable&lt;'T&gt;" Usage="CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable&lt;'T&gt;.op_Implicit enumerable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumerable" Type="CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="enumerable">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="readOnlyRefEnumerable.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a <typeparamref name="T" /> array with the values in the target row.
            </summary>
        <returns>A <typeparamref name="T" /> array with the values in the target row.</returns>
        <remarks>
            This method will allocate a new <typeparamref name="T" /> array, so only
            use it if you really need to copy the target items in a new memory location.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1.TryCopyTo(CommunityToolkit.HighPerformance.Enumerables.RefEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As RefEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;'T&gt; -&gt; bool" Usage="readOnlyRefEnumerable.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="CommunityToolkit.HighPerformance.Enumerables.RefEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The target <see cref="T:CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1" /> of the copy operation.</param>
        <summary>
            Attempts to copy the current <see cref="T:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1" /> instance to a destination <see cref="T:CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1" />.
            </summary>
        <returns>Whether or not the operation was successful.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.ReadOnlyRefEnumerable`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlyRefEnumerable.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The target <see cref="T:System.Span`1" /> of the copy operation.</param>
        <summary>
            Attempts to copy the current <see cref="T:CommunityToolkit.HighPerformance.Enumerables.RefEnumerable`1" /> instance to a destination <see cref="T:System.Span`1" />.
            </summary>
        <returns>Whether or not the operation was successful.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
