<Type Name="SpanTokenizer&lt;T&gt;" FullName="CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer&lt;T&gt;">
  <TypeSignature Language="C#" Value="public ref struct SpanTokenizer&lt;T&gt; where T : IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpanTokenizer`1&lt;(class System.IEquatable`1&lt;!T&gt;) T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpanTokenizer(Of T)" />
  <TypeSignature Language="F#" Value="type SpanTokenizer&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">The type of items to enumerate.</typeparam>
    <summary>
            A <see langword="ref" /><see langword="struct" /> that tokenizes a given <see cref="T:System.Span`1" /> instance.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpanTokenizer (Span&lt;T&gt; span, T separator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Span`1&lt;!T&gt; span, !T separator) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer`1.#ctor(System.Span{`0},`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (span As Span(Of T), separator As T)" />
      <MemberSignature Language="F#" Value="new CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt;" Usage="new CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer&lt;'T (requires 'T :&gt; System.IEquatable&lt;'T&gt;)&gt; (span, separator)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="separator" Type="T" />
      </Parameters>
      <Docs>
        <param name="span">The source <see cref="T:System.Span`1" /> instance.</param>
        <param name="separator">The separator item to use.</param>
        <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer`1" /> struct.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Span`1&lt;!T&gt; Current" />
      <MemberSignature Language="DocId" Value="P:CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Span(Of T)" />
      <MemberSignature Language="F#" Value="member this.Current : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt;" Usage="CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer&lt;'T (requires 'T :&gt; System.IEquatable&lt;'T&gt;)&gt;.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the duck-typed <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public readonly CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As SpanTokenizer(Of T)" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt;" Usage="spanTokenizer.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Implements the duck-typed <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> method.
            </summary>
        <returns>An <see cref="T:CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer`1" /> instance targeting the current <see cref="T:System.Span`1" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.HighPerformance.Enumerables.SpanTokenizer`1.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="spanTokenizer.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.HighPerformance</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Implements the duck-typed <see cref="M:System.Collections.IEnumerator.MoveNext" /> method.
            </summary>
        <returns>
          <see langword="true" /> whether a new element is available, <see langword="false" /> otherwise</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
