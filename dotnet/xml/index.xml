<Overview>
  <Assemblies>
    <Assembly Name="Microsoft.Toolkit" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This package includes .NET Standard code only helpers such as:\r\n      - IncrementalLoadingCollection: Simplifies the definition and usage of collections whose items can be loaded incrementally only when needed by the view.\r\n      - String extensions and array extensions: These extensions make working with string and arrays easier.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Forms.UI.Controls" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Forms.UI.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Forms.UI.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides XAML user controls for Windows Forms. It is part of the Windows Community Toolkit.\r\n      \r\n      Controls:\r\n      \r\n      -InkCanvas : Defines an area that receives and displays ink strokes.\r\n      -InkToolbar : Wpf-enabled wrapper for InkToolbar, that Represents a Universal Windows app control containing a customizable and extensible collection of buttons that activate ink-related features in an associated InkCanvas.\r\n      -MapControl : A set of controls for WPF and UWP for rendering digital maps from different providers (like OpenStreetMap and Bing Maps) and various types of map overlays.\r\n      -MediaPlayerElement : This controls embeds a view that streams and renders media content such as video in your Windows Forms or WPF desktop application.\r\n      -SwapChainPanel : Provides a hosting surface, where Microsoft DirectX swap chains provide content that can be rendered into a XAML UI. A SwapChainPanel element is a key component for an app that renders Microsoft DirectX graphics and then presents those visuals within a XAML page.\r\n      \r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+g01ccabdea4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "01ccabdea4fcad523b67ddb0d215813bfa3e3531")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Forms.UI.Controls.WebView" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Forms.UI.Controls.WebView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Forms.UI.Controls.WebView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides WebView XAML control for Windows Forms by hosting web content in your Windows Forms desktop application. It is part of the Windows Community Toolkit.\r\n      This control uses the Microsoft Edge rendering engine (EdgeHTML) or the the System.Windows.Controls.WebBrowser, for devices on older versions (WebViewCompatible), to embed a view that renders richly formatted HTML5 content from a remote web server, dynamically generated code, or content files.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+g01ccabdea4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "01ccabdea4fcad523b67ddb0d215813bfa3e3531")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Forms.UI.XamlHost" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Forms.UI.XamlHost")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Forms.UI.XamlHost")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides XAML islands interop helpers for Windows Forms. It is part of the Windows Community Toolkit.\r\n      By using the WindowsXamlHost control, you can add built-in or custom UWP controls to the User Interface (UI) of your Windows Forms desktop application, such as Windows Ink and controls that support the Fluent Design System.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+g01ccabdea4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "01ccabdea4fcad523b67ddb0d215813bfa3e3531")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Graph.Controls" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("CI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides Microsoft Graph XAML controls. It is part of the Windows Community Toolkit.\r\n\r\n      Classes:\r\n      - LoginButton: The Login Control leverages MSAL libraries to support the sign-in processes for Microsoft Graph and beyond.\r\n      - PersonView: The PersonView control displays a user photo and can display their name and e-mail.\r\n      - PeoplePicker: The PeoplePicker Control is a simple control that allows for selection of one or more users.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Graph.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Graph.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.Default | System.Diagnostics.DebuggableAttribute+DebuggingModes.DisableOptimizations | System.Diagnostics.DebuggableAttribute+DebuggingModes.EnableEditAndContinue | System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0-preview2+e8734b8bf0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "e8734b8bf0b3864d15211eb9457cbe458f7a43d5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Graph" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("CI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This package includes .NET Standard code helpers such as:\r\n      - GraphExtensions: Helpers for common tasks related to the Microsoft Graph used by the Microsoft.Toolkit.Graph.Controls.\r\n      - GlobalProvider: A shared provider instance used by the Microsoft.Toolkit.Graph.Controls.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Graph")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Graph")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.Default | System.Diagnostics.DebuggableAttribute+DebuggingModes.DisableOptimizations | System.Diagnostics.DebuggableAttribute+DebuggingModes.EnableEditAndContinue | System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0-preview2+e8734b8bf0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "e8734b8bf0b3864d15211eb9457cbe458f7a43d5")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.HighPerformance" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This package includes high performance .NET Standard helpers such as:\r\n      - ArrayPoolBufferWriter&lt;T&gt;: an IBufferWriter&lt;T&gt; implementation using pooled arrays, which also supports IMemoryOwner&lt;T&gt;.\r\n      - MemoryBufferWriter&lt;T&gt;: an IBufferWriter&lt;T&gt;: implementation that can wrap external Memory&lt;T&gt;: instances.\r\n      - MemoryOwner&lt;T&gt;: an IMemoryOwner&lt;T&gt; implementation with an embedded length and a fast Span&lt;T&gt; accessor.\r\n      - SpanOwner&lt;T&gt;: a stack-only type with the ability to rent a buffer of a specified length and getting a Span&lt;T&gt; from it.\r\n      - String, array, Span&lt;T&gt;, Memory&lt;T&gt; extensions and more, all focused on high performance.\r\n      - HashCode&lt;T&gt;: a SIMD-enabled extension of HashCode to quickly process sequences of values.\r\n      - BitHelper: a class with helper methods to perform bit operations on numeric types.\r\n      - ParallelHelper: helpers to work with parallel code in a highly optimized manner.\r\n      - Box&lt;T&gt;: a type mapping boxed value types and exposing some utility and high performance methods.\r\n      - Ref&lt;T&gt;: a stack-only struct that can store a reference to a value of a specified type.\r\n      - NullableRef&lt;T&gt;: a stack-only struct similar to Ref&lt;T&gt;, which also supports nullable references.\r\n  ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.HighPerformance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.HighPerformance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Parsers" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Parsers")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Parsers")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This .NET standard library contains various parsers\r\n\r\n      Markdown: Allows you to parse a Markdown String into a Markdown Document, and then Render it with a Markdown Renderer.\r\n\r\n      RSS: Allows you to parse an RSS content String into an RSS Schema.\r\n\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("UnitTests.UWP, PublicKey=002400000480000094000000060200000024000052534131000400000100010041753af735ae6140c9508567666c51c6ab929806adb0d210694b30ab142a060237bc741f9682e7d8d4310364b4bba4ee89cc9d3d5ce7e5583587e8ea44dca09977996582875e71fb54fa7b170798d853d5d8010b07219633bdb761d01ac924da44576d6180cdceae537973982bb461c541541d58417a3794e34f45e6f2d129e2")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Services" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Services")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Services")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This .NET standard library enables access to different data sources such as Microsoft Graph, OneDrive, Twitter, Microsoft Translator, and LinkedIn. It is part of the Windows Community Toolkit.\r\n      \r\n      Namespace:\r\n      - Facebook: Album, DataConfig, DataHost, OAuthTokens, Permissions, Photo, Picture, PictureData, PlatformImageSource, Post, RequestSource, Service.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.Connectivity" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.Connectivity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.Connectivity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library enables easier consumption of connectivity Devices/Peripherals and handle its connection to Windows devices. It contains BluetoothLE and Network connectivity helpers.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.DeveloperTools" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.DeveloperTools")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.DeveloperTools")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library provides XAML user controls and services to help developers build their app. It is part of the Windows Community Toolkit.\r\n      \r\n      -AligmentGrid : Displays a Grid that helps align the controls.\r\n      -FocusTrackerControl : The FocusTracker Control is a feature that can be used to display information about the current focused XAML element.\r\n      -Themes : Provides the source path of the resource dictionaries for the FocusTracker.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This package includes code only helpers such as Colors conversion tool, Storage file handling, a Stream helper class, etc.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.Notifications" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.Notifications")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.Notifications")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.4", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      Generate tile, toast, and badge notifications for Windows 10 via code, with the help of IntelliSense.\r\n      Adds Support for adaptive tiles and adaptive/interactive toasts for Windows 10. It is part of the Windows Community Toolkit.\r\n      Supports C# and C++ UWP project types (see Microsoft.Toolkit.Uwp.Notifications.JavaScript for the JS version).\r\n      Also works with C# portable class libraries and non-UWP C# projects like server projects.\r\n      This project contains outputs for netstandard1.4, uap10.0 and native for WinRT.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.Services" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library enables access to Facebook. It is part of the Windows Community Toolkit.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.Services")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.Services")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Animations" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Animations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Animations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides helpers and extensions on top of Windows Composition and XAML storyboards. It is part of the Windows Community Toolkit.\r\n\r\n      Namespace:\r\n      - Behaviors: Blur, CompositionBehaviorBase, CompositionBehaviorBase, Fade, FadeHeaderBehavior, Light, Offset, QuickReturnHeaderBehavior, Rotate, Saturation, Scale, StickyHeaderBehavior.\r\n      - CompositionAnimations:\r\n      - Animations: AnimationBase, OffsetAnimation, OpacityAnimation, RotationAnimation, RotationInDegreesAnimation, ScalarAnimation, ScaleAnimation, TranslationAnimation, TypedAnimationBase, Vector2Animation, Vector3Animation, Vector4Animation\r\n      - CompositionAnimations: ExpressionKeyFrame, KeyFrame, KeyFrameCollection, ScalarKeyFrame, TypedKeyFrame, Vector2KeyFrame, Vector3KeyFrame, Vector4KeyFrame\r\n      - ConnectedAnimations: Connected, ConnectedAnimationHelper, ConnectedAnimationListProperty, ConnectedAnimationProperties\r\n      - Effects: AnimationEffect, Blur, Saturation\r\n      - Expressions: ExpressionNodes, ExpressionValues, ReferenceNodes, CompositionExtensions, ExpressionFunctions, OperationType\r\n      - AnimationExtensions: Blur, Fade, Light, Offset, Rotate, Saturation, Scale\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Controls.DataGrid" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Controls.DataGrid")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Controls.DataGrid")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides a XAML DataGrid control. It is part of the Windows Community Toolkit.\r\n                   \r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("UnitTests.UWP")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Controls" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides XAML templated controls. It is part of the Windows Community Toolkit.\r\n      \r\n      Controls:\r\n        - AdaptiveGridView: Presents items in a evenly-spaced set of columns to fill the total available space.\r\n        - BladeView: Provides a horizontal collection of blades for master-detail scenarios.\r\n        - CameraPreview: Easily preview video from camera sources and get realtime frames from the selected source.\r\n        - Carousel: Presents items in a carousel control.\r\n        - DockPanel: Define areas where you can arrange child elements either horizontally or vertically, relative to each other.\r\n        - DropShadowPanel: DropShadowPanel contol allows the creation of a DropShadow for any Xaml FrameworkElement in markup.\r\n        - Expander: Expander allows user to show/hide content based on a boolean state.\r\n        - GridSplitter: A the control that redistributes space between columns or rows of a Grid control.\r\n        - HeaderedContentControl: Provides a header to content.\r\n        - HeaderedItemsControl: Provides a header to items.\r\n        - HeaderedTextBlock: Provide a header for read only text.\r\n        - ImageCropper: ImageCropper control allows user to crop image freely.\r\n        - ImageEx: Images are downloaded asynchronously showing a load indicator and can be stored in a local cache.\r\n        - InAppNotification: Show local notifications in your application.\r\n        - InfiniteCanvas: Supports Infinite Scrolling, Ink, Text, Format Text, Zoom in/out, Redo, Undo, Export &amp; Import.\r\n        - LayoutTransformControl: Support for transformations as if applied by LayoutTransform.\r\n        - Loading: Helps to show content with animation to the user while the app is doing some calculation.\r\n        - MarkdownTextBlock: An efficient and extensible control that can parse and render markdown.\r\n        - MasterDetailsView: Implements the Master/Details design pattern.\r\n        - OrbitView: Positions items in a circle around a center element and supports orbits and anchors.\r\n        - RadialGauge: Displays a value within a range, using a needle on a circular face.\r\n        - RadialProgressBar: Displays progress as a circle getting filled.\r\n        - RangeSelector: "Double slider" control for range values.\r\n        - RemoteDevicePicker: Remote Device Picker Control for Project Rome.\r\n        - RotatorTile: Rotates through a set of items one-by-one like a live-tile.\r\n        - ScrollHeader: A UI control that works as a ListView or GridView header control with quick return, sticky and fade behavior.\r\n        - StaggeredPanel: Layout of items in a column approach where an item will be added to whichever column has used the least amount of space.\r\n        - TextToolbar: A Toolbar for Editing Text attached to a RichEditBox. It can format RTF, Markdown, or use a Custom Formatter.\r\n        - TileControl: A ContentControl that show an image repeated many times.\r\n        - TokenizingTextBox: An AutoSuggestBox like control which places entered input into easily removed containers for contacts or tags.\r\n        - UniformGrid: Presents items in a evenly-spaced set of rows or columns to fill the total available display space.\r\n        - WrapPanel: Positions child elements in sequential position from left to right and breaks content to the next line.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("UnitTests.UWP")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Controls.Graph" Version="6.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Controls.Graph")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Controls.Graph")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides Microsoft Graph XAML controls. It is part of the Windows Community Toolkit.\r\n\r\n      Classes:\r\n      - AadLogin: The AAD Login Control leverages MSAL libraries to support basic AAD sign-in processes for Microsoft Graph and beyond.\r\n      - FileSelectedEventArgs: Arguments relating to a file selected event of SharePointFiles control.\r\n      - PeoplePicker: The PeoplePicker Control is a simple control that allows for selection of one or more users from an organizational AD.\r\n      - PeopleSelectionChangedEventArgs: Arguments relating to the people selected event of PeoplePicker control.\r\n      - PlannerTaskList: The PlannerTaskList Control displays a simple list of Planner tasks.\r\n      - PowerBIEmbedded: The PowerBI embedded control is a simple wrapper to an IFRAME for a PowerBI embed.\r\n      - ProfileCard: The Profile Card control is a simple way to display a user in multiple different formats and mixes of name/image/e-mail.\r\n      - SharePointFileList: The SharePointFiles Control displays a simple list of SharePoint Files.\r\n      - SignInEventArgs: Arguments relating to a sign-in event of Aadlogin control.\r\n      - SignInFailedEventArgs: Arguments relating to a sign-in event of Aadlogin control.\r\n      \r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.0.0.84")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.0.0+ga928b61848")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "a928b618482b51a7cdd8d283e57f5496aa1374e8")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Controls.Layout" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides XAML layout controls. It is part of the Windows Community Toolkit.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Controls.Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Controls.Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides UI components, such as XAML extensions, helpers, converters and more. It is part of the Windows Community Toolkit.\r\n\r\n      AdvancedCollectionView: It's a collection view implementation that support filtering, sorting and incremental loading. It's meant to be used in a viewmodel.\r\n      \r\n      Behaviors:\r\n      - BehaviorBase: Helper for building Behaviors\r\n      - ViewportBehavior: Listening for element to enter or exit the ScrollViewer viewport\r\n\r\n      CacheBase: Provides methods and tools to cache files in a folder.\r\n      \r\n      Converters: Commonly used converters that allow the data to be modified as it passes through the binding engine.\r\n      \r\n      Extensions:\r\n      - ApplicationViewExtensions: Provides attached properties for interacting with the ApplicationView on a window (app view).\r\n      - FrameworkElementExtensions: Provides attached dependency properties for the FrameworkElement.\r\n      - ListViewExtensions: Provides attached dependency properties for the ListViewBase\r\n      - LogicalTree: Defines a collection of extensions methods for UI.\r\n      - MatrixExtensions: Provides a set of extensions to the Matrix struct.\r\n      - MatrixHelperEx: Static helper methods for Matrix.\r\n      - Mouse: Helper class for easily changing the mouseover cursor type.\r\n      - NullableBool: Custom MarkupExtension which can provide nullable bool values.\r\n      - RotateTransformExtensions: Extension methods for RotateTransform.\r\n      - ScaleTransformExtensions: Extension methods for ScaleTransform.\r\n      - ScrollViewerExtensions: Provides attached dependency properties for the ListViewBase\r\n      - SkewTransformExtensions: Extension methods for SkewTransform.\r\n      - StatusBarExtensions: Provides attached dependency properties for interacting with the StatusBar on a window (app view).\r\n      - SurfaceDialTextbox: Helper class that provides attached properties to enable any TextBox with the Surface Dial.\r\n      - TextBoxMask: TextBox mask property allows a user to more easily enter fixed width text in TextBox control.\r\n      - TextBoxRegex: TextBoxRegex allows text validation using a regular expression.\r\n      - TitleBarExtensions: Provides attached dependency properties for interacting with the ApplicationViewTitleBar on a window (app view).\r\n      - TranslateTransformExtensions: Extension methods for TranslateTransform.\r\n      - VisualExtensions: Extension methods and attached properties for Visual objects\r\n      - VisualTree: Defines a collection of extensions methods for UI.\r\n\r\n      Helpers:\r\n      - BindableValueHolder: Holds the value. Can be used to change several objects' properties at a time.\r\n      - DependencyPropertyWatcher: Used to Track Changes of a Dependency Property\r\n      - ThemeListener: Class which listens for changes to Application Theme or High Contrast Modes and Signals an Event when they occur.\r\n      ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Media" Version="6.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides UI brushes. It is part of the Windows Community Toolkit.\r\n\r\n      Media:\r\n      - AcrylicBrush: A custom Brush that that implements an acrylic effect with full control over all parameters.\r\n      - BackdropBlurBrush: The BackdropBlurBrush is a Brush that blurs whatever is behind it in the application.\r\n      - BackdropGammaTransferBrush: A brush which alters the colors of whatever is behind it in the application by applying a per-channel gamma transfer function.\r\n      - BackdropInvertBrush: The BackdropInvertBrush is a Brush which inverts whatever is behind it in the application.\r\n      - BackdropSaturationBrush: Brush which applies a SaturationEffect to the Backdrop.\r\n      - BackdropSepiaBrush: Brush which applies a SepiaEffect to the Backdrop.\r\n      - CanvasBrushBase: Helper Brush class to interop with Win2D Canvas calls.\r\n      - ImageBlendBrush: A Brush which blends a BitmapImage to the Backdrop in a given mode.\r\n      - PipelineBrush: A Brush that renders a customizable Composition/Win2D effects pipeline\r\n      - RadialGradientBrush: This GradientBrush defines its Gradient as an interpolation within an Ellipse.\r\n      - TilesBrush: A Brush that displays a tiled image, wrapping at the edges and endlessly repeating.\r\n\r\n      Effects:\r\n      - AcrylicEffect: A custom acrylic effect that can be inserted into a pipeline.\r\n      - BackdropEffect: A backdrop effect that can sample from a specified source.\r\n      - BlendEffect: A blend effect that merges the current pipeline with an input one.\r\n      - BlurEffect: A gaussian blur effect.\r\n      - ImageEffect: An effect which displays an image loaded as a Win2D surface.\r\n      - ShadeEffect: An effect that overlays a color layer over the current pipeline, with a specified intensity.\r\n      - SolidColorEffect: An effect that renders a standard 8bit SDR color on the available surface.\r\n      - TileEffect: An effect that loads an image and replicates it to cover all the available surface area.\r\n      - ExposureEffect, GrayscaleEffect, HueRotationEffect and more, mapping to Win2D effects.\r\n\r\n      Helpers:\r\n      - SurfaceLoader: A class that can load and draw images and other objects to Win2D surfaces and brushes.\r\n\r\n      PipelineBuilder: A class that allows to build custom effects pipelines and create CompositionBrush instances from them.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+6cab8ab846")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "6cab8ab8462b9ee9cb599915c64db16c2f4d091f")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Win32.UI.XamlHost.Managed" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library provides XAML islands common helpers for WPF and WinForms. It is part of the Windows Community Toolkit.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Win32.UI.XamlHost.Managed")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Win32.UI.XamlHost.Managed")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+g01ccabdea4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "01ccabdea4fcad523b67ddb0d215813bfa3e3531")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Wpf.UI.Controls" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Wpf.UI.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Wpf.UI.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Core", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Xml", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("PresentationFramework", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("PresentationCore", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("WindowsBase", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Xaml", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Configuration", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("PresentationFramework.Aero2", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("Windows.Foundation.winmd", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("Windows.Web.winmd", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Runtime.InteropServices.WindowsRuntime", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Runtime.Serialization", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("SMDiagnostics", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.ServiceModel.Internals", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Runtime.WindowsRuntime", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("UIAutomationProvider", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Windows.Forms", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Drawing", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Runtime", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("Windows.Globalization.winmd", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("Windows.Storage.winmd", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides XAML controls for WPF. It is part of the Windows Community Toolkit.\r\n\r\n      Controls:\r\n\r\n      -InkCanvas : Defines an area that receives and displays ink strokes.\r\n      -InkToolbar : Wpf-enabled wrapper for InkToolbar, that Represents a Universal Windows app control containing a customizable and extensible collection of buttons that activate ink-related features in an associated InkCanvas.\r\n      -MapControl : A set of controls for WPF and UWP for rendering digital maps from different providers (like OpenStreetMap and Bing Maps) and various types of map overlays.\r\n      -MediaPlayerElement : This controls embeds a view that streams and renders media content such as video in your Windows Forms or WPF desktop application.\r\n      -SwapChainPanel : Provides a hosting surface, where Microsoft DirectX swap chains provide content that can be rendered into a XAML UI. A SwapChainPanel element is a key component for an app that renders Microsoft DirectX graphics and then presents those visuals within a XAML page.\r\n\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+g01ccabdea4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "01ccabdea4fcad523b67ddb0d215813bfa3e3531")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Wpf.UI.Controls.WebView" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Wpf.UI.Controls.WebView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Wpf.UI.Controls.WebView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides WebView XAML control for WPF by hosting web content in your WPF desktop application. It is part of the Windows Community Toolkit.\r\n      This control uses the Microsoft Edge rendering engine (EdgeHTML) or the the System.Windows.Controls.WebBrowser, for devices on older versions (WebViewCompatible), to embed a view that renders richly formatted HTML5 content from a remote web server, dynamically generated code, or content files.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+g01ccabdea4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "01ccabdea4fcad523b67ddb0d215813bfa3e3531")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Wpf.UI.XamlHost" Version="6.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Wpf.UI.XamlHost")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Wpf.UI.XamlHost")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("\r\n      This library provides XAML islands helpers for WPF. It is part of the Windows Community Toolkit.\r\n      By using the WindowsXamlHost control, you can add built-in or custom UWP controls to the User Interface (UI) of your WPF desktop application, such as Windows Ink and controls that support the Fluent Design System.\r\n    ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("6.1.0.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("6.1.0+g01ccabdea4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "01ccabdea4fcad523b67ddb0d215813bfa3e3531")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.Input.GazeInteraction" Version="255.255.255.255" />
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Lottie" Version="0.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft.Toolkit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) .NET Foundation and Contributors.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Lottie")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Lottie")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library provides the LottieVisualSource which is consumed by the Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer to render Lottie JSON files.")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 41 75 3a f7 35 ae 61 40 c9 50 85 67 66 6c 51 c6 ab 92 98 06 ad b0 d2 10 69 4b 30 ab 14 2a 06 02 37 bc 74 1f 96 82 e7 d8 d4 31 03 64 b4 bb a4 ee 89 cc 9d 3d 5c e7 e5 58 35 87 e8 ea 44 dc a0 99 77 99 65 82 87 5e 71 fb 54 fa 7b 17 07 98 d8 53 d5 d8 01 0b 07 21 96 33 bd b7 61 d0 1a c9 24 da 44 57 6d 61 80 cd ce ae 53 79 73 98 2b b4 61 c5 41 54 1d 58 41 7a 37 94 e3 4f 45 e6 f2 d1 29 e2 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Win32.UI.XamlHost" Version="255.255.255.255" />
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Microsoft.Toolkit">
      <Type Name="Converters" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Collections">
      <Type Name="IIncrementalSource`1" DisplayName="IIncrementalSource&lt;TSource&gt;" Kind="Interface" />
      <Type Name="IReadOnlyObservableGroup" Kind="Interface" />
      <Type Name="ObservableGroup`2" DisplayName="ObservableGroup&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="ObservableGroupedCollection`2" DisplayName="ObservableGroupedCollection&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="ObservableGroupedCollectionExtensions" Kind="Class" />
      <Type Name="ReadOnlyObservableGroup`2" DisplayName="ReadOnlyObservableGroup&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="ReadOnlyObservableGroupedCollection`2" DisplayName="ReadOnlyObservableGroupedCollection&lt;TKey,TValue&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Diagnostics">
      <Type Name="Guard" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Extensions">
      <Type Name="ArrayExtensions" Kind="Class" />
      <Type Name="StringExtensions" Kind="Class" />
      <Type Name="TypeExtensions" Kind="Class" />
      <Type Name="ValueTypeExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Forms.UI.Controls">
      <Type Name="InkCanvas" Kind="Class" />
      <Type Name="InkToolbar" Kind="Class" />
      <Type Name="InkToolbarCustomPenButton" Kind="Class" />
      <Type Name="InkToolbarCustomToolButton" Kind="Class" />
      <Type Name="InkToolbarIsStencilButtonCheckedChangedEventArgs" Kind="Class" />
      <Type Name="InkToolbarMenuButton" Kind="Class" />
      <Type Name="InkToolbarPenButton" Kind="Class" />
      <Type Name="InkToolbarStencilButton" Kind="Class" />
      <Type Name="InkToolbarToggleButton" Kind="Class" />
      <Type Name="InkToolbarToolButton" Kind="Class" />
      <Type Name="IWebViewCompatibleAdapter" Kind="Interface" />
      <Type Name="MapControl" Kind="Class" />
      <Type Name="MediaPlayerElement" Kind="Class" />
      <Type Name="WebView" Kind="Class" />
      <Type Name="WebViewCompatible" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Forms.UI.XamlHost">
      <Type Name="WindowsXamlHost" Kind="Class" />
      <Type Name="WindowsXamlHostBase" Kind="Class" />
      <Type Name="WrapperLookup" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Graph.Controls">
      <Type Name="LoginButton" Kind="Class" />
      <Type Name="LoginFailedEventArgs" Kind="Class" />
      <Type Name="PeoplePicker" Kind="Class" />
      <Type Name="PersonView" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Graph.Controls.Microsoft_Toolkit_Graph_Controls_XamlTypeInfo">
      <Type Name="XamlMetaDataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Graph.Converters">
      <Type Name="UserToPersonConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Graph.Extensions">
      <Type Name="GraphExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Graph.Providers">
      <Type Name="CommonProviderBehaviorBase" Kind="Class" />
      <Type Name="InteractiveProviderBehavior" Kind="Class" />
      <Type Name="IProvider" Kind="Interface" />
      <Type Name="MockProvider" Kind="Class" />
      <Type Name="MockProviderBehavior" Kind="Class" />
      <Type Name="MsalProvider" Kind="Class" />
      <Type Name="ProviderManager" Kind="Class" />
      <Type Name="ProviderManagerChangedState" Kind="Enumeration" />
      <Type Name="ProviderState" Kind="Enumeration" />
      <Type Name="ProviderUpdatedEventArgs" Kind="Class" />
      <Type Name="QuickCreate" Kind="Class" />
      <Type Name="ScopeSet" Kind="Class" />
      <Type Name="StateChangedEventArgs" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Helpers">
      <Type Name="NotifyTaskCompletion`1" DisplayName="NotifyTaskCompletion&lt;TResult&gt;" Kind="Class" />
      <Type Name="Singleton`1" DisplayName="Singleton&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.HighPerformance">
      <Type Name="Box`1" DisplayName="Box&lt;T&gt;" Kind="Class" />
      <Type Name="BoxExtensions" Kind="Class" />
      <Type Name="ReadOnlyRef`1" DisplayName="ReadOnlyRef&lt;T&gt;" Kind="Structure" />
      <Type Name="Ref`1" DisplayName="Ref&lt;T&gt;" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.HighPerformance.Buffers">
      <Type Name="AllocationMode" Kind="Enumeration" />
      <Type Name="ArrayPoolBufferWriter`1" DisplayName="ArrayPoolBufferWriter&lt;T&gt;" Kind="Class" />
      <Type Name="IBuffer`1" DisplayName="IBuffer&lt;T&gt;" Kind="Interface" />
      <Type Name="MemoryBufferWriter`1" DisplayName="MemoryBufferWriter&lt;T&gt;" Kind="Class" />
      <Type Name="MemoryOwner`1" DisplayName="MemoryOwner&lt;T&gt;" Kind="Class" />
      <Type Name="SpanOwner`1" DisplayName="SpanOwner&lt;T&gt;" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.HighPerformance.Enumerables">
      <Type Name="Array2DColumnEnumerable`1" DisplayName="Array2DColumnEnumerable&lt;T&gt;" Kind="Structure" />
      <Type Name="Array2DColumnEnumerable`1+Enumerator" DisplayName="Array2DColumnEnumerable&lt;T&gt;+Enumerator" Kind="Structure" />
      <Type Name="Array2DRowEnumerable`1" DisplayName="Array2DRowEnumerable&lt;T&gt;" Kind="Structure" />
      <Type Name="Array2DRowEnumerable`1+Enumerator" DisplayName="Array2DRowEnumerable&lt;T&gt;+Enumerator" Kind="Structure" />
      <Type Name="ReadOnlySpanEnumerable`1" DisplayName="ReadOnlySpanEnumerable&lt;T&gt;" Kind="Structure" />
      <Type Name="ReadOnlySpanEnumerable`1+Item" DisplayName="ReadOnlySpanEnumerable&lt;T&gt;+Item" Kind="Structure" />
      <Type Name="ReadOnlySpanTokenizer`1" DisplayName="ReadOnlySpanTokenizer&lt;T&gt;" Kind="Structure" />
      <Type Name="SpanEnumerable`1" DisplayName="SpanEnumerable&lt;T&gt;" Kind="Structure" />
      <Type Name="SpanEnumerable`1+Item" DisplayName="SpanEnumerable&lt;T&gt;+Item" Kind="Structure" />
      <Type Name="SpanTokenizer`1" DisplayName="SpanTokenizer&lt;T&gt;" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.HighPerformance.Extensions">
      <Type Name="ArrayExtensions" Kind="Class" />
      <Type Name="ArrayPoolExtensions" Kind="Class" />
      <Type Name="BoolExtensions" Kind="Class" />
      <Type Name="HashCodeExtensions" Kind="Class" />
      <Type Name="IBufferWriterExtensions" Kind="Class" />
      <Type Name="IMemoryOwnerExtensions" Kind="Class" />
      <Type Name="MemoryExtensions" Kind="Class" />
      <Type Name="ObjectExtensions" Kind="Class" />
      <Type Name="ReadOnlyMemoryExtensions" Kind="Class" />
      <Type Name="ReadOnlySpanExtensions" Kind="Class" />
      <Type Name="SpanExtensions" Kind="Class" />
      <Type Name="SpinLockExtensions" Kind="Class" />
      <Type Name="SpinLockExtensions+Lock" Kind="Structure" />
      <Type Name="SpinLockExtensions+UnsafeLock" Kind="Structure" />
      <Type Name="StreamExtensions" Kind="Class" />
      <Type Name="StringExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.HighPerformance.Helpers">
      <Type Name="BitHelper" Kind="Class" />
      <Type Name="HashCode`1" DisplayName="HashCode&lt;T&gt;" Kind="Structure" />
      <Type Name="IAction" Kind="Interface" />
      <Type Name="IAction2D" Kind="Interface" />
      <Type Name="IInAction`1" DisplayName="IInAction&lt;T&gt;" Kind="Interface" />
      <Type Name="IRefAction`1" DisplayName="IRefAction&lt;T&gt;" Kind="Interface" />
      <Type Name="ParallelHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Parsers">
      <Type Name="IParser`1" DisplayName="IParser&lt;T&gt;" Kind="Interface" />
      <Type Name="SchemaBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Parsers.Core">
      <Type Name="ParseHelpers" Kind="Class" />
      <Type Name="StringValueAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Parsers.Markdown">
      <Type Name="ColumnAlignment" Kind="Enumeration" />
      <Type Name="HyperlinkType" Kind="Enumeration" />
      <Type Name="ListStyle" Kind="Enumeration" />
      <Type Name="MarkdownBlockType" Kind="Enumeration" />
      <Type Name="MarkdownDocument" Kind="Class" />
      <Type Name="MarkdownElement" Kind="Class" />
      <Type Name="MarkdownInlineType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Parsers.Markdown.Blocks">
      <Type Name="CodeBlock" Kind="Class" />
      <Type Name="HeaderBlock" Kind="Class" />
      <Type Name="HorizontalRuleBlock" Kind="Class" />
      <Type Name="LinkReferenceBlock" Kind="Class" />
      <Type Name="ListBlock" Kind="Class" />
      <Type Name="ListItemBlock" Kind="Class" />
      <Type Name="MarkdownBlock" Kind="Class" />
      <Type Name="ParagraphBlock" Kind="Class" />
      <Type Name="QuoteBlock" Kind="Class" />
      <Type Name="TableBlock" Kind="Class" />
      <Type Name="TableBlock+TableCell" Kind="Class" />
      <Type Name="TableBlock+TableColumnDefinition" Kind="Class" />
      <Type Name="TableBlock+TableRow" Kind="Class" />
      <Type Name="YamlHeaderBlock" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Parsers.Markdown.Inlines">
      <Type Name="BoldTextInline" Kind="Class" />
      <Type Name="CodeInline" Kind="Class" />
      <Type Name="EmojiInline" Kind="Class" />
      <Type Name="HyperlinkInline" Kind="Class" />
      <Type Name="IInlineContainer" Kind="Interface" />
      <Type Name="IInlineLeaf" Kind="Interface" />
      <Type Name="ImageInline" Kind="Class" />
      <Type Name="ItalicTextInline" Kind="Class" />
      <Type Name="LinkAnchorInline" Kind="Class" />
      <Type Name="MarkdownInline" Kind="Class" />
      <Type Name="MarkdownLinkInline" Kind="Class" />
      <Type Name="StrikethroughTextInline" Kind="Class" />
      <Type Name="SubscriptTextInline" Kind="Class" />
      <Type Name="SuperscriptTextInline" Kind="Class" />
      <Type Name="TextRunInline" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Parsers.Markdown.Render">
      <Type Name="IRenderContext" Kind="Interface" />
      <Type Name="MarkdownRendererBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Parsers.Rss">
      <Type Name="RssParser" Kind="Class" />
      <Type Name="RssSchema" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services">
      <Type Name="ConfigNullException" Kind="Class" />
      <Type Name="ConfigParameterNullException" Kind="Class" />
      <Type Name="DataProviderBase`1" DisplayName="DataProviderBase&lt;TConfig&gt;" Kind="Class" />
      <Type Name="DataProviderBase`2" DisplayName="DataProviderBase&lt;TConfig,TSchema&gt;" Kind="Class" />
      <Type Name="IDataService`3" DisplayName="IDataService&lt;T,U,V&gt;" Kind="Interface" />
      <Type Name="OAuthKeysNotPresentException" Kind="Class" />
      <Type Name="OAuthKeysRevokedException" Kind="Class" />
      <Type Name="ParserNullException" Kind="Class" />
      <Type Name="RequestFailedException" Kind="Class" />
      <Type Name="TooManyRequestsException" Kind="Class" />
      <Type Name="UserNotFoundException" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.Core">
      <Type Name="AuthenticationResult" Kind="Class" />
      <Type Name="AuthenticationResultStatus" Kind="Enumeration" />
      <Type Name="IAuthenticationBroker" Kind="Interface" />
      <Type Name="IPasswordManager" Kind="Interface" />
      <Type Name="ISignatureManager" Kind="Interface" />
      <Type Name="IStorageManager" Kind="Interface" />
      <Type Name="PasswordCredential" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.LinkedIn">
      <Type Name="LinkedInConstants" Kind="Class" />
      <Type Name="LinkedInContent" Kind="Class" />
      <Type Name="LinkedInDataConfig" Kind="Class" />
      <Type Name="LinkedInDataProvider" Kind="Class" />
      <Type Name="LinkedInOAuthTokens" Kind="Class" />
      <Type Name="LinkedInParser`1" DisplayName="LinkedInParser&lt;T&gt;" Kind="Class" />
      <Type Name="LinkedInPermissions" Kind="Enumeration" />
      <Type Name="LinkedInProfile" Kind="Class" />
      <Type Name="LinkedInProfileRequest" Kind="Class" />
      <Type Name="LinkedInService" Kind="Class" />
      <Type Name="LinkedInShareRequest" Kind="Class" />
      <Type Name="LinkedInShareResponse" Kind="Class" />
      <Type Name="LinkedInShareVisibility" Kind="Enumeration" />
      <Type Name="LinkedInVisibility" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.MicrosoftGraph">
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.MicrosoftGraph.Uwp">
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.MicrosoftTranslator">
      <Type Name="DetectedLanguage" Kind="Class" />
      <Type Name="DetectedLanguageBase" Kind="Class" />
      <Type Name="DetectedLanguageResponse" Kind="Class" />
      <Type Name="ITranslatorService" Kind="Interface" />
      <Type Name="ServiceLanguage" Kind="Class" />
      <Type Name="Translation" Kind="Class" />
      <Type Name="TranslationResponse" Kind="Class" />
      <Type Name="TranslatorService" Kind="Class" />
      <Type Name="TranslatorServiceException" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.OneDrive">
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.OneDrive.Uwp">
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.Services.MicrosoftGraph">
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.Services.Weibo">
      <Type Name="WeiboGeoInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.Twitter">
      <Type Name="ITwitterResult" Kind="Interface" />
      <Type Name="Tweet" Kind="Class" />
      <Type Name="TweetParser" Kind="Class" />
      <Type Name="TwitterCoordinates" Kind="Class" />
      <Type Name="TwitterDataConfig" Kind="Class" />
      <Type Name="TwitterDataProvider" Kind="Class" />
      <Type Name="TwitterDirectMessage" Kind="Class" />
      <Type Name="TwitterEntities" Kind="Class" />
      <Type Name="TwitterError" Kind="Class" />
      <Type Name="TwitterErrors" Kind="Class" />
      <Type Name="TwitterException" Kind="Class" />
      <Type Name="TwitterExtended" Kind="Class" />
      <Type Name="TwitterExtendedEntities" Kind="Class" />
      <Type Name="TwitterGeoData" Kind="Class" />
      <Type Name="TwitterHashtag" Kind="Class" />
      <Type Name="TwitterMedia" Kind="Class" />
      <Type Name="TwitterMediaAdditionalInfo" Kind="Class" />
      <Type Name="TwitterMediaSizeData" Kind="Class" />
      <Type Name="TwitterMediaSizes" Kind="Class" />
      <Type Name="TwitterMediaVideoInfo" Kind="Class" />
      <Type Name="TwitterMediaVideoVariants" Kind="Class" />
      <Type Name="TwitterOAuthTokens" Kind="Class" />
      <Type Name="TwitterOAuthTokenType" Kind="Enumeration" />
      <Type Name="TwitterParser`1" DisplayName="TwitterParser&lt;T&gt;" Kind="Class" />
      <Type Name="TwitterPlace" Kind="Class" />
      <Type Name="TwitterPlaceBoundingBox" Kind="Class" />
      <Type Name="TwitterPoll" Kind="Class" />
      <Type Name="TwitterPollOptions" Kind="Class" />
      <Type Name="TwitterQueryType" Kind="Enumeration" />
      <Type Name="TwitterSearchParser" Kind="Class" />
      <Type Name="TwitterService" Kind="Class" />
      <Type Name="TwitterStatus" Kind="Class" />
      <Type Name="TwitterStreamCallbacks" Kind="Class" />
      <Type Name="TwitterStreamCallbacks+RawJsonCallback" Kind="Delegate" />
      <Type Name="TwitterStreamCallbacks+TwitterStreamCallback" Kind="Delegate" />
      <Type Name="TwitterStreamDeletedEvent" Kind="Class" />
      <Type Name="TwitterStreamEvent" Kind="Class" />
      <Type Name="TwitterStreamEventType" Kind="Enumeration" />
      <Type Name="TwitterSymbol" Kind="Class" />
      <Type Name="TwitterUrl" Kind="Class" />
      <Type Name="TwitterUrlUnwound" Kind="Class" />
      <Type Name="TwitterUser" Kind="Class" />
      <Type Name="TwitterUserMention" Kind="Class" />
      <Type Name="TwitterUserStreamParser" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Services.Weibo">
      <Type Name="WeiboDataConfig" Kind="Class" />
      <Type Name="WeiboDataProvider" Kind="Class" />
      <Type Name="WeiboError" Kind="Class" />
      <Type Name="WeiboException" Kind="Class" />
      <Type Name="WeiboImage" Kind="Class" />
      <Type Name="WeiboOAuthTokens" Kind="Class" />
      <Type Name="WeiboParser`1" DisplayName="WeiboParser&lt;T&gt;" Kind="Class" />
      <Type Name="WeiboQueryType" Kind="Enumeration" />
      <Type Name="WeiboService" Kind="Class" />
      <Type Name="WeiboStatus" Kind="Class" />
      <Type Name="WeiboStatusParser" Kind="Class" />
      <Type Name="WeiboUser" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.UI.Controls">
      <Type Name="IWebViewCompatible" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp">
      <Type Name="HslColor" Kind="Structure" />
      <Type Name="HsvColor" Kind="Structure" />
      <Type Name="IncrementalLoadingCollection`2" DisplayName="IncrementalLoadingCollection&lt;TSource,IType&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Connectivity">
      <Type Name="BluetoothLEHelper" Kind="Class" />
      <Type Name="ConnectionInformation" Kind="Class" />
      <Type Name="ConnectionType" Kind="Enumeration" />
      <Type Name="GattConvert" Kind="Class" />
      <Type Name="GattNativeUuid" Kind="Enumeration" />
      <Type Name="GattProtocolErrorParser" Kind="Class" />
      <Type Name="GattUuidsService" Kind="Class" />
      <Type Name="NetworkHelper" Kind="Class" />
      <Type Name="ObservableBluetoothLEDevice" Kind="Class" />
      <Type Name="ObservableBluetoothLEDevice+RSSIComparer" Kind="Class" />
      <Type Name="ObservableGattCharacteristics" Kind="Class" />
      <Type Name="ObservableGattCharacteristics+DisplayTypes" Kind="Enumeration" />
      <Type Name="ObservableGattDeviceService" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Deferred">
      <Type Name="DeferredCancelEventArgs" Kind="Class" />
      <Type Name="DeferredEventArgs" Kind="Class" />
      <Type Name="EventDeferral" Kind="Class" />
      <Type Name="EventHandlerExtensions" Kind="Class" />
      <Type Name="TypedEventHandlerExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.DeveloperTools">
      <Type Name="AlignmentGrid" Kind="Class" />
      <Type Name="FocusTracker" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.DeveloperTools.Microsoft_Toolkit_Uwp_DeveloperTools_XamlTypeInfo">
      <Type Name="XamlMetaDataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Extensions">
      <Type Name="StringExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Helpers">
      <Type Name="BackgroundTaskHelper" Kind="Class" />
      <Type Name="BaseObjectStorageHelper" Kind="Class" />
      <Type Name="CameraHelper" Kind="Class" />
      <Type Name="CameraHelperResult" Kind="Enumeration" />
      <Type Name="CollectionFormingDeepLinkParser" Kind="Class" />
      <Type Name="ColorHelper" Kind="Class" />
      <Type Name="DeepLinkParser" Kind="Class" />
      <Type Name="DispatcherHelper" Kind="Class" />
      <Type Name="FrameEventArgs" Kind="Class" />
      <Type Name="IObjectSerializer" Kind="Interface" />
      <Type Name="IObjectStorageHelper" Kind="Interface" />
      <Type Name="LocalObjectStorageHelper" Kind="Class" />
      <Type Name="OSVersion" Kind="Structure" />
      <Type Name="PackageVersionHelper" Kind="Class" />
      <Type Name="PrintHelper" Kind="Class" />
      <Type Name="PrintHelperOptions" Kind="Class" />
      <Type Name="QueryParameterCollection" Kind="Class" />
      <Type Name="RemoteDeviceHelper" Kind="Class" />
      <Type Name="RoamingObjectStorageHelper" Kind="Class" />
      <Type Name="ScreenUnit" Kind="Enumeration" />
      <Type Name="ScreenUnitHelper" Kind="Class" />
      <Type Name="StorageFileHelper" Kind="Class" />
      <Type Name="StreamHelper" Kind="Class" />
      <Type Name="SystemInformation" Kind="Class" />
      <Type Name="WeakEventListener`3" DisplayName="WeakEventListener&lt;TInstance,TSource,TEventArgs&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Input.GazeInteraction">
      <Type Name="DwellInvokedRoutedEventArgs" Kind="Class" />
      <Type Name="DwellProgressEventArgs" Kind="Class" />
      <Type Name="DwellProgressState" Kind="Enumeration" />
      <Type Name="GazeElement" Kind="Class" />
      <Type Name="GazeEventArgs" Kind="Class" />
      <Type Name="GazeHidUsages" Kind="Enumeration" />
      <Type Name="GazeInput" Kind="Class" />
      <Type Name="GazePointer" Kind="Class" />
      <Type Name="GazeSettingsHelper" Kind="Class" />
      <Type Name="GazeStats" Kind="Class" />
      <Type Name="Interaction" Kind="Enumeration" />
      <Type Name="PointerState" Kind="Enumeration" />
      <Type Name="StateChangedEventArgs" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Input.GazeInteraction.GazeHidParsers">
      <Type Name="GazeHidPosition" Kind="Class" />
      <Type Name="GazeHidPositionParser" Kind="Class" />
      <Type Name="GazeHidPositions" Kind="Class" />
      <Type Name="GazeHidPositionsParser" Kind="Class" />
      <Type Name="GazeHidRotationParser" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Notifications">
      <Type Name="AdaptiveGroup" Kind="Class" />
      <Type Name="AdaptiveImage" Kind="Class" />
      <Type Name="AdaptiveImageAlign" Kind="Enumeration" />
      <Type Name="AdaptiveImageCrop" Kind="Enumeration" />
      <Type Name="AdaptiveProgressBar" Kind="Class" />
      <Type Name="AdaptiveProgressBarValue" Kind="Class" />
      <Type Name="AdaptiveSubgroup" Kind="Class" />
      <Type Name="AdaptiveSubgroupTextStacking" Kind="Enumeration" />
      <Type Name="AdaptiveText" Kind="Class" />
      <Type Name="AdaptiveTextAlign" Kind="Enumeration" />
      <Type Name="AdaptiveTextStyle" Kind="Enumeration" />
      <Type Name="BadgeGlyphContent" Kind="Class" />
      <Type Name="BadgeGlyphValue" Kind="Enumeration" />
      <Type Name="BadgeNumericContent" Kind="Class" />
      <Type Name="BindableProgressBarValue" Kind="Class" />
      <Type Name="BindableString" Kind="Class" />
      <Type Name="IAdaptiveChild" Kind="Interface" />
      <Type Name="IAdaptiveSubgroupChild" Kind="Interface" />
      <Type Name="IBaseImage" Kind="Interface" />
      <Type Name="IBaseText" Kind="Interface" />
      <Type Name="INotificationContent" Kind="Interface" />
      <Type Name="ITileBindingContent" Kind="Interface" />
      <Type Name="ITileBindingContentAdaptiveChild" Kind="Interface" />
      <Type Name="IToastActions" Kind="Interface" />
      <Type Name="IToastBindingGenericChild" Kind="Interface" />
      <Type Name="IToastButton" Kind="Interface" />
      <Type Name="IToastInput" Kind="Interface" />
      <Type Name="TileBackgroundImage" Kind="Class" />
      <Type Name="TileBackgroundImageCrop" Kind="Enumeration" />
      <Type Name="TileBasicImage" Kind="Class" />
      <Type Name="TileBasicText" Kind="Class" />
      <Type Name="TileBinding" Kind="Class" />
      <Type Name="TileBindingContentAdaptive" Kind="Class" />
      <Type Name="TileBindingContentContact" Kind="Class" />
      <Type Name="TileBindingContentIconic" Kind="Class" />
      <Type Name="TileBindingContentPeople" Kind="Class" />
      <Type Name="TileBindingContentPhotos" Kind="Class" />
      <Type Name="TileBranding" Kind="Enumeration" />
      <Type Name="TileContent" Kind="Class" />
      <Type Name="TileContentBuilder" Kind="Class" />
      <Type Name="TilePeekImage" Kind="Class" />
      <Type Name="TilePeekImageCrop" Kind="Enumeration" />
      <Type Name="TileSize" Kind="Enumeration" />
      <Type Name="TileTextStacking" Kind="Enumeration" />
      <Type Name="TileVisual" Kind="Class" />
      <Type Name="ToastActionsCustom" Kind="Class" />
      <Type Name="ToastActionsSnoozeAndDismiss" Kind="Class" />
      <Type Name="ToastActivationOptions" Kind="Class" />
      <Type Name="ToastActivationType" Kind="Enumeration" />
      <Type Name="ToastAfterActivationBehavior" Kind="Enumeration" />
      <Type Name="ToastAudio" Kind="Class" />
      <Type Name="ToastBindingGeneric" Kind="Class" />
      <Type Name="ToastBindingShoulderTap" Kind="Class" />
      <Type Name="ToastButton" Kind="Class" />
      <Type Name="ToastButtonDismiss" Kind="Class" />
      <Type Name="ToastButtonSnooze" Kind="Class" />
      <Type Name="ToastContent" Kind="Class" />
      <Type Name="ToastContentBuilder" Kind="Class" />
      <Type Name="ToastContextMenuItem" Kind="Class" />
      <Type Name="ToastDuration" Kind="Enumeration" />
      <Type Name="ToastGenericAppLogo" Kind="Class" />
      <Type Name="ToastGenericAppLogoCrop" Kind="Enumeration" />
      <Type Name="ToastGenericAttributionText" Kind="Class" />
      <Type Name="ToastGenericHeroImage" Kind="Class" />
      <Type Name="ToastHeader" Kind="Class" />
      <Type Name="ToastImageCrop" Kind="Enumeration" />
      <Type Name="ToastPeople" Kind="Class" />
      <Type Name="ToastScenario" Kind="Enumeration" />
      <Type Name="ToastSelectionBox" Kind="Class" />
      <Type Name="ToastSelectionBoxItem" Kind="Class" />
      <Type Name="ToastShoulderTapImage" Kind="Class" />
      <Type Name="ToastSpriteSheet" Kind="Class" />
      <Type Name="ToastTextBox" Kind="Class" />
      <Type Name="ToastVisual" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Services.Facebook">
      <Type Name="FacebookAlbum" Kind="Class" />
      <Type Name="FacebookDataConfig" Kind="Class" />
      <Type Name="FacebookOAuthTokens" Kind="Class" />
      <Type Name="FacebookPermissions" Kind="Enumeration" />
      <Type Name="FacebookPhoto" Kind="Class" />
      <Type Name="FacebookPicture" Kind="Class" />
      <Type Name="FacebookPictureData" Kind="Class" />
      <Type Name="FacebookPlatformImageSource" Kind="Class" />
      <Type Name="FacebookPost" Kind="Class" />
      <Type Name="FacebookRequestSource`1" DisplayName="FacebookRequestSource&lt;T&gt;" Kind="Class" />
      <Type Name="FacebookService" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI">
      <Type Name="AdvancedCollectionView" Kind="Class" />
      <Type Name="AdvancedCollectionView+NotificationDeferrer" Kind="Class" />
      <Type Name="CacheBase`1" DisplayName="CacheBase&lt;T&gt;" Kind="Class" />
      <Type Name="DesignTimeHelpers" Kind="Class" />
      <Type Name="FileCache" Kind="Class" />
      <Type Name="HyperlinkExtensions" Kind="Class" />
      <Type Name="IAdvancedCollectionView" Kind="Interface" />
      <Type Name="ImageCache" Kind="Class" />
      <Type Name="InMemoryStorage`1" DisplayName="InMemoryStorage&lt;T&gt;" Kind="Class" />
      <Type Name="InMemoryStorageItem`1" DisplayName="InMemoryStorageItem&lt;T&gt;" Kind="Class" />
      <Type Name="SortDescription" Kind="Class" />
      <Type Name="SortDirection" Kind="Enumeration" />
      <Type Name="WebViewExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Animations">
      <Type Name="AnimationBase" Kind="Class" />
      <Type Name="AnimationCollection" Kind="Class" />
      <Type Name="AnimationExtensions" Kind="Class" />
      <Type Name="AnimationSet" Kind="Class" />
      <Type Name="AnimationSetCompletedEventArgs" Kind="Class" />
      <Type Name="AnimationSetState" Kind="Enumeration" />
      <Type Name="Connected" Kind="Class" />
      <Type Name="EasingType" Kind="Enumeration" />
      <Type Name="ExpressionKeyFrame" Kind="Class" />
      <Type Name="Implicit" Kind="Class" />
      <Type Name="KeyFrame" Kind="Class" />
      <Type Name="KeyFrameCollection" Kind="Class" />
      <Type Name="LoadTimeEffectHandler" Kind="Delegate" />
      <Type Name="OffsetAnimation" Kind="Class" />
      <Type Name="OpacityAnimation" Kind="Class" />
      <Type Name="ReorderGridAnimation" Kind="Class" />
      <Type Name="RotationAnimation" Kind="Class" />
      <Type Name="RotationInDegreesAnimation" Kind="Class" />
      <Type Name="ScalarAnimation" Kind="Class" />
      <Type Name="ScalarKeyFrame" Kind="Class" />
      <Type Name="ScaleAnimation" Kind="Class" />
      <Type Name="SurfaceLoader" Kind="Class" />
      <Type Name="TranslationAnimation" Kind="Class" />
      <Type Name="TypedAnimationBase`2" DisplayName="TypedAnimationBase&lt;TKeyFrame,U&gt;" Kind="Class" />
      <Type Name="TypedKeyFrame`1" DisplayName="TypedKeyFrame&lt;T&gt;" Kind="Class" />
      <Type Name="Vector2Animation" Kind="Class" />
      <Type Name="Vector2KeyFrame" Kind="Class" />
      <Type Name="Vector3Animation" Kind="Class" />
      <Type Name="Vector3KeyFrame" Kind="Class" />
      <Type Name="Vector4Animation" Kind="Class" />
      <Type Name="Vector4KeyFrame" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Animations.Behaviors">
      <Type Name="Blur" Kind="Class" />
      <Type Name="CompositionBehaviorBase" Kind="Class" />
      <Type Name="CompositionBehaviorBase`1" DisplayName="CompositionBehaviorBase&lt;T&gt;" Kind="Class" />
      <Type Name="Fade" Kind="Class" />
      <Type Name="FadeHeaderBehavior" Kind="Class" />
      <Type Name="Light" Kind="Class" />
      <Type Name="Offset" Kind="Class" />
      <Type Name="QuickReturnHeaderBehavior" Kind="Class" />
      <Type Name="Rotate" Kind="Class" />
      <Type Name="Saturation" Kind="Class" />
      <Type Name="Scale" Kind="Class" />
      <Type Name="StickyHeaderBehavior" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Animations.Effects">
      <Type Name="AnimationEffect" Kind="Class" />
      <Type Name="Blur" Kind="Class" />
      <Type Name="Saturation" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Animations.Expressions">
      <Type Name="AmbientLightReferenceNode" Kind="Class" />
      <Type Name="BooleanNode" Kind="Class" />
      <Type Name="ColorBrushReferenceNode" Kind="Class" />
      <Type Name="ColorNode" Kind="Class" />
      <Type Name="CompositionExtensions" Kind="Class" />
      <Type Name="DistantLightReferenceNode" Kind="Class" />
      <Type Name="DropShadowReferenceNode" Kind="Class" />
      <Type Name="ExpressionFunctions" Kind="Class" />
      <Type Name="ExpressionNode" Kind="Class" />
      <Type Name="ExpressionValues" Kind="Class" />
      <Type Name="ExpressionValues+Constant" Kind="Class" />
      <Type Name="ExpressionValues+CurrentValue" Kind="Class" />
      <Type Name="ExpressionValues+Reference" Kind="Class" />
      <Type Name="ExpressionValues+StartingValue" Kind="Class" />
      <Type Name="ExpressionValues+Target" Kind="Class" />
      <Type Name="InsetClipReferenceNode" Kind="Class" />
      <Type Name="InteractionTrackerReferenceNode" Kind="Class" />
      <Type Name="ManipulationPropertySetReferenceNode" Kind="Class" />
      <Type Name="Matrix3x2Node" Kind="Class" />
      <Type Name="Matrix3x2Node+Subchannel" Kind="Enumeration" />
      <Type Name="Matrix4x4Node" Kind="Class" />
      <Type Name="Matrix4x4Node+Subchannel" Kind="Enumeration" />
      <Type Name="NineGridBrushReferenceNode" Kind="Class" />
      <Type Name="PointerPositionPropertySetReferenceNode" Kind="Class" />
      <Type Name="PointLightReferenceNode" Kind="Class" />
      <Type Name="PropertySetReferenceNode" Kind="Class" />
      <Type Name="QuaternionNode" Kind="Class" />
      <Type Name="ReferenceNode" Kind="Class" />
      <Type Name="ScalarNode" Kind="Class" />
      <Type Name="SpotLightReferenceNode" Kind="Class" />
      <Type Name="SurfaceBrushReferenceNode" Kind="Class" />
      <Type Name="Vector2Node" Kind="Class" />
      <Type Name="Vector2Node+Subchannel" Kind="Enumeration" />
      <Type Name="Vector3Node" Kind="Class" />
      <Type Name="Vector3Node+Subchannel" Kind="Enumeration" />
      <Type Name="Vector4Node" Kind="Class" />
      <Type Name="Vector4Node+Subchannel" Kind="Enumeration" />
      <Type Name="VisualReferenceNode" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Automation.Peers">
      <Type Name="DataGridAutomationPeer" Kind="Class" />
      <Type Name="DataGridCellAutomationPeer" Kind="Class" />
      <Type Name="DataGridColumnHeaderAutomationPeer" Kind="Class" />
      <Type Name="DataGridColumnHeadersPresenterAutomationPeer" Kind="Class" />
      <Type Name="DataGridDetailsPresenterAutomationPeer" Kind="Class" />
      <Type Name="DataGridGroupItemAutomationPeer" Kind="Class" />
      <Type Name="DataGridItemAutomationPeer" Kind="Class" />
      <Type Name="DataGridRowAutomationPeer" Kind="Class" />
      <Type Name="DataGridRowGroupHeaderAutomationPeer" Kind="Class" />
      <Type Name="DataGridRowHeaderAutomationPeer" Kind="Class" />
      <Type Name="DataGridRowsPresenterAutomationPeer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Behaviors">
      <Type Name="BehaviorBase`1" DisplayName="BehaviorBase&lt;T&gt;" Kind="Class" />
      <Type Name="ViewportBehavior" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls">
      <Type Name="AdaptiveGridView" Kind="Class" />
      <Type Name="BackButtonBehavior" Kind="Enumeration" />
      <Type Name="BitmapFileFormat" Kind="Enumeration" />
      <Type Name="BladeItem" Kind="Class" />
      <Type Name="BladeMode" Kind="Enumeration" />
      <Type Name="BladeView" Kind="Class" />
      <Type Name="CameraPreview" Kind="Class" />
      <Type Name="Carousel" Kind="Class" />
      <Type Name="CarouselItem" Kind="Class" />
      <Type Name="CarouselPanel" Kind="Class" />
      <Type Name="CodeBlockResolvingEventArgs" Kind="Class" />
      <Type Name="CropShape" Kind="Enumeration" />
      <Type Name="DataGrid" Kind="Class" />
      <Type Name="DataGrid+DisplayIndexComparer" Kind="Class" />
      <Type Name="DataGridAutoGeneratingColumnEventArgs" Kind="Class" />
      <Type Name="DataGridBeginningEditEventArgs" Kind="Class" />
      <Type Name="DataGridBoundColumn" Kind="Class" />
      <Type Name="DataGridCell" Kind="Class" />
      <Type Name="DataGridCellEditEndedEventArgs" Kind="Class" />
      <Type Name="DataGridCellEditEndingEventArgs" Kind="Class" />
      <Type Name="DataGridCheckBoxColumn" Kind="Class" />
      <Type Name="DataGridClipboardCellContent" Kind="Structure" />
      <Type Name="DataGridClipboardCopyMode" Kind="Enumeration" />
      <Type Name="DataGridColumn" Kind="Class" />
      <Type Name="DataGridColumnEventArgs" Kind="Class" />
      <Type Name="DataGridColumnReorderingEventArgs" Kind="Class" />
      <Type Name="DataGridComboBoxColumn" Kind="Class" />
      <Type Name="DataGridEditAction" Kind="Enumeration" />
      <Type Name="DataGridEditingUnit" Kind="Enumeration" />
      <Type Name="DataGridGridLinesVisibility" Kind="Enumeration" />
      <Type Name="DataGridHeadersVisibility" Kind="Enumeration" />
      <Type Name="DataGridLength" Kind="Structure" />
      <Type Name="DataGridLengthUnitType" Kind="Enumeration" />
      <Type Name="DataGridPreparingCellForEditEventArgs" Kind="Class" />
      <Type Name="DataGridRow" Kind="Class" />
      <Type Name="DataGridRowClipboardEventArgs" Kind="Class" />
      <Type Name="DataGridRowDetailsEventArgs" Kind="Class" />
      <Type Name="DataGridRowDetailsVisibilityMode" Kind="Enumeration" />
      <Type Name="DataGridRowEditEndedEventArgs" Kind="Class" />
      <Type Name="DataGridRowEditEndingEventArgs" Kind="Class" />
      <Type Name="DataGridRowEventArgs" Kind="Class" />
      <Type Name="DataGridRowGroupHeader" Kind="Class" />
      <Type Name="DataGridRowGroupHeaderEventArgs" Kind="Class" />
      <Type Name="DataGridSelectionMode" Kind="Enumeration" />
      <Type Name="DataGridSortDirection" Kind="Enumeration" />
      <Type Name="DataGridTemplateColumn" Kind="Class" />
      <Type Name="DataGridTextColumn" Kind="Class" />
      <Type Name="Dock" Kind="Enumeration" />
      <Type Name="DockPanel" Kind="Class" />
      <Type Name="DropShadowPanel" Kind="Class" />
      <Type Name="EditorChangedArgs" Kind="Class" />
      <Type Name="ExpandDirection" Kind="Enumeration" />
      <Type Name="Expander" Kind="Class" />
      <Type Name="Eyedropper" Kind="Class" />
      <Type Name="EyedropperColorChangedEventArgs" Kind="Class" />
      <Type Name="EyedropperToolButton" Kind="Class" />
      <Type Name="GridSplitter" Kind="Class" />
      <Type Name="GridSplitter+GridResizeBehavior" Kind="Enumeration" />
      <Type Name="GridSplitter+GridResizeDirection" Kind="Enumeration" />
      <Type Name="GridSplitter+GripperCursorType" Kind="Enumeration" />
      <Type Name="GridSplitter+SplitterCursorBehavior" Kind="Enumeration" />
      <Type Name="HeaderedContentControl" Kind="Class" />
      <Type Name="HeaderedItemsControl" Kind="Class" />
      <Type Name="HeaderedTextBlock" Kind="Class" />
      <Type Name="ImageAlignment" Kind="Enumeration" />
      <Type Name="ImageCropper" Kind="Class" />
      <Type Name="ImageCropperThumb" Kind="Class" />
      <Type Name="ImageEx" Kind="Class" />
      <Type Name="ImageExBase" Kind="Class" />
      <Type Name="ImageExCachingStrategy" Kind="Enumeration" />
      <Type Name="ImageExFailedEventArgs" Kind="Class" />
      <Type Name="ImageExFailedEventHandler" Kind="Delegate" />
      <Type Name="ImageExOpenedEventArgs" Kind="Class" />
      <Type Name="ImageExOpenedEventHandler" Kind="Delegate" />
      <Type Name="ImageResolvingEventArgs" Kind="Class" />
      <Type Name="InAppNotification" Kind="Class" />
      <Type Name="InAppNotificationClosedEventArgs" Kind="Class" />
      <Type Name="InAppNotificationClosedEventHandler" Kind="Delegate" />
      <Type Name="InAppNotificationClosingEventArgs" Kind="Class" />
      <Type Name="InAppNotificationClosingEventHandler" Kind="Delegate" />
      <Type Name="InAppNotificationDismissKind" Kind="Enumeration" />
      <Type Name="InAppNotificationOpeningEventArgs" Kind="Class" />
      <Type Name="InAppNotificationOpeningEventHandler" Kind="Delegate" />
      <Type Name="InfiniteCanvas" Kind="Class" />
      <Type Name="InfiniteCanvasTextBox" Kind="Class" />
      <Type Name="InfiniteCanvasVirtualDrawingSurface" Kind="Class" />
      <Type Name="InlineCollectionWrapper" Kind="Class" />
      <Type Name="ITokenStringContainer" Kind="Interface" />
      <Type Name="LayoutTransformControl" Kind="Class" />
      <Type Name="LinkClickedEventArgs" Kind="Class" />
      <Type Name="Loading" Kind="Class" />
      <Type Name="MarkdownRenderedEventArgs" Kind="Class" />
      <Type Name="MarkdownTextBlock" Kind="Class" />
      <Type Name="MasterDetailsView" Kind="Class" />
      <Type Name="MasterDetailsViewState" Kind="Enumeration" />
      <Type Name="Menu" Kind="Class" />
      <Type Name="MenuItem" Kind="Class" />
      <Type Name="OrbitView" Kind="Class" />
      <Type Name="OrbitViewDataItem" Kind="Class" />
      <Type Name="OrbitViewDataItemCollection" Kind="Class" />
      <Type Name="OrbitViewElementProperties" Kind="Class" />
      <Type Name="OrbitViewItem" Kind="Class" />
      <Type Name="OrbitViewItemClickedEventArgs" Kind="Class" />
      <Type Name="OrbitViewPanel" Kind="Class" />
      <Type Name="OrbitViewPanelItemArrangedArgs" Kind="Class" />
      <Type Name="OrbitViewPanelItemsArrangedArgs" Kind="Class" />
      <Type Name="PreviewFailedEventArgs" Kind="Class" />
      <Type Name="Proj" Kind="Structure" />
      <Type Name="RadialGauge" Kind="Class" />
      <Type Name="RadialGaugeAutomationPeer" Kind="Class" />
      <Type Name="RadialProgressBar" Kind="Class" />
      <Type Name="RangeChangedEventArgs" Kind="Class" />
      <Type Name="RangeSelector" Kind="Class" />
      <Type Name="RangeSelectorProperty" Kind="Enumeration" />
      <Type Name="RemoteDevicePicker" Kind="Class" />
      <Type Name="RemoteDeviceSelectionMode" Kind="Enumeration" />
      <Type Name="RotatorTile" Kind="Class" />
      <Type Name="RotatorTile+RotateDirection" Kind="Enumeration" />
      <Type Name="ScrollHeader" Kind="Class" />
      <Type Name="ScrollHeaderMode" Kind="Enumeration" />
      <Type Name="ScrollOrientation" Kind="Enumeration" />
      <Type Name="ShortcutKeyRequestArgs" Kind="Class" />
      <Type Name="StackMode" Kind="Enumeration" />
      <Type Name="StaggeredLayout" Kind="Class" />
      <Type Name="StaggeredPanel" Kind="Class" />
      <Type Name="StretchChild" Kind="Enumeration" />
      <Type Name="TabClosingEventArgs" Kind="Class" />
      <Type Name="TabDraggedOutsideEventArgs" Kind="Class" />
      <Type Name="TabView" Kind="Class" />
      <Type Name="TabViewItem" Kind="Class" />
      <Type Name="TabWidthMode" Kind="Enumeration" />
      <Type Name="TextToolbar" Kind="Class" />
      <Type Name="ThumbPlacement" Kind="Enumeration" />
      <Type Name="TileControl" Kind="Class" />
      <Type Name="TokenItemAddingEventArgs" Kind="Class" />
      <Type Name="TokenItemRemovingEventArgs" Kind="Class" />
      <Type Name="TokenizingTextBox" Kind="Class" />
      <Type Name="TokenizingTextBoxItem" Kind="Class" />
      <Type Name="TokenizingTextBoxStyleSelector" Kind="Class" />
      <Type Name="UniformGrid" Kind="Class" />
      <Type Name="WrapLayout" Kind="Class" />
      <Type Name="WrapPanel" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.Graph">
      <Type Name="AadLogin" Kind="Class" />
      <Type Name="DetailPaneDisplayMode" Kind="Enumeration" />
      <Type Name="FileSelectedEventArgs" Kind="Class" />
      <Type Name="PeoplePicker" Kind="Class" />
      <Type Name="PeopleSelectionChangedEventArgs" Kind="Class" />
      <Type Name="PlannerTaskList" Kind="Class" />
      <Type Name="PowerBIEmbedded" Kind="Class" />
      <Type Name="ProfileCard" Kind="Class" />
      <Type Name="SharePointFileList" Kind="Class" />
      <Type Name="SignInEventArgs" Kind="Class" />
      <Type Name="SignInFailedEventArgs" Kind="Class" />
      <Type Name="ViewType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.Graph.Microsoft_Toolkit_Uwp_UI_Controls_Graph_XamlTypeInfo">
      <Type Name="XamlMetaDataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render">
      <Type Name="ICodeBlockResolver" Kind="Interface" />
      <Type Name="IImageResolver" Kind="Interface" />
      <Type Name="ILinkRegister" Kind="Interface" />
      <Type Name="InlineRenderContext" Kind="Class" />
      <Type Name="MarkdownRenderer" Kind="Class" />
      <Type Name="RenderContext" Kind="Class" />
      <Type Name="RenderContextIncorrectException" Kind="Class" />
      <Type Name="UIElementCollectionRenderContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo">
      <Type Name="XamlMetaDataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_XamlTypeInfo">
      <Type Name="XamlMetaDataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.Primitives">
      <Type Name="DataGridCellsPresenter" Kind="Class" />
      <Type Name="DataGridColumnHeader" Kind="Class" />
      <Type Name="DataGridColumnHeadersPresenter" Kind="Class" />
      <Type Name="DataGridDetailsPresenter" Kind="Class" />
      <Type Name="DataGridFrozenGrid" Kind="Class" />
      <Type Name="DataGridRowHeader" Kind="Class" />
      <Type Name="DataGridRowsPresenter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons">
      <Type Name="ButtonMap" Kind="Class" />
      <Type Name="ButtonType" Kind="Enumeration" />
      <Type Name="DefaultButton" Kind="Class" />
      <Type Name="DefaultButtonModificationList" Kind="Class" />
      <Type Name="IToolbarItem" Kind="Interface" />
      <Type Name="ToolbarButton" Kind="Class" />
      <Type Name="ToolbarSeparator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.Common">
      <Type Name="CommonButtons" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats">
      <Type Name="ButtonActions" Kind="Class" />
      <Type Name="Format" Kind="Enumeration" />
      <Type Name="Formatter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.MarkDown">
      <Type Name="MarkDownButtonActions" Kind="Class" />
      <Type Name="MarkDownFormatter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.RichText">
      <Type Name="RichTextButtonActions" Kind="Class" />
      <Type Name="RichTextFormatter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarSymbols">
      <Type Name="List" Kind="Class" />
      <Type Name="NumberedList" Kind="Class" />
      <Type Name="Symbol" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Converters">
      <Type Name="BoolNegationConverter" Kind="Class" />
      <Type Name="BoolToObjectConverter" Kind="Class" />
      <Type Name="BoolToVisibilityConverter" Kind="Class" />
      <Type Name="CollectionVisibilityConverter" Kind="Class" />
      <Type Name="DoubleToObjectConverter" Kind="Class" />
      <Type Name="DoubleToVisibilityConverter" Kind="Class" />
      <Type Name="EmptyCollectionToObjectConverter" Kind="Class" />
      <Type Name="EmptyObjectToObjectConverter" Kind="Class" />
      <Type Name="EmptyStringToObjectConverter" Kind="Class" />
      <Type Name="FileSizeToFriendlyStringConverter" Kind="Class" />
      <Type Name="FormatStringConverter" Kind="Class" />
      <Type Name="RemoteSystemKindToSymbolConverter" Kind="Class" />
      <Type Name="ResourceNameToResourceStringConverter" Kind="Class" />
      <Type Name="StringFormatConverter" Kind="Class" />
      <Type Name="StringVisibilityConverter" Kind="Class" />
      <Type Name="ToolbarFormatActiveConverter" Kind="Class" />
      <Type Name="VisibilityToBoolConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Extensions">
      <Type Name="ApplicationViewExtensions" Kind="Class" />
      <Type Name="Axis" Kind="Enumeration" />
      <Type Name="BitmapIconExtension" Kind="Class" />
      <Type Name="BitmapIconSourceExtension" Kind="Class" />
      <Type Name="DispatcherTimerExtensions" Kind="Class" />
      <Type Name="FontIconExtension" Kind="Class" />
      <Type Name="FontIconSourceExtension" Kind="Class" />
      <Type Name="FrameworkElementExtensions" Kind="Class" />
      <Type Name="ListViewExtensions" Kind="Class" />
      <Type Name="LogicalTree" Kind="Class" />
      <Type Name="MatrixExtensions" Kind="Class" />
      <Type Name="MatrixHelperEx" Kind="Class" />
      <Type Name="Mouse" Kind="Class" />
      <Type Name="NullableBool" Kind="Class" />
      <Type Name="RotateTransformExtensions" Kind="Class" />
      <Type Name="ScaleTransformExtensions" Kind="Class" />
      <Type Name="ScrollViewerExtensions" Kind="Class" />
      <Type Name="SkewTransformExtensions" Kind="Class" />
      <Type Name="StatusBarExtensions" Kind="Class" />
      <Type Name="StretchDirection" Kind="Enumeration" />
      <Type Name="SurfaceDialTextbox" Kind="Class" />
      <Type Name="SymbolIconExtension" Kind="Class" />
      <Type Name="SymbolIconSourceExtension" Kind="Class" />
      <Type Name="TextBoxMask" Kind="Class" />
      <Type Name="TextBoxRegex" Kind="Class" />
      <Type Name="TextBoxRegex+ValidationMode" Kind="Enumeration" />
      <Type Name="TextBoxRegex+ValidationType" Kind="Enumeration" />
      <Type Name="TextIconExtension" Kind="Class" />
      <Type Name="TitleBarExtensions" Kind="Class" />
      <Type Name="TranslateTransformExtensions" Kind="Class" />
      <Type Name="UIElementExtensions" Kind="Class" />
      <Type Name="VisualExtensions" Kind="Class" />
      <Type Name="VisualProperty" Kind="Enumeration" />
      <Type Name="VisualTree" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Extensions.Markup">
      <Type Name="OnDevice" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Helpers">
      <Type Name="BindableValueHolder" Kind="Class" />
      <Type Name="CompositionTargetHelper" Kind="Class" />
      <Type Name="DependencyPropertyWatcher`1" DisplayName="DependencyPropertyWatcher&lt;T&gt;" Kind="Class" />
      <Type Name="ThemeChangedEvent" Kind="Delegate" />
      <Type Name="ThemeListener" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Lottie">
      <Type Name="Issue" Kind="Class" />
      <Type Name="LottieVisualDiagnostics" Kind="Class" />
      <Type Name="LottieVisualOptions" Kind="Enumeration" />
      <Type Name="LottieVisualSource" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Lottie.Lottie_Windows_XamlTypeInfo">
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Media">
      <Type Name="AcrylicBrush" Kind="Class" />
      <Type Name="AlphaMode" Kind="Enumeration" />
      <Type Name="BackdropBlurBrush" Kind="Class" />
      <Type Name="BackdropGammaTransferBrush" Kind="Class" />
      <Type Name="BackdropInvertBrush" Kind="Class" />
      <Type Name="BackdropSaturationBrush" Kind="Class" />
      <Type Name="BackdropSepiaBrush" Kind="Class" />
      <Type Name="CacheMode" Kind="Enumeration" />
      <Type Name="CanvasBrushBase" Kind="Class" />
      <Type Name="DpiMode" Kind="Enumeration" />
      <Type Name="ImageBlendBrush" Kind="Class" />
      <Type Name="ImageBlendMode" Kind="Enumeration" />
      <Type Name="PipelineBrush" Kind="Class" />
      <Type Name="Placement" Kind="Enumeration" />
      <Type Name="RadialGradientBrush" Kind="Class" />
      <Type Name="TilesBrush" Kind="Class" />
      <Type Name="XamlCompositionBrush" Kind="Class" />
      <Type Name="XamlCompositionEffectBrushBase" Kind="Class" />
      <Type Name="XamlEffectAnimation`1" DisplayName="XamlEffectAnimation&lt;T&gt;" Kind="Delegate" />
      <Type Name="XamlEffectSetter`1" DisplayName="XamlEffectSetter&lt;T&gt;" Kind="Delegate" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Media.Effects">
      <Type Name="AcrylicSourceExtension" Kind="Class" />
      <Type Name="BackdropSourceExtension" Kind="Class" />
      <Type Name="BlendEffect" Kind="Class" />
      <Type Name="BlurEffect" Kind="Class" />
      <Type Name="CrossFadeEffect" Kind="Class" />
      <Type Name="ExposureEffect" Kind="Class" />
      <Type Name="GrayscaleEffect" Kind="Class" />
      <Type Name="HueRotationEffect" Kind="Class" />
      <Type Name="ImageSourceBaseExtension" Kind="Class" />
      <Type Name="ImageSourceExtension" Kind="Class" />
      <Type Name="InvertEffect" Kind="Class" />
      <Type Name="IPipelineEffect" Kind="Interface" />
      <Type Name="LuminanceToAlphaEffect" Kind="Class" />
      <Type Name="OpacityEffect" Kind="Class" />
      <Type Name="SaturationEffect" Kind="Class" />
      <Type Name="SepiaEffect" Kind="Class" />
      <Type Name="ShadeEffect" Kind="Class" />
      <Type Name="SolidColorSourceExtension" Kind="Class" />
      <Type Name="TemperatureAndTintEffect" Kind="Class" />
      <Type Name="TileSourceExtension" Kind="Class" />
      <Type Name="TintEffect" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Media.Extensions">
      <Type Name="GuidExtensions" Kind="Class" />
      <Type Name="UriExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Media.Helpers">
      <Type Name="LoadTimeEffectHandler" Kind="Delegate" />
      <Type Name="SurfaceLoader" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Media.Pipelines">
      <Type Name="BrushProvider" Kind="Class" />
      <Type Name="EffectAnimation`1" DisplayName="EffectAnimation&lt;T&gt;" Kind="Delegate" />
      <Type Name="EffectSetter`1" DisplayName="EffectSetter&lt;T&gt;" Kind="Delegate" />
      <Type Name="PipelineBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Triggers">
      <Type Name="CompareStateTrigger" Kind="Class" />
      <Type Name="Comparison" Kind="Enumeration" />
      <Type Name="ConnectionState" Kind="Enumeration" />
      <Type Name="FullScreenModeStateTrigger" Kind="Class" />
      <Type Name="IsEqualStateTrigger" Kind="Class" />
      <Type Name="IsNotEqualStateTrigger" Kind="Class" />
      <Type Name="IsNullOrEmptyStateTrigger" Kind="Class" />
      <Type Name="NetworkConnectionStateTrigger" Kind="Class" />
      <Type Name="RegexStateTrigger" Kind="Class" />
      <Type Name="UserHandPreferenceStateTrigger" Kind="Class" />
      <Type Name="UserInteractionModeStateTrigger" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Win32.UI.Controls">
      <Type Name="IWebView" Kind="Interface" />
      <Type Name="WebBrowserUriTypeConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Win32.UI.Controls.Interop.WinRT">
      <Type Name="AltitudeReferenceSystem" Kind="Enumeration" />
      <Type Name="AnimationPropertyInfo" Kind="Class" />
      <Type Name="ApiInformationExtensions" Kind="Class" />
      <Type Name="BackgroundSizing" Kind="Enumeration" />
      <Type Name="BasicGeoposition" Kind="Structure" />
      <Type Name="BindingBase" Kind="Class" />
      <Type Name="BindingExpression" Kind="Class" />
      <Type Name="BringIntoViewOptions" Kind="Class" />
      <Type Name="Brush" Kind="Class" />
      <Type Name="BrushTransition" Kind="Class" />
      <Type Name="CacheMode" Kind="Class" />
      <Type Name="ClickMode" Kind="Enumeration" />
      <Type Name="ColumnDefinitionCollection" Kind="Class" />
      <Type Name="ControlTemplate" Kind="Class" />
      <Type Name="CoreAcceleratorKeyEventType" Kind="Enumeration" />
      <Type Name="CoreDispatcher" Kind="Class" />
      <Type Name="CoreIndependentInputSource" Kind="Class" />
      <Type Name="CoreInputDeviceTypes" Kind="Enumeration" />
      <Type Name="DataTemplate" Kind="Class" />
      <Type Name="DataTemplateSelector" Kind="Class" />
      <Type Name="DependencyPropertyChangedCallback" Kind="Class" />
      <Type Name="ElementCompositeMode" Kind="Enumeration" />
      <Type Name="ElementHighContrastAdjustment" Kind="Enumeration" />
      <Type Name="ElementSoundMode" Kind="Enumeration" />
      <Type Name="ElementTheme" Kind="Enumeration" />
      <Type Name="EventRegistrationToken" Kind="Class" />
      <Type Name="FlowDirection" Kind="Enumeration" />
      <Type Name="FlyoutBase" Kind="Class" />
      <Type Name="FocusState" Kind="Enumeration" />
      <Type Name="FontFamily" Kind="Class" />
      <Type Name="FontStretch" Kind="Enumeration" />
      <Type Name="FontStyle" Kind="Enumeration" />
      <Type Name="FontWeight" Kind="Class" />
      <Type Name="GeneralTransform" Kind="Class" />
      <Type Name="GeoboundingBox" Kind="Class" />
      <Type Name="Geopath" Kind="Class" />
      <Type Name="Geopoint" Kind="Class" />
      <Type Name="GeoshapeType" Kind="Enumeration" />
      <Type Name="HorizontalAlignment" Kind="Enumeration" />
      <Type Name="ImageSource" Kind="Class" />
      <Type Name="InkDrawingAttributes" Kind="Class" />
      <Type Name="InkHighContrastAdjustment" Kind="Enumeration" />
      <Type Name="InkInputConfiguration" Kind="Class" />
      <Type Name="InkInputProcessingConfiguration" Kind="Class" />
      <Type Name="InkPresenter" Kind="Class" />
      <Type Name="InkPresenterPredefinedConfiguration" Kind="Enumeration" />
      <Type Name="InkPresenterProtractor" Kind="Class" />
      <Type Name="InkPresenterRuler" Kind="Class" />
      <Type Name="InkStrokeContainer" Kind="Class" />
      <Type Name="InkStrokeInput" Kind="Class" />
      <Type Name="InkSynchronizer" Kind="Class" />
      <Type Name="InkToolbarButtonFlyoutPlacement" Kind="Enumeration" />
      <Type Name="InkToolbarCustomPen" Kind="Class" />
      <Type Name="InkToolbarInitialControls" Kind="Enumeration" />
      <Type Name="InkToolbarMenuKind" Kind="Enumeration" />
      <Type Name="InkToolbarStencilKind" Kind="Enumeration" />
      <Type Name="InkToolbarToggle" Kind="Enumeration" />
      <Type Name="InkToolbarTool" Kind="Enumeration" />
      <Type Name="InkUnprocessedInput" Kind="Class" />
      <Type Name="IUriToStreamResolver" Kind="Interface" />
      <Type Name="KeyboardAcceleratorPlacementMode" Kind="Enumeration" />
      <Type Name="KeyboardNavigationModex" Kind="Enumeration" />
      <Type Name="KeyTipPlacementMode" Kind="Enumeration" />
      <Type Name="ManipulationModes" Kind="Enumeration" />
      <Type Name="MapActualCameraChangedEventArgs" Kind="Class" />
      <Type Name="MapActualCameraChangingEventArgs" Kind="Class" />
      <Type Name="MapAnimationKind" Kind="Enumeration" />
      <Type Name="MapCamera" Kind="Class" />
      <Type Name="MapCameraChangeReason" Kind="Enumeration" />
      <Type Name="MapColorScheme" Kind="Enumeration" />
      <Type Name="MapContextRequestedEventArgs" Kind="Class" />
      <Type Name="MapCustomExperience" Kind="Class" />
      <Type Name="MapCustomExperienceChangedEventArgs" Kind="Class" />
      <Type Name="MapElement" Kind="Class" />
      <Type Name="MapElementClickEventArgs" Kind="Class" />
      <Type Name="MapElementPointerEnteredEventArgs" Kind="Class" />
      <Type Name="MapElementPointerExitedEventArgs" Kind="Class" />
      <Type Name="MapInputEventArgs" Kind="Class" />
      <Type Name="MapInteractionMode" Kind="Enumeration" />
      <Type Name="MapLoadingStatus" Kind="Enumeration" />
      <Type Name="MapPanInteractionMode" Kind="Enumeration" />
      <Type Name="MapProjection" Kind="Enumeration" />
      <Type Name="MapRightTappedEventArgs" Kind="Class" />
      <Type Name="MapScene" Kind="Class" />
      <Type Name="MapStyle" Kind="Enumeration" />
      <Type Name="MapStyleSheet" Kind="Class" />
      <Type Name="MapTargetCameraChangedEventArgs" Kind="Class" />
      <Type Name="MapVisibleRegionKind" Kind="Enumeration" />
      <Type Name="MapWatermarkMode" Kind="Enumeration" />
      <Type Name="Matrix4x4" Kind="Class" />
      <Type Name="MediaPlayer" Kind="Class" />
      <Type Name="MediaTransportControls" Kind="Class" />
      <Type Name="Orientation" Kind="Enumeration" />
      <Type Name="Point" Kind="Structure" />
      <Type Name="Pointer" Kind="Class" />
      <Type Name="PointerPoint" Kind="Class" />
      <Type Name="ProcessKeyboardAcceleratorEventArgs" Kind="Class" />
      <Type Name="Projection" Kind="Class" />
      <Type Name="RectangleGeometry" Kind="Class" />
      <Type Name="RequiresPointer" Kind="Enumeration" />
      <Type Name="ResourceDictionary" Kind="Class" />
      <Type Name="RoutedEvent" Kind="Class" />
      <Type Name="RowDefinitionCollection" Kind="Class" />
      <Type Name="ScalarTransition" Kind="Class" />
      <Type Name="Stretch" Kind="Enumeration" />
      <Type Name="Transform" Kind="Class" />
      <Type Name="Transform3D" Kind="Class" />
      <Type Name="TransitionCollection" Kind="Class" />
      <Type Name="TriggerCollection" Kind="Class" />
      <Type Name="UIElementCollection" Kind="Class" />
      <Type Name="Vector3Transition" Kind="Class" />
      <Type Name="VerticalAlignment" Kind="Enumeration" />
      <Type Name="VirtualKey" Kind="Enumeration" />
      <Type Name="Visibility" Kind="Enumeration" />
      <Type Name="WebErrorStatus" Kind="Enumeration" />
      <Type Name="WebViewControlAcceleratorKeyPressedEventArgs" Kind="Class" />
      <Type Name="WebViewControlAcceleratorKeyRoutingStage" Kind="Enumeration" />
      <Type Name="WebViewControlContentLoadingEventArgs" Kind="Class" />
      <Type Name="WebViewControlDeferredPermissionRequest" Kind="Class" />
      <Type Name="WebViewControlDOMContentLoadedEventArgs" Kind="Class" />
      <Type Name="WebViewControlLongRunningScriptDetectedEventArgs" Kind="Class" />
      <Type Name="WebViewControlMoveFocusReason" Kind="Enumeration" />
      <Type Name="WebViewControlMoveFocusRequestedEventArgs" Kind="Class" />
      <Type Name="WebViewControlNavigationCompletedEventArgs" Kind="Class" />
      <Type Name="WebViewControlNavigationStartingEventArgs" Kind="Class" />
      <Type Name="WebViewControlNewWindowRequestedEventArgs" Kind="Class" />
      <Type Name="WebViewControlPermissionRequest" Kind="Class" />
      <Type Name="WebViewControlPermissionRequestedEventArgs" Kind="Class" />
      <Type Name="WebViewControlPermissionState" Kind="Enumeration" />
      <Type Name="WebViewControlPermissionType" Kind="Enumeration" />
      <Type Name="WebViewControlProcess" Kind="Class" />
      <Type Name="WebViewControlProcessCapabilityState" Kind="Enumeration" />
      <Type Name="WebViewControlProcessOptions" Kind="Class" />
      <Type Name="WebViewControlScriptNotifyEventArgs" Kind="Class" />
      <Type Name="WebViewControlSettings" Kind="Class" />
      <Type Name="WebViewControlUnsupportedUriSchemeIdentifiedEventArgs" Kind="Class" />
      <Type Name="WebViewControlUnviewableContentIdentifiedEventArgs" Kind="Class" />
      <Type Name="XYFocusKeyboardNavigationMode" Kind="Enumeration" />
      <Type Name="XYFocusNavigationStrategy" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Win32.UI.XamlHost">
      <Type Name="DesktopWindowXamlSourceExtensions" Kind="Class" />
      <Type Name="IDesktopWindowXamlSourceNative" Kind="Interface" />
      <Type Name="IXamlMetadataContainer" Kind="Interface" />
      <Type Name="UWPTypeFactory" Kind="Class" />
      <Type Name="XamlApplication" Kind="Class" />
      <Type Name="XamlApplicationExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Wpf.UI.Controls">
      <Type Name="InkCanvas" Kind="Class" />
      <Type Name="InkToolbar" Kind="Class" />
      <Type Name="InkToolbarCustomPenButton" Kind="Class" />
      <Type Name="InkToolbarCustomToolButton" Kind="Class" />
      <Type Name="InkToolbarIsStencilButtonCheckedChangedEventArgs" Kind="Class" />
      <Type Name="InkToolbarMenuButton" Kind="Class" />
      <Type Name="InkToolbarPenButton" Kind="Class" />
      <Type Name="InkToolbarStencilButton" Kind="Class" />
      <Type Name="InkToolbarToggleButton" Kind="Class" />
      <Type Name="InkToolbarToolButton" Kind="Class" />
      <Type Name="IWebViewCompatibleAdapter" Kind="Interface" />
      <Type Name="MapControl" Kind="Class" />
      <Type Name="MediaPlayerElement" Kind="Class" />
      <Type Name="WebView" Kind="Class" />
      <Type Name="WebViewCompatible" Kind="Class" />
      <Type Name="WebViewHost" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Wpf.UI.XamlHost">
      <Type Name="UwpUIElementExtensions" Kind="Class" />
      <Type Name="WindowsXamlHost" Kind="Class" />
      <Type Name="WindowsXamlHostBase" Kind="Class" />
      <Type Name="WindowsXamlHostWrapperConverter" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="AddGroup&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt; AddGroup&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, TValue value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Collections.ObservableGroup`2&lt;!!TKey, !!TValue&gt; AddGroup&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, !!TValue value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddGroup(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, value As TValue) As ObservableGroup(Of TKey, TValue)" />
        <MemberSignature Language="F#" Value="static member AddGroup : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * 'Value -&gt; Microsoft.Toolkit.Collections.ObservableGroup&lt;'Key, 'Value&gt;" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup (source, key, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="value" Type="TValue" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group where <paramref name="value" /> will be added.</param>
          <param name="value">The value to add.</param>
          <summary>
            Adds a key-value <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> item into a target <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="AddGroup&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt; AddGroup&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, params TValue[] collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Collections.ObservableGroup`2&lt;!!TKey, !!TValue&gt; AddGroup&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, !!TValue[] collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddGroup(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, ParamArray collection As TValue()) As ObservableGroup(Of TKey, TValue)" />
        <MemberSignature Language="F#" Value="static member AddGroup : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * 'Value[] -&gt; Microsoft.Toolkit.Collections.ObservableGroup&lt;'Key, 'Value&gt;" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup (source, key, collection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="collection" Type="TValue[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group where <paramref name="collection" /> will be added.</param>
          <param name="collection">The collection to add.</param>
          <summary>
            Adds a key-collection <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> item into a target <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="AddGroup&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt; AddGroup&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, System.Collections.Generic.IEnumerable&lt;TValue&gt; collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Collections.ObservableGroup`2&lt;!!TKey, !!TValue&gt; AddGroup&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, class System.Collections.Generic.IEnumerable`1&lt;!!TValue&gt; collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Collections.Generic.IEnumerable{``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddGroup(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, collection As IEnumerable(Of TValue)) As ObservableGroup(Of TKey, TValue)" />
        <MemberSignature Language="F#" Value="static member AddGroup : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * seq&lt;'Value&gt; -&gt; Microsoft.Toolkit.Collections.ObservableGroup&lt;'Key, 'Value&gt;" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup (source, key, collection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;TValue&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group where <paramref name="collection" /> will be added.</param>
          <param name="collection">The collection to add.</param>
          <summary>
            Adds a key-collection <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> item into a target <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Collections.Generic.IEnumerable{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="AddItem&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt; AddItem&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, TValue item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Collections.ObservableGroup`2&lt;!!TKey, !!TValue&gt; AddItem&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, !!TValue item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddItem(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, item As TValue) As ObservableGroup(Of TKey, TValue)" />
        <MemberSignature Language="F#" Value="static member AddItem : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * 'Value -&gt; Microsoft.Toolkit.Collections.ObservableGroup&lt;'Key, 'Value&gt;" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddItem (source, key, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="item" Type="TValue" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group where the <paramref name="item" /> should be added.</param>
          <param name="item">The item to add.</param>
          <summary>
            Add <paramref name="item" /> into the first group with <paramref name="key" /> key.
            If the group does not exist, it will be added.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="ElementAt&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static TValue ElementAt&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, int index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue ElementAt&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, int32 index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ElementAt``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, index As Integer) As TValue" />
        <MemberSignature Language="F#" Value="static member ElementAt : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * int -&gt; 'Value" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ElementAt (source, key, index)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TValue</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group to query.</param>
          <param name="index">The index of the item from the targeted group.</param>
          <summary>
            Return the element at position <paramref name="index" /> from the first group with <paramref name="key" /> key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ElementAt``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="ElementAtOrDefault&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static TValue ElementAtOrDefault&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, int index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue ElementAtOrDefault&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, int32 index) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ElementAtOrDefault``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, index As Integer) As TValue" />
        <MemberSignature Language="F#" Value="static member ElementAtOrDefault : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * int -&gt; 'Value" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ElementAtOrDefault (source, key, index)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TValue</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group to query.</param>
          <param name="index">The index of the item from the targeted group.</param>
          <summary>
            Return the element at position <paramref name="index" /> from the first group with <paramref name="key" /> key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ElementAtOrDefault``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="First&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt; First&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Collections.ObservableGroup`2&lt;!!TKey, !!TValue&gt; First&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.First``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey) As ObservableGroup(Of TKey, TValue)" />
        <MemberSignature Language="F#" Value="static member First : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key -&gt; Microsoft.Toolkit.Collections.ObservableGroup&lt;'Key, 'Value&gt;" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.First (source, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group to query.</param>
          <summary>
            Return the first group with <paramref name="key" /> key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.First``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt; FirstOrDefault&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Collections.ObservableGroup`2&lt;!!TKey, !!TValue&gt; FirstOrDefault&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.FirstOrDefault``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey) As ObservableGroup(Of TKey, TValue)" />
        <MemberSignature Language="F#" Value="static member FirstOrDefault : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key -&gt; Microsoft.Toolkit.Collections.ObservableGroup&lt;'Key, 'Value&gt;" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.FirstOrDefault (source, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group to query.</param>
          <summary>
            Return the first group with <paramref name="key" /> key or null if not found.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.FirstOrDefault``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="InsertItem&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt; InsertItem&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, int index, TValue item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Collections.ObservableGroup`2&lt;!!TKey, !!TValue&gt; InsertItem&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, int32 index, !!TValue item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.InsertItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertItem(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, index As Integer, item As TValue) As ObservableGroup(Of TKey, TValue)" />
        <MemberSignature Language="F#" Value="static member InsertItem : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * int * 'Value -&gt; Microsoft.Toolkit.Collections.ObservableGroup&lt;'Key, 'Value&gt;" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.InsertItem (source, key, index, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="index" Type="System.Int32" />
          <Parameter Name="item" Type="TValue" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group where to insert <paramref name="item" />.</param>
          <param name="index">The index where to insert <paramref name="item" />.</param>
          <param name="item">The item to add.</param>
          <summary>
            Insert <paramref name="item" /> into the first group with <paramref name="key" /> key at <paramref name="index" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.InsertItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="RemoveGroup&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveGroup&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveGroup&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveGroup(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey)" />
        <MemberSignature Language="F#" Value="static member RemoveGroup : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key -&gt; unit" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveGroup (source, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group to remove.</param>
          <summary>
            Remove the first occurrence of the group with <paramref name="key" /> from the <paramref name="source" /> grouped collection.
            It will not do anything if the group does not exist.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="RemoveItem&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveItem&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, TValue item, bool removeGroupIfEmpty = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveItem&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, !!TValue item, bool removeGroupIfEmpty) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveItem(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, item As TValue, Optional removeGroupIfEmpty As Boolean = true)" />
        <MemberSignature Language="F#" Value="static member RemoveItem : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * 'Value * bool -&gt; unit" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItem (source, key, item, removeGroupIfEmpty)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="item" Type="TValue" />
          <Parameter Name="removeGroupIfEmpty" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group where the <paramref name="item" /> should be removed.</param>
          <param name="item">The item to remove.</param>
          <param name="removeGroupIfEmpty">If true (default value), the group will be removed once it becomes empty.</param>
          <summary>
            Remove the first <paramref name="item" /> from the first group with <paramref name="key" /> from the <paramref name="source" /> grouped collection.
            It will not do anything if the group or the item does not exist.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="RemoveItemAt&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveItemAt&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, int index, bool removeGroupIfEmpty = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveItemAt&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, int32 index, bool removeGroupIfEmpty) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItemAt``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveItemAt(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, index As Integer, Optional removeGroupIfEmpty As Boolean = true)" />
        <MemberSignature Language="F#" Value="static member RemoveItemAt : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * int * bool -&gt; unit" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItemAt (source, key, index, removeGroupIfEmpty)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="index" Type="System.Int32" />
          <Parameter Name="removeGroupIfEmpty" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group where the item at <paramref name="index" /> should be removed.</param>
          <param name="index">The index of the item to remove in the group.</param>
          <param name="removeGroupIfEmpty">If true (default value), the group will be removed once it becomes empty.</param>
          <summary>
            Remove the item at <paramref name="index" /> from the first group with <paramref name="key" /> from the <paramref name="source" /> grouped collection.
            It will not do anything if the group or the item does not exist.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItemAt``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />
      </Targets>
      <Member MemberName="SetItem&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt; SetItem&lt;TKey,TValue&gt; (this Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt; source, TKey key, int index, TValue item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Collections.ObservableGroup`2&lt;!!TKey, !!TValue&gt; SetItem&lt;TKey, TValue&gt;(class Microsoft.Toolkit.Collections.ObservableGroupedCollection`2&lt;!!TKey, !!TValue&gt; source, !!TKey key, int32 index, !!TValue item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.SetItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetItem(Of TKey, TValue) (source As ObservableGroupedCollection(Of TKey, TValue), key As TKey, index As Integer, item As TValue) As ObservableGroup(Of TKey, TValue)" />
        <MemberSignature Language="F#" Value="static member SetItem : Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;'Key, 'Value&gt; * 'Key * int * 'Value -&gt; Microsoft.Toolkit.Collections.ObservableGroup&lt;'Key, 'Value&gt;" Usage="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.SetItem (source, key, index, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Collections.ObservableGroup&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Toolkit.Collections.ObservableGroupedCollection&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="key" Type="TKey" />
          <Parameter Name="index" Type="System.Int32" />
          <Parameter Name="item" Type="TValue" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the group key.</typeparam>
          <typeparam name="TValue">The type of the items in the collection.</typeparam>
          <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
          <param name="key">The key of the group where to replace the item.</param>
          <param name="index">The index where to insert <paramref name="item" />.</param>
          <param name="item">The item to add.</param>
          <summary>
            Replace the element at <paramref name="index" /> with <paramref name="item" /> in the first group with <paramref name="key" /> key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions" Member="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.SetItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="Fill&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Fill&lt;T&gt; (this T[,] array, T value, int row, int col, int width, int height);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fill&lt;T&gt;(!!T[,] array, !!T value, int32 row, int32 col, int32 width, int32 height) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.ArrayExtensions.Fill``1(``0[0:,0:],``0,System.Int32,System.Int32,System.Int32,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Fill(Of T) (array As T(,), value As T, row As Integer, col As Integer, width As Integer, height As Integer)" />
        <MemberSignature Language="F#" Value="static member Fill : 'T[,] * 'T * int * int * int * int -&gt; unit" Usage="Microsoft.Toolkit.Extensions.ArrayExtensions.Fill (array, value, row, col, width, height)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[,]" RefType="this" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="row" Type="System.Int32" />
          <Parameter Name="col" Type="System.Int32" />
          <Parameter Name="width" Type="System.Int32" />
          <Parameter Name="height" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type of the array.</typeparam>
          <param name="array">The source array.</param>
          <param name="value">Value to fill with.</param>
          <param name="row">Row to start on (inclusive, zero-index).</param>
          <param name="col">Column to start on (inclusive, zero-index).</param>
          <param name="width">Positive width of area to fill.</param>
          <param name="height">Positive height of area to fill.</param>
          <summary>
            Fills elements of a rectangular array at the given position and size to a specific value.
            Ranges given will fill in as many elements as possible, ignoring positions outside the bounds of the array.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.Extensions.ArrayExtensions.Fill``1(``0[0:,0:],``0,System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="GetColumn&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetColumn&lt;T&gt; (this T[][] rectarray, int column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetColumn&lt;T&gt;(!!T[][] rectarray, int32 column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetColumn``1(``0[][],System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetColumn(Of T) (rectarray As T()(), column As Integer) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member GetColumn : 'T[][] * int -&gt; seq&lt;'T&gt;" Usage="Microsoft.Toolkit.Extensions.ArrayExtensions.GetColumn (rectarray, column)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="rectarray" Type="T[][]" RefType="this" />
          <Parameter Name="column" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type of the array.</typeparam>
          <param name="rectarray">The source array.</param>
          <param name="column">Column record to retrieve, 0-based index.</param>
          <summary>
            Yields a column from a jagged array.
            An exception will be thrown if the column is out of bounds, and return default in places where there are no elements from inner arrays.
            Note: There is no equivalent GetRow method, as you can use array[row] to retrieve.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetColumn``1(``0[][],System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="GetColumn&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetColumn&lt;T&gt; (this T[,] rectarray, int column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetColumn&lt;T&gt;(!!T[,] rectarray, int32 column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetColumn``1(``0[0:,0:],System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetColumn(Of T) (rectarray As T(,), column As Integer) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member GetColumn : 'T[,] * int -&gt; seq&lt;'T&gt;" Usage="Microsoft.Toolkit.Extensions.ArrayExtensions.GetColumn (rectarray, column)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="rectarray" Type="T[,]" RefType="this" />
          <Parameter Name="column" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type of the array.</typeparam>
          <param name="rectarray">The source array.</param>
          <param name="column">Column record to retrieve, 0-based index.</param>
          <summary>
            Yields a column from a rectangular array.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetColumn``1(``0[0:,0:],System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="GetRow&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetRow&lt;T&gt; (this T[,] rectarray, int row);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetRow&lt;T&gt;(!!T[,] rectarray, int32 row) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetRow``1(``0[0:,0:],System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetRow(Of T) (rectarray As T(,), row As Integer) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member GetRow : 'T[,] * int -&gt; seq&lt;'T&gt;" Usage="Microsoft.Toolkit.Extensions.ArrayExtensions.GetRow (rectarray, row)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="rectarray" Type="T[,]" RefType="this" />
          <Parameter Name="row" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type of the array.</typeparam>
          <param name="rectarray">The source array.</param>
          <param name="row">Row record to retrieve, 0-based index.</param>
          <summary>
            Yields a row from a rectangular array.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetRow``1(``0[0:,0:],System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="ToArrayString&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static string ToArrayString&lt;T&gt; (this T[] array);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToArrayString&lt;T&gt;(!!T[] array) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArrayString(Of T) (array As T()) As String" />
        <MemberSignature Language="F#" Value="static member ToArrayString : 'T[] -&gt; string" Usage="Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString array" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type of the array.</typeparam>
          <param name="array">The source array.</param>
          <summary>
            Returns a simple string representation of an array.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="ToArrayString&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static string ToArrayString&lt;T&gt; (this T[][] mdarray);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToArrayString&lt;T&gt;(!!T[][] mdarray) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[][])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArrayString(Of T) (mdarray As T()()) As String" />
        <MemberSignature Language="F#" Value="static member ToArrayString : 'T[][] -&gt; string" Usage="Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString mdarray" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="mdarray" Type="T[][]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type of the array.</typeparam>
          <param name="mdarray">The source array.</param>
          <summary>
            Returns a simple string representation of a jagged array.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[][])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="ToArrayString&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static string ToArrayString&lt;T&gt; (this T[,] rectarray);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToArrayString&lt;T&gt;(!!T[,] rectarray) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[0:,0:])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArrayString(Of T) (rectarray As T(,)) As String" />
        <MemberSignature Language="F#" Value="static member ToArrayString : 'T[,] -&gt; string" Usage="Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString rectarray" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="rectarray" Type="T[,]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The element type of the array.</typeparam>
          <param name="rectarray">The source array.</param>
          <summary>
            Returns a simple string representation of a rectangular array.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[0:,0:])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="AsFormat">
        <MemberSignature Language="C#" Value="public static string AsFormat (this string format, params object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string AsFormat(string format, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.AsFormat(System.String,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsFormat (format As String, ParamArray args As Object()) As String" />
        <MemberSignature Language="F#" Value="static member AsFormat : string * obj[] -&gt; string" Usage="Microsoft.Toolkit.Extensions.StringExtensions.AsFormat (format, args)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="format" Type="System.String" RefType="this" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="format">The format of the string being linked.</param>
          <param name="args">The object which will receive the linked String.</param>
          <summary>
            Provide better linking for resourced strings.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.AsFormat(System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="DecodeHtml">
        <MemberSignature Language="C#" Value="public static string DecodeHtml (this string htmlText);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DecodeHtml(string htmlText) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.DecodeHtml(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DecodeHtml (htmlText As String) As String" />
        <MemberSignature Language="F#" Value="static member DecodeHtml : string -&gt; string" Usage="Microsoft.Toolkit.Extensions.StringExtensions.DecodeHtml htmlText" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlText" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlText">HTML string.</param>
          <summary>
            Returns a string with HTML comments, scripts, styles, and tags removed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.DecodeHtml(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="FixHtml">
        <MemberSignature Language="C#" Value="public static string FixHtml (this string html);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FixHtml(string html) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.FixHtml(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FixHtml (html As String) As String" />
        <MemberSignature Language="F#" Value="static member FixHtml : string -&gt; string" Usage="Microsoft.Toolkit.Extensions.StringExtensions.FixHtml html" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="html" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="html">HTML string to fix.</param>
          <summary>
            Returns a string with HTML comments, scripts, and styles removed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.FixHtml(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsCharacterString">
        <MemberSignature Language="C#" Value="public static bool IsCharacterString (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCharacterString(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.IsCharacterString(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsCharacterString (str As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsCharacterString : string -&gt; bool" Usage="Microsoft.Toolkit.Extensions.StringExtensions.IsCharacterString str" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">The string to test.</param>
          <summary>
            Determines whether a string contains only letters.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.IsCharacterString(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsDecimal">
        <MemberSignature Language="C#" Value="public static bool IsDecimal (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDecimal(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.IsDecimal(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsDecimal (str As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsDecimal : string -&gt; bool" Usage="Microsoft.Toolkit.Extensions.StringExtensions.IsDecimal str" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">The string to test.</param>
          <summary>
            Determines whether a string is a valid decimal number.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.IsDecimal(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsEmail">
        <MemberSignature Language="C#" Value="public static bool IsEmail (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEmail(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.IsEmail(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsEmail (str As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsEmail : string -&gt; bool" Usage="Microsoft.Toolkit.Extensions.StringExtensions.IsEmail str" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">The string to test.</param>
          <summary>
            Determines whether a string is a valid email address.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.IsEmail(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsNumeric">
        <MemberSignature Language="C#" Value="public static bool IsNumeric (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumeric(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.IsNumeric(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNumeric (str As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsNumeric : string -&gt; bool" Usage="Microsoft.Toolkit.Extensions.StringExtensions.IsNumeric str" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">The string to test.</param>
          <summary>
            Determines whether a string is a valid integer.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.IsNumeric(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsPhoneNumber">
        <MemberSignature Language="C#" Value="public static bool IsPhoneNumber (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPhoneNumber(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.IsPhoneNumber(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsPhoneNumber (str As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsPhoneNumber : string -&gt; bool" Usage="Microsoft.Toolkit.Extensions.StringExtensions.IsPhoneNumber str" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">The string to test.</param>
          <summary>
            Determines whether a string is a valid phone number.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.IsPhoneNumber(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Object" />
      </Targets>
      <Member MemberName="ToSafeString">
        <MemberSignature Language="C#" Value="public static string ToSafeString (this object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToSafeString(object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.ToSafeString(System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSafeString (value As Object) As String" />
        <MemberSignature Language="F#" Value="static member ToSafeString : obj -&gt; string" Usage="Microsoft.Toolkit.Extensions.StringExtensions.ToSafeString value" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Object" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">The object to convert.</param>
          <summary>
            Returns a string representation of an object.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.ToSafeString(System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Truncate">
        <MemberSignature Language="C#" Value="public static string Truncate (this string value, int length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Truncate(string value, int32 length) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.Truncate(System.String,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Truncate (value As String, length As Integer) As String" />
        <MemberSignature Language="F#" Value="static member Truncate : string * int -&gt; string" Usage="Microsoft.Toolkit.Extensions.StringExtensions.Truncate (value, length)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.String" RefType="this" />
          <Parameter Name="length" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="value">The string to be truncated.</param>
          <param name="length">The maximum length.</param>
          <summary>
            Truncates a string to the specified length.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.Truncate(System.String,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Truncate">
        <MemberSignature Language="C#" Value="public static string Truncate (this string value, int length, bool ellipsis);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Truncate(string value, int32 length, bool ellipsis) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Truncate (value As String, length As Integer, ellipsis As Boolean) As String" />
        <MemberSignature Language="F#" Value="static member Truncate : string * int * bool -&gt; string" Usage="Microsoft.Toolkit.Extensions.StringExtensions.Truncate (value, length, ellipsis)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.String" RefType="this" />
          <Parameter Name="length" Type="System.Int32" />
          <Parameter Name="ellipsis" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="value">The string to be truncated.</param>
          <param name="length">The maximum length.</param>
          <param name="ellipsis">
            <c>true</c> to add ellipsis to the truncated text; otherwise, <c>false</c>.</param>
          <summary>
            Truncates a string to the specified length.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="ToTypeString">
        <MemberSignature Language="C#" Value="public static string ToTypeString (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToTypeString(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.TypeExtensions.ToTypeString(System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTypeString (type As Type) As String" />
        <MemberSignature Language="F#" Value="static member ToTypeString : Type -&gt; string" Usage="Microsoft.Toolkit.Extensions.TypeExtensions.ToTypeString type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">The input type.</param>
          <summary>
            Returns a simple string representation of a type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.TypeExtensions" Member="M:Microsoft.Toolkit.Extensions.TypeExtensions.ToTypeString(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueType" />
      </Targets>
      <Member MemberName="ToHexString&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static string ToHexString&lt;T&gt; (this T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToHexString&lt;struct .ctor (class System.ValueType) T&gt;(!!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Extensions.ValueTypeExtensions.ToHexString``1(``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHexString(Of T As Structure) (value As T) As String" />
        <MemberSignature Language="F#" Value="static member ToHexString : 'T -&gt; string (requires 'T : struct)" Usage="Microsoft.Toolkit.Extensions.ValueTypeExtensions.ToHexString value" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="T" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The input type to format to <see cref="T:System.String" />.</typeparam>
          <param name="value">The input value to format to <see cref="T:System.String" />.</param>
          <summary>
            Returns a hexadecimal <see cref="T:System.String" /> representation of a given <typeparamref name="T" /> value, left-padded and ordered as big-endian.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Extensions.ValueTypeExtensions" Member="M:Microsoft.Toolkit.Extensions.ValueTypeExtensions.ToHexString``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="ClearWrapper">
        <MemberSignature Language="C#" Value="public static void ClearWrapper (this Windows.UI.Xaml.UIElement control);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearWrapper(class Windows.UI.Xaml.UIElement control) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.ClearWrapper(Windows.UI.Xaml.UIElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ClearWrapper (control As UIElement)" />
        <MemberSignature Language="F#" Value="static member ClearWrapper : Windows.UI.Xaml.UIElement -&gt; unit" Usage="Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.ClearWrapper control" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="control" Type="Windows.UI.Xaml.UIElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="control">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup" Member="M:Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.ClearWrapper(Windows.UI.Xaml.UIElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="GetWrapper">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase GetWrapper (this Windows.UI.Xaml.UIElement control);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase GetWrapper(class Windows.UI.Xaml.UIElement control) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.GetWrapper(Windows.UI.Xaml.UIElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetWrapper (control As UIElement) As WindowsXamlHostBase" />
        <MemberSignature Language="F#" Value="static member GetWrapper : Windows.UI.Xaml.UIElement -&gt; Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase" Usage="Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.GetWrapper control" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="control" Type="Windows.UI.Xaml.UIElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="control">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup" Member="M:Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.GetWrapper(Windows.UI.Xaml.UIElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="SetWrapper">
        <MemberSignature Language="C#" Value="public static void SetWrapper (this Windows.UI.Xaml.UIElement control, Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase wrapper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWrapper(class Windows.UI.Xaml.UIElement control, class Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase wrapper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.SetWrapper(Windows.UI.Xaml.UIElement,Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetWrapper (control As UIElement, wrapper As WindowsXamlHostBase)" />
        <MemberSignature Language="F#" Value="static member SetWrapper : Windows.UI.Xaml.UIElement * Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase -&gt; unit" Usage="Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.SetWrapper (control, wrapper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="control" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="wrapper" Type="Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase" />
        </Parameters>
        <Docs>
          <param name="control">To be added.</param>
          <param name="wrapper">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup" Member="M:Microsoft.Toolkit.Forms.UI.XamlHost.WrapperLookup.SetWrapper(Windows.UI.Xaml.UIElement,Microsoft.Toolkit.Forms.UI.XamlHost.WindowsXamlHostBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Graph.GraphServiceClient" />
      </Targets>
      <Member MemberName="FindPersonAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Graph.IUserPeopleCollectionPage&gt; FindPersonAsync (this Microsoft.Graph.GraphServiceClient graph, string query);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Graph.IUserPeopleCollectionPage&gt; FindPersonAsync(class Microsoft.Graph.GraphServiceClient graph, string query) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.FindPersonAsync(Microsoft.Graph.GraphServiceClient,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindPersonAsync (graph As GraphServiceClient, query As String) As Task(Of IUserPeopleCollectionPage)" />
        <MemberSignature Language="F#" Value="static member FindPersonAsync : Microsoft.Graph.GraphServiceClient * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Graph.IUserPeopleCollectionPage&gt;" Usage="Microsoft.Toolkit.Graph.Extensions.GraphExtensions.FindPersonAsync (graph, query)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Graph.IUserPeopleCollectionPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="graph" Type="Microsoft.Graph.GraphServiceClient" RefType="this" />
          <Parameter Name="query" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="graph">Instance of the <see cref="T:Microsoft.Graph.GraphServiceClient" />.</param>
          <param name="query">User to search for.</param>
          <summary>
            Shortcut to perform a person query.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Graph.Extensions.GraphExtensions" Member="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.FindPersonAsync(Microsoft.Graph.GraphServiceClient,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Graph.GraphServiceClient" />
      </Targets>
      <Member MemberName="FindUserAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Graph.IGraphServiceUsersCollectionPage&gt; FindUserAsync (this Microsoft.Graph.GraphServiceClient graph, string query);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Graph.IGraphServiceUsersCollectionPage&gt; FindUserAsync(class Microsoft.Graph.GraphServiceClient graph, string query) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.FindUserAsync(Microsoft.Graph.GraphServiceClient,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindUserAsync (graph As GraphServiceClient, query As String) As Task(Of IGraphServiceUsersCollectionPage)" />
        <MemberSignature Language="F#" Value="static member FindUserAsync : Microsoft.Graph.GraphServiceClient * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Graph.IGraphServiceUsersCollectionPage&gt;" Usage="Microsoft.Toolkit.Graph.Extensions.GraphExtensions.FindUserAsync (graph, query)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Graph.IGraphServiceUsersCollectionPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="graph" Type="Microsoft.Graph.GraphServiceClient" RefType="this" />
          <Parameter Name="query" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="graph">Instance of the <see cref="T:Microsoft.Graph.GraphServiceClient" />.</param>
          <param name="query">User to search for.</param>
          <summary>
            Shortcut to perform a user query.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Graph.Extensions.GraphExtensions" Member="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.FindUserAsync(Microsoft.Graph.GraphServiceClient,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Graph.GraphServiceClient" />
      </Targets>
      <Member MemberName="GetUserPhoto">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetUserPhoto (this Microsoft.Graph.GraphServiceClient graph, string userid);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetUserPhoto(class Microsoft.Graph.GraphServiceClient graph, string userid) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.GetUserPhoto(Microsoft.Graph.GraphServiceClient,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUserPhoto (graph As GraphServiceClient, userid As String) As Task(Of Stream)" />
        <MemberSignature Language="F#" Value="static member GetUserPhoto : Microsoft.Graph.GraphServiceClient * string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="Microsoft.Toolkit.Graph.Extensions.GraphExtensions.GetUserPhoto (graph, userid)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="graph" Type="Microsoft.Graph.GraphServiceClient" RefType="this" />
          <Parameter Name="userid" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="graph">Instance of the <see cref="T:Microsoft.Graph.GraphServiceClient" />.</param>
          <param name="userid">UserID.</param>
          <summary>
            Helper to get the photo of a particular user.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Graph.Extensions.GraphExtensions" Member="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.GetUserPhoto(Microsoft.Graph.GraphServiceClient,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Graph.IBaseRequest" />
      </Targets>
      <Member MemberName="Search&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Search&lt;T&gt; (this T request, string query) where T : Microsoft.Graph.IBaseRequest;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Search&lt;(class Microsoft.Graph.IBaseRequest) T&gt;(!!T request, string query) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.Search``1(``0,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Search(Of T As IBaseRequest) (request As T, query As String) As T" />
        <MemberSignature Language="F#" Value="static member Search : 'T * string -&gt; 'T (requires 'T :&gt; Microsoft.Graph.IBaseRequest)" Usage="Microsoft.Toolkit.Graph.Extensions.GraphExtensions.Search (request, query)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Graph.IBaseRequest</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="T" RefType="this" />
          <Parameter Name="query" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            <see cref="T:Microsoft.Graph.IBaseRequest" /> type.</typeparam>
          <param name="request">Request chain.</param>
          <param name="query">Query to add for searching in QueryOptions.</param>
          <summary>
            Extension to provider Searching on OData Requests.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Graph.Extensions.GraphExtensions" Member="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.Search``1(``0,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Graph.User" />
      </Targets>
      <Member MemberName="ToPerson">
        <MemberSignature Language="C#" Value="public static Microsoft.Graph.Person ToPerson (this Microsoft.Graph.User user);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Graph.Person ToPerson(class Microsoft.Graph.User user) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.ToPerson(Microsoft.Graph.User)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToPerson (user As User) As Person" />
        <MemberSignature Language="F#" Value="static member ToPerson : Microsoft.Graph.User -&gt; Microsoft.Graph.Person" Usage="Microsoft.Toolkit.Graph.Extensions.GraphExtensions.ToPerson user" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Graph.Person</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="user" Type="Microsoft.Graph.User" RefType="this" />
        </Parameters>
        <Docs>
          <param name="user">
            <see cref="T:Microsoft.Graph.User" /> instance to convert.</param>
          <summary>
            Simple method to convert a <see cref="T:Microsoft.Graph.User" /> to a <see cref="T:Microsoft.Graph.Person" /> with basic common properties like <see cref="P:Microsoft.Graph.Entity.Id" />, <see cref="P:Microsoft.Graph.User.DisplayName" />, <see cref="P:Microsoft.Graph.Person.EmailAddresses" />, <see cref="P:Microsoft.Graph.User.GivenName" />, and <see cref="P:Microsoft.Graph.User.Surname" /> intact.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Graph.Extensions.GraphExtensions" Member="M:Microsoft.Toolkit.Graph.Extensions.GraphExtensions.ToPerson(Microsoft.Graph.User)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.HighPerformance.Box`1" />
      </Targets>
      <Member MemberName="GetReference&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (this Microsoft.Toolkit.HighPerformance.Box&lt;T&gt; box) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;struct .ctor (class System.ValueType) T&gt;(class Microsoft.Toolkit.HighPerformance.Box`1&lt;!!T&gt; box) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.BoxExtensions.GetReference``1(Microsoft.Toolkit.HighPerformance.Box{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference(Of T As Structure) (box As Box(Of T)) As T" />
        <MemberSignature Language="F#" Value="static member GetReference : Microsoft.Toolkit.HighPerformance.Box&lt;'T (requires 'T : struct)&gt; -&gt; 'T (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.BoxExtensions.GetReference box" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="box" Type="Microsoft.Toolkit.HighPerformance.Box&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of reference to retrieve.</typeparam>
          <param name="box">The input <see cref="T:Microsoft.Toolkit.HighPerformance.Box`1" /> instance.</param>
          <summary>
            Gets a <typeparamref name="T" /> reference from a <see cref="T:Microsoft.Toolkit.HighPerformance.Box`1" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.BoxExtensions" Member="M:Microsoft.Toolkit.HighPerformance.BoxExtensions.GetReference``1(Microsoft.Toolkit.HighPerformance.Box{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="Count&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;T&gt; (this T[] array, T value) where T : IEquatable&lt;T&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(!!T[] array, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Count``1(``0[],``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of T As IEquatable(Of T)) (array As T(), value As T) As Integer" />
        <MemberSignature Language="F#" Value="static member Count : 'T[] * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Count (array, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the input <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input <typeparamref name="T" /> array instance.</param>
          <param name="value">The <typeparamref name="T" /> value to look for.</param>
          <summary>
            Counts the number of occurrences of a given value into a target <typeparamref name="T" /> array instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Count``1(``0[],``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="Count&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;T&gt; (this T[,] array, T value) where T : IEquatable&lt;T&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(!!T[,] array, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Count``1(``0[0:,0:],``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of T As IEquatable(Of T)) (array As T(,), value As T) As Integer" />
        <MemberSignature Language="F#" Value="static member Count : 'T[,] * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Count (array, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[,]" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the input 2D <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input 2D <typeparamref name="T" /> array instance.</param>
          <param name="value">The <typeparamref name="T" /> value to look for.</param>
          <summary>
            Counts the number of occurrences of a given value into a target 2D <typeparamref name="T" /> array instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Count``1(``0[0:,0:],``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="DangerousGetReference&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetReference&lt;T&gt; (this T[] array);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetReference&lt;T&gt;(!!T[] array) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReference``1(``0[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReference(Of T) (array As T()) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetReference : 'T[] -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReference array" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input <typeparamref name="T" /> array instance.</param>
          <summary>
            Returns a reference to the first element within a given <typeparamref name="T" /> array, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReference``1(``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="DangerousGetReference&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetReference&lt;T&gt; (this T[,] array);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetReference&lt;T&gt;(!!T[,] array) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReference``1(``0[0:,0:])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReference(Of T) (array As T(,)) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetReference : 'T[,] -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReference array" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[,]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input 2D <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input <typeparamref name="T" /> array instance.</param>
          <summary>
            Returns a reference to the first element within a given 2D <typeparamref name="T" /> array, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReference``1(``0[0:,0:])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="DangerousGetReferenceAt&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetReferenceAt&lt;T&gt; (this T[] array, int i);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetReferenceAt&lt;T&gt;(!!T[] array, int32 i) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReferenceAt``1(``0[],System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReferenceAt(Of T) (array As T(), i As Integer) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetReferenceAt : 'T[] * int -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReferenceAt (array, i)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
          <Parameter Name="i" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input <typeparamref name="T" /> array instance.</param>
          <param name="i">The index of the element to retrieve within <paramref name="array" />.</param>
          <summary>
            Returns a reference to an element at a specified index within a given <typeparamref name="T" /> array, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReferenceAt``1(``0[],System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="DangerousGetReferenceAt&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetReferenceAt&lt;T&gt; (this T[,] array, int i, int j);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetReferenceAt&lt;T&gt;(!!T[,] array, int32 i, int32 j) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReferenceAt``1(``0[0:,0:],System.Int32,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReferenceAt(Of T) (array As T(,), i As Integer, j As Integer) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetReferenceAt : 'T[,] * int * int -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReferenceAt (array, i, j)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[,]" RefType="this" />
          <Parameter Name="i" Type="System.Int32" />
          <Parameter Name="j" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input 2D <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input 2D <typeparamref name="T" /> array instance.</param>
          <param name="i">The vertical index of the element to retrieve within <paramref name="array" />.</param>
          <param name="j">The horizontal index of the element to retrieve within <paramref name="array" />.</param>
          <summary>
            Returns a reference to an element at a specified coordinate within a given 2D <typeparamref name="T" /> array, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.DangerousGetReferenceAt``1(``0[0:,0:],System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="Enumerate&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.SpanEnumerable&lt;T&gt; Enumerate&lt;T&gt; (this T[] array);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.SpanEnumerable`1&lt;!!T&gt; Enumerate&lt;T&gt;(!!T[] array) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Enumerate``1(``0[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Enumerate(Of T) (array As T()) As SpanEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member Enumerate : 'T[] -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.SpanEnumerable&lt;'T&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Enumerate array" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.SpanEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items to enumerate.</typeparam>
          <param name="array">The source <typeparamref name="T" /> array to enumerate.</param>
          <summary>
             Enumerates the items in the input <typeparamref name="T" /> array instance, as pairs of reference/index values.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             int[] numbers = new[] { 1, 2, 3, 4, 5, 6, 7 };
            
             foreach (var item in numbers.Enumerate())
             {
                 // Access the index and value of each item here...
                 int index = item.Index;
                 ref int value = ref item.Value;
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Enumerate``1(``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="Fill&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Fill&lt;T&gt; (this T[,] array, T value, int row, int column, int width, int height);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fill&lt;T&gt;(!!T[,] array, !!T value, int32 row, int32 column, int32 width, int32 height) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Fill``1(``0[0:,0:],``0,System.Int32,System.Int32,System.Int32,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Fill(Of T) (array As T(,), value As T, row As Integer, column As Integer, width As Integer, height As Integer)" />
        <MemberSignature Language="F#" Value="static member Fill : 'T[,] * 'T * int * int * int * int -&gt; unit" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Fill (array, value, row, column, width, height)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[,]" RefType="this" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="row" Type="System.Int32" />
          <Parameter Name="column" Type="System.Int32" />
          <Parameter Name="width" Type="System.Int32" />
          <Parameter Name="height" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input 2D <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input <typeparamref name="T" /> array instance.</param>
          <param name="value">The <typeparamref name="T" /> value to fill the target area with.</param>
          <param name="row">The row to start on (inclusive, 0-based index).</param>
          <param name="column">The column to start on (inclusive, 0-based index).</param>
          <param name="width">The positive width of area to fill.</param>
          <param name="height">The positive height of area to fill.</param>
          <summary>
            Fills an area in a given 2D <typeparamref name="T" /> array instance with a specified value.
            This API will try to fill as many items as possible, ignoring positions outside the bounds of the array.
            If invalid coordinates are given, they will simply be ignored and no exception will be thrown.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Fill``1(``0[0:,0:],``0,System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="GetColumn&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.Array2DColumnEnumerable&lt;T&gt; GetColumn&lt;T&gt; (this T[,] array, int column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.Array2DColumnEnumerable`1&lt;!!T&gt; GetColumn&lt;T&gt;(!!T[,] array, int32 column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetColumn``1(``0[0:,0:],System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetColumn(Of T) (array As T(,), column As Integer) As Array2DColumnEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member GetColumn : 'T[,] * int -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.Array2DColumnEnumerable&lt;'T&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetColumn (array, column)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.Array2DColumnEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[,]" RefType="this" />
          <Parameter Name="column" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input 2D <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input <typeparamref name="T" /> array instance.</param>
          <param name="column">The target column to retrieve (0-based index).</param>
          <summary>
             Returns an enumerable that returns the items from a given column in a given 2D <typeparamref name="T" /> array instance.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             int[,] matrix =
             {
                 { 1, 2, 3 },
                 { 4, 5, 6 },
                 { 7, 8, 9 }
             };
            
             foreach (ref int number in matrix.GetColumn(1))
             {
                 // Access the current number by reference here...
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetColumn``1(``0[0:,0:],System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="GetDjb2HashCode&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int GetDjb2HashCode&lt;T&gt; (this T[] array);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDjb2HashCode&lt;T&gt;(!!T[] array) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetDjb2HashCode``1(``0[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDjb2HashCode(Of T) (array As T()) As Integer" />
        <MemberSignature Language="F#" Value="static member GetDjb2HashCode : 'T[] -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetDjb2HashCode array" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the input <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input <typeparamref name="T" /> array instance.</param>
          <summary>
            Gets a content hash from the input <typeparamref name="T" /> array instance using the Djb2 algorithm.
            For more info, see the documentation for <see cref="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.GetDjb2HashCode``1(System.ReadOnlySpan{``0})" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetDjb2HashCode``1(``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="GetDjb2HashCode&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int GetDjb2HashCode&lt;T&gt; (this T[,] array);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDjb2HashCode&lt;T&gt;(!!T[,] array) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetDjb2HashCode``1(``0[0:,0:])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDjb2HashCode(Of T) (array As T(,)) As Integer" />
        <MemberSignature Language="F#" Value="static member GetDjb2HashCode : 'T[,] -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetDjb2HashCode array" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[,]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the input 2D <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input 2D <typeparamref name="T" /> array instance.</param>
          <summary>
            Gets a content hash from the input 2D <typeparamref name="T" /> array instance using the Djb2 algorithm.
            For more info, see the documentation for <see cref="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.GetDjb2HashCode``1(System.ReadOnlySpan{``0})" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetDjb2HashCode``1(``0[0:,0:])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="GetRow&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.Array2DRowEnumerable&lt;T&gt; GetRow&lt;T&gt; (this T[,] array, int row);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.Array2DRowEnumerable`1&lt;!!T&gt; GetRow&lt;T&gt;(!!T[,] array, int32 row) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetRow``1(``0[0:,0:],System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRow(Of T) (array As T(,), row As Integer) As Array2DRowEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member GetRow : 'T[,] * int -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.Array2DRowEnumerable&lt;'T&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetRow (array, row)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.Array2DRowEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[,]" RefType="this" />
          <Parameter Name="row" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input 2D <typeparamref name="T" /> array instance.</typeparam>
          <param name="array">The input <typeparamref name="T" /> array instance.</param>
          <param name="row">The target row to retrieve (0-based index).</param>
          <summary>
            Returns a <see cref="T:System.Span`1" /> over a row in a given 2D <typeparamref name="T" /> array instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.GetRow``1(``0[0:,0:],System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="Tokenize&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.SpanTokenizer&lt;T&gt; Tokenize&lt;T&gt; (this T[] array, T separator) where T : IEquatable&lt;T&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.SpanTokenizer`1&lt;!!T&gt; Tokenize&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(!!T[] array, !!T separator) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Tokenize``1(``0[],``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Tokenize(Of T As IEquatable(Of T)) (array As T(), separator As T) As SpanTokenizer(Of T)" />
        <MemberSignature Language="F#" Value="static member Tokenize : 'T[] * 'T -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.SpanTokenizer&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Tokenize (array, separator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.SpanTokenizer&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
          <Parameter Name="separator" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the <typeparamref name="T" /> array to tokenize.</typeparam>
          <param name="array">The source <typeparamref name="T" /> array to tokenize.</param>
          <param name="separator">The separator <typeparamref name="T" /> item to use.</param>
          <summary>
             Tokenizes the values in the input <typeparamref name="T" /> array instance using a specified separator.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             char[] text = "Hello, world!".ToCharArray();
            
             foreach (var token in text.Tokenize(','))
             {
                 // Access the tokens here...
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayExtensions.Tokenize``1(``0[],``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Buffers.ArrayPool`1" />
      </Targets>
      <Member MemberName="Resize&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Resize&lt;T&gt; (this System.Buffers.ArrayPool&lt;T&gt; pool, ref T[] array, int newSize, bool clearArray = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Resize&lt;T&gt;(class System.Buffers.ArrayPool`1&lt;!!T&gt; pool, !!T[]&amp; array, int32 newSize, bool clearArray) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayPoolExtensions.Resize``1(System.Buffers.ArrayPool{``0},``0[]@,System.Int32,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Resize(Of T) (pool As ArrayPool(Of T), ByRef array As T(), newSize As Integer, Optional clearArray As Boolean = false)" />
        <MemberSignature Language="F#" Value="static member Resize : System.Buffers.ArrayPool&lt;'T&gt; * T[] * int * bool -&gt; unit" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ArrayPoolExtensions.Resize (pool, array, newSize, clearArray)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="pool" Type="System.Buffers.ArrayPool&lt;T&gt;" RefType="this" />
          <Parameter Name="array" Type="T[]" RefType="ref" />
          <Parameter Name="newSize" Type="System.Int32" />
          <Parameter Name="clearArray" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items into the target array to resize.</typeparam>
          <param name="pool">The target <see cref="T:System.Buffers.ArrayPool`1" /> instance to use to resize the array.</param>
          <param name="array">The rented <typeparamref name="T" /> array to resize, or <see langword="null" /> to create a new array.</param>
          <param name="newSize">The size of the new array.</param>
          <param name="clearArray">Indicates whether the contents of the array should be cleared before reuse.</param>
          <summary>
            Changes the number of elements of a rented one-dimensional array to the specified new size.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ArrayPoolExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ArrayPoolExtensions.Resize``1(System.Buffers.ArrayPool{``0},``0[]@,System.Int32,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Boolean" />
      </Targets>
      <Member MemberName="ToBitwiseMask32">
        <MemberSignature Language="C#" Value="public static int ToBitwiseMask32 (this bool flag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBitwiseMask32(bool flag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToBitwiseMask32(System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBitwiseMask32 (flag As Boolean) As Integer" />
        <MemberSignature Language="F#" Value="static member ToBitwiseMask32 : bool -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToBitwiseMask32 flag" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="flag" Type="System.Boolean" RefType="this" />
        </Parameters>
        <Docs>
          <param name="flag">The input value to convert.</param>
          <summary>
            Converts the given <see cref="T:System.Boolean" /> value to an <see cref="T:System.Int32" /> mask with
            all bits representing the value of the input flag (either 0xFFFFFFFF or 0x00000000).
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToBitwiseMask32(System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Boolean" />
      </Targets>
      <Member MemberName="ToBitwiseMask64">
        <MemberSignature Language="C#" Value="public static long ToBitwiseMask64 (this bool flag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToBitwiseMask64(bool flag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToBitwiseMask64(System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBitwiseMask64 (flag As Boolean) As Long" />
        <MemberSignature Language="F#" Value="static member ToBitwiseMask64 : bool -&gt; int64" Usage="Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToBitwiseMask64 flag" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="flag" Type="System.Boolean" RefType="this" />
        </Parameters>
        <Docs>
          <param name="flag">The input value to convert.</param>
          <summary>
            Converts the given <see cref="T:System.Boolean" /> value to a <see cref="T:System.Int64" /> mask with
            all bits representing the value of the input flag (either all 1s or 0s).
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToBitwiseMask64(System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Boolean" />
      </Targets>
      <Member MemberName="ToInt">
        <MemberSignature Language="C#" Value="public static int ToInt (this bool flag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt(bool flag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToInt(System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToInt (flag As Boolean) As Integer" />
        <MemberSignature Language="F#" Value="static member ToInt : bool -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToInt flag" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="flag" Type="System.Boolean" RefType="this" />
        </Parameters>
        <Docs>
          <param name="flag">The input value to convert.</param>
          <summary>
            Converts the given <see cref="T:System.Boolean" /> value into an <see cref="T:System.Int32" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.BoolExtensions.ToInt(System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.HashCode" />
      </Targets>
      <Member MemberName="Add&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Add&lt;T&gt; (this ref HashCode hashCode, ReadOnlySpan&lt;T&gt; span) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.HashCode&amp; hashCode, valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.HashCodeExtensions.Add``1(System.HashCode@,System.ReadOnlySpan{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Add(Of T As Structure) (ByRef hashCode As HashCode, span As ReadOnlySpan(Of T))" />
        <MemberSignature Language="F#" Value="static member Add : HashCode * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.HashCodeExtensions.Add (hashCode, span)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="hashCode" Type="System.HashCode" RefType="this" />
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
          <param name="hashCode">The input <see cref="T:System.HashCode" /> instance.</param>
          <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance.</param>
          <summary>
            Adds a sequence of <typeparamref name="T" /> values to the hash code.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.HashCodeExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.HashCodeExtensions.Add``1(System.HashCode@,System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Buffers.IBufferWriter`1" />
      </Targets>
      <Member MemberName="Write&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (this System.Buffers.IBufferWriter&lt;T&gt; writer, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(class System.Buffers.IBufferWriter`1&lt;!!T&gt; writer, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write``1(System.Buffers.IBufferWriter{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Write(Of T) (writer As IBufferWriter(Of T), value As T)" />
        <MemberSignature Language="F#" Value="static member Write : System.Buffers.IBufferWriter&lt;'T&gt; * 'T -&gt; unit" Usage="Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write (writer, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value to write.</typeparam>
          <param name="writer">The target <see cref="T:System.Buffers.IBufferWriter`1" /> instance to write to.</param>
          <param name="value">The input value to write to <paramref name="writer" />.</param>
          <summary>
            Writes a value of a specified type into a target <see cref="T:System.Buffers.IBufferWriter`1" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write``1(System.Buffers.IBufferWriter{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Buffers.IBufferWriter`1" />
      </Targets>
      <Member MemberName="Write&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (this System.Buffers.IBufferWriter&lt;T&gt; writer, ReadOnlySpan&lt;T&gt; span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(class System.Buffers.IBufferWriter`1&lt;!!T&gt; writer, valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Write(Of T) (writer As IBufferWriter(Of T), span As ReadOnlySpan(Of T))" />
        <MemberSignature Language="F#" Value="static member Write : System.Buffers.IBufferWriter&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; unit" Usage="Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write (writer, span)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;T&gt;" RefType="this" />
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="writer">To be added.</param>
          <param name="span">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Buffers.IBufferWriter`1" />
      </Targets>
      <Member MemberName="Write&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (this System.Buffers.IBufferWriter&lt;byte&gt; writer, T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write``1(System.Buffers.IBufferWriter{System.Byte},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Write(Of T As Structure) (writer As IBufferWriter(Of Byte), value As T)" />
        <MemberSignature Language="F#" Value="static member Write : System.Buffers.IBufferWriter&lt;byte&gt; * 'T -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write (writer, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value to write.</typeparam>
          <param name="writer">The target <see cref="T:System.Buffers.IBufferWriter`1" /> instance to write to.</param>
          <param name="value">The input value to write to <paramref name="writer" />.</param>
          <summary>
            Writes a value of a specified type into a target <see cref="T:System.Buffers.IBufferWriter`1" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write``1(System.Buffers.IBufferWriter{System.Byte},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Buffers.IBufferWriter`1" />
      </Targets>
      <Member MemberName="Write&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (this System.Buffers.IBufferWriter&lt;byte&gt; writer, ReadOnlySpan&lt;T&gt; span) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer, valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write``1(System.Buffers.IBufferWriter{System.Byte},System.ReadOnlySpan{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Write(Of T As Structure) (writer As IBufferWriter(Of Byte), span As ReadOnlySpan(Of T))" />
        <MemberSignature Language="F#" Value="static member Write : System.Buffers.IBufferWriter&lt;byte&gt; * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write (writer, span)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value to write.</typeparam>
          <param name="writer">The target <see cref="T:System.Buffers.IBufferWriter`1" /> instance to write to.</param>
          <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> to write to <paramref name="writer" />.</param>
          <summary>
            Writes a series of items of a specified type into a target <see cref="T:System.Buffers.IBufferWriter`1" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.IBufferWriterExtensions.Write``1(System.Buffers.IBufferWriter{System.Byte},System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Buffers.IMemoryOwner`1" />
      </Targets>
      <Member MemberName="AsStream">
        <MemberSignature Language="C#" Value="public static System.IO.Stream AsStream (this System.Buffers.IMemoryOwner&lt;byte&gt; memory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStream(class System.Buffers.IMemoryOwner`1&lt;unsigned int8&gt; memory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.IMemoryOwnerExtensions.AsStream(System.Buffers.IMemoryOwner{System.Byte})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStream (memory As IMemoryOwner(Of Byte)) As Stream" />
        <MemberSignature Language="F#" Value="static member AsStream : System.Buffers.IMemoryOwner&lt;byte&gt; -&gt; System.IO.Stream" Usage="Microsoft.Toolkit.HighPerformance.Extensions.IMemoryOwnerExtensions.AsStream memory" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IO.Stream</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="memory" Type="System.Buffers.IMemoryOwner&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="memory">The input <see cref="T:System.Buffers.IMemoryOwner`1" /> of <see cref="T:System.Byte" /> instance.</param>
          <summary>
            Returns a <see cref="T:System.IO.Stream" /> wrapping the contents of the given <see cref="T:System.Buffers.IMemoryOwner`1" /> of <see cref="T:System.Byte" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.IMemoryOwnerExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.IMemoryOwnerExtensions.AsStream(System.Buffers.IMemoryOwner{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Memory`1" />
      </Targets>
      <Member MemberName="AsStream">
        <MemberSignature Language="C#" Value="public static System.IO.Stream AsStream (this Memory&lt;byte&gt; memory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStream(valuetype System.Memory`1&lt;unsigned int8&gt; memory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.MemoryExtensions.AsStream(System.Memory{System.Byte})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStream (memory As Memory(Of Byte)) As Stream" />
        <MemberSignature Language="F#" Value="static member AsStream : Memory&lt;byte&gt; -&gt; System.IO.Stream" Usage="Microsoft.Toolkit.HighPerformance.Extensions.MemoryExtensions.AsStream memory" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IO.Stream</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="memory" Type="System.Memory&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="memory">The input <see cref="T:System.Memory`1" /> of <see cref="T:System.Byte" /> instance.</param>
          <summary>
            Returns a <see cref="T:System.IO.Stream" /> wrapping the contents of the given <see cref="T:System.Memory`1" /> of <see cref="T:System.Byte" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.MemoryExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.MemoryExtensions.AsStream(System.Memory{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Object" />
      </Targets>
      <Member MemberName="DangerousGetObjectDataByteOffset&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static IntPtr DangerousGetObjectDataByteOffset&lt;T&gt; (this object obj, ref T data);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int DangerousGetObjectDataByteOffset&lt;T&gt;(object obj, !!T&amp; data) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousGetObjectDataByteOffset``1(System.Object,``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetObjectDataByteOffset(Of T) (obj As Object, ByRef data As T) As IntPtr" />
        <MemberSignature Language="F#" Value="static member DangerousGetObjectDataByteOffset : obj * 'T -&gt; nativeint" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousGetObjectDataByteOffset (obj, data)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IntPtr</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="obj" Type="System.Object" RefType="this" />
          <Parameter Name="data" Type="T" RefType="ref" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of field being referenced.</typeparam>
          <param name="obj">The input <see cref="T:System.Object" /> hosting the target field.</param>
          <param name="data">A reference to a target field of type <typeparamref name="T" /> within <paramref name="obj" />.</param>
          <summary>
            Calculates the byte offset to a specific field within a given <see cref="T:System.Object" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousGetObjectDataByteOffset``1(System.Object,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Object" />
      </Targets>
      <Member MemberName="DangerousGetObjectDataReferenceAt&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetObjectDataReferenceAt&lt;T&gt; (this object obj, IntPtr offset);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetObjectDataReferenceAt&lt;T&gt;(object obj, native int offset) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousGetObjectDataReferenceAt``1(System.Object,System.IntPtr)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetObjectDataReferenceAt(Of T) (obj As Object, offset As IntPtr) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetObjectDataReferenceAt : obj * nativeint -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousGetObjectDataReferenceAt (obj, offset)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="obj" Type="System.Object" RefType="this" />
          <Parameter Name="offset" Type="System.IntPtr" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of reference to retrieve.</typeparam>
          <param name="obj">The input <see cref="T:System.Object" /> hosting the target field.</param>
          <param name="offset">The input byte offset for the <typeparamref name="T" /> reference to retrieve.</param>
          <summary>
            Gets a <typeparamref name="T" /> reference to data within a given <see cref="T:System.Object" /> at a specified offset.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousGetObjectDataReferenceAt``1(System.Object,System.IntPtr)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Object" />
      </Targets>
      <Member MemberName="DangerousUnbox&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousUnbox&lt;T&gt; (this object obj) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousUnbox&lt;struct .ctor (class System.ValueType) T&gt;(object obj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousUnbox``1(System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousUnbox(Of T As Structure) (obj As Object) As T" />
        <MemberSignature Language="F#" Value="static member DangerousUnbox : obj -&gt; 'T (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousUnbox obj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="obj" Type="System.Object" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value to unbox.</typeparam>
          <param name="obj">The input <see cref="T:System.Object" /> instance, representing a boxed <typeparamref name="T" /> value.</param>
          <summary>
            Unboxes a <typeparamref name="T" /> value from an input <see cref="T:System.Object" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.DangerousUnbox``1(System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Object" />
      </Targets>
      <Member MemberName="TryUnbox&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool TryUnbox&lt;T&gt; (this object obj, out T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryUnbox&lt;struct .ctor (class System.ValueType) T&gt;(object obj, [out] !!T&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.TryUnbox``1(System.Object,``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryUnbox(Of T As Structure) (obj As Object, ByRef value As T) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryUnbox : obj * 'T -&gt; bool (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.TryUnbox (obj, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="obj" Type="System.Object" RefType="this" />
          <Parameter Name="value" Type="T" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value to try to unbox.</typeparam>
          <param name="obj">The input <see cref="T:System.Object" /> instance to check.</param>
          <param name="value">The resulting <typeparamref name="T" /> value, if <paramref name="obj" /> was in fact a boxed <typeparamref name="T" /> value.</param>
          <summary>
             Tries to get a boxed <typeparamref name="T" /> value from an input <see cref="T:System.Object" /> instance.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ObjectExtensions.TryUnbox``1(System.Object,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlyMemory`1" />
      </Targets>
      <Member MemberName="AsStream">
        <MemberSignature Language="C#" Value="public static System.IO.Stream AsStream (this ReadOnlyMemory&lt;byte&gt; memory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStream(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; memory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlyMemoryExtensions.AsStream(System.ReadOnlyMemory{System.Byte})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStream (memory As ReadOnlyMemory(Of Byte)) As Stream" />
        <MemberSignature Language="F#" Value="static member AsStream : ReadOnlyMemory&lt;byte&gt; -&gt; System.IO.Stream" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlyMemoryExtensions.AsStream memory" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IO.Stream</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Byte" /> instance.</param>
          <summary>
            Returns a <see cref="T:System.IO.Stream" /> wrapping the contents of the given <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Byte" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlyMemoryExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlyMemoryExtensions.AsStream(System.ReadOnlyMemory{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="AsBytes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.AsBytes``1(System.ReadOnlySpan{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
        <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.AsBytes span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type if items in the source <see cref="T:System.ReadOnlySpan`1" />.</typeparam>
          <param name="span">The source slice, of type <typeparamref name="T" />.</param>
          <summary>
            Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type <typeparamref name="T" /> to <see cref="T:System.ReadOnlySpan`1" /> of bytes.
            That type may not contain pointers or references. This is checked at runtime in order to preserve type safety.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.AsBytes``1(System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="Cast&lt;TFrom,TTo&gt;">
        <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (this ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Cast``2(System.ReadOnlySpan{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
        <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Cast span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFrom">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TTo">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TFrom">The type of items in the source <see cref="T:System.ReadOnlySpan`1" />.</typeparam>
          <typeparam name="TTo">The type of items in the destination <see cref="T:System.ReadOnlySpan`1" />.</typeparam>
          <param name="span">The source slice, of type <typeparamref name="TFrom" />.</param>
          <summary>
            Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type <typeparamref name="TFrom" /> to another primitive type <typeparamref name="TTo" />.
            These types may not contain pointers or references. This is checked at runtime in order to preserve type safety.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Cast``2(System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="Count&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Count``1(System.ReadOnlySpan{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As T) As Integer" />
        <MemberSignature Language="F#" Value="static member Count : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Count (span, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to read.</param>
          <param name="value">The <typeparamref name="T" /> value to look for.</param>
          <summary>
            Counts the number of occurrences of a given value into a target <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Count``1(System.ReadOnlySpan{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="DangerousGetLookupReferenceAt&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref readonly T DangerousGetLookupReferenceAt&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, int i);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetLookupReferenceAt&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, int32 i) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetLookupReferenceAt``1(System.ReadOnlySpan{``0},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetLookupReferenceAt(Of T) (span As ReadOnlySpan(Of T), i As Integer) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetLookupReferenceAt : ReadOnlySpan&lt;'T&gt; * int -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetLookupReferenceAt (span, i)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="i" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance.</param>
          <param name="i">The index of the element to retrieve within <paramref name="span" />.</param>
          <summary>
             Returns a reference to the first element within a given <see cref="T:System.ReadOnlySpan`1" />, clamping the input index in the valid range.
             If the <paramref name="i" /> parameter exceeds the length of <paramref name="span" />, it will be clamped to 0.
             Therefore, the returned reference will always point to a valid element within <paramref name="span" />, assuming it is not empty.
             This method is specifically meant to efficiently index lookup tables, especially if they point to constant data.
             Consider this example where a lookup table is used to validate whether a given character is within a specific set:
             <code>
             public static ReadOnlySpan&lt;bool&gt; ValidSetLookupTable =&gt; new bool[]
             {
                 false, true, true, true, true, true, false, true,
                 false, false, true, false, true, false, true, false,
                 true, false, false, true, false, false, false, false,
                 false, false, false, false, true, true, false, true
             };
            
             int ch = Console.Read();
             bool isValid = ValidSetLookupTable.DangerousGetLookupReference(ch);
             </code>
             Even if the input index is outside the range of the lookup table, being clamped to 0, it will
             just cause the value 0 to be returned in this case, which is functionally the same for the check
             being performed. This extension can easily be used whenever the first position in a lookup
             table being referenced corresponds to a falsey value, like in this case.
             Additionally, the example above leverages a compiler optimization introduced with C# 7.3,
             which allows <see cref="T:System.ReadOnlySpan`1" /> instances pointing to compile-time constant data
             to be directly mapped to the static .text section in the final assembly: the array being
             created in code will never actually be allocated, and the <see cref="T:System.ReadOnlySpan`1" /> will
             just point to constant data. Note that this only works for blittable values that are not
             dependent on the byte endianness of the system, like <see cref="T:System.Byte" /> or <see cref="T:System.Boolean" />.
             For more info, see <see href="https://vcsjones.dev/2019/02/01/csharp-readonly-span-bytes-static/" />.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetLookupReferenceAt``1(System.ReadOnlySpan{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="DangerousGetReference&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetReference&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetReference``1(System.ReadOnlySpan{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetReference : ReadOnlySpan&lt;'T&gt; -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetReference span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance.</param>
          <summary>
            Returns a reference to the first element within a given <see cref="T:System.ReadOnlySpan`1" />, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetReference``1(System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="DangerousGetReferenceAt&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetReferenceAt&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, int i);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetReferenceAt&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, int32 i) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetReferenceAt``1(System.ReadOnlySpan{``0},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReferenceAt(Of T) (span As ReadOnlySpan(Of T), i As Integer) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetReferenceAt : ReadOnlySpan&lt;'T&gt; * int -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetReferenceAt (span, i)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="i" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance.</param>
          <param name="i">The index of the element to retrieve within <paramref name="span" />.</param>
          <summary>
            Returns a reference to an element at a specified index within a given <see cref="T:System.ReadOnlySpan`1" />, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.DangerousGetReferenceAt``1(System.ReadOnlySpan{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="Enumerate&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;T&gt; Enumerate&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable`1&lt;!!T&gt; Enumerate&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Enumerate``1(System.ReadOnlySpan{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Enumerate(Of T) (span As ReadOnlySpan(Of T)) As ReadOnlySpanEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member Enumerate : ReadOnlySpan&lt;'T&gt; -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;'T&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Enumerate span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items to enumerate.</typeparam>
          <param name="span">The source <see cref="T:System.ReadOnlySpan`1" /> to enumerate.</param>
          <summary>
             Enumerates the items in the input <see cref="T:System.ReadOnlySpan`1" /> instance, as pairs of value/index values.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             ReadOnlySpan&lt;string&gt; words = new[] { "Hello", ", ", "world", "!" };
            
             foreach (var item in words.Enumerate())
             {
                 // Access the index and value of each item here...
                 int index = item.Index;
                 string value = item.Value;
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Enumerate``1(System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="GetDjb2HashCode&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int GetDjb2HashCode&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDjb2HashCode&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.GetDjb2HashCode``1(System.ReadOnlySpan{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDjb2HashCode(Of T) (span As ReadOnlySpan(Of T)) As Integer" />
        <MemberSignature Language="F#" Value="static member GetDjb2HashCode : ReadOnlySpan&lt;'T&gt; -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.GetDjb2HashCode span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance.</param>
          <summary>
            Gets a content hash from the input <see cref="T:System.ReadOnlySpan`1" /> instance using the Djb2 algorithm.
            It was designed by <see href="https://en.wikipedia.org/wiki/Daniel_J._Bernstein">Daniel J. Bernstein</see> and is a
            <see href="https://en.wikipedia.org/wiki/List_of_hash_functions#Non-cryptographic_hash_functions">non-cryptographic has function</see>.
            The main advantages of this algorithm are a good distribution of the resulting hash codes, which results in a relatively low
            number of collisions, while at the same time being particularly fast to process, making it suitable for quickly hashing
            even long sequences of values. For the reference implementation, see: <see href="https://www.cse.yorku.ca/~oz/hash.html" />.
            For details on the used constants, see the details provided in this StackOverflow answer (as well as the accepted one):
            <see href="https://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function/13809282#13809282" />.
            Additionally, a comparison between some common hashing algoriths can be found in the reply to this StackExchange question:
            <see href="https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed" />.
            Note that the exact implementation is slightly different in this method when it is not called on a sequence of <see cref="T:System.Byte" />
            values: in this case the <see cref="M:System.Object.GetHashCode" /> method will be invoked for each <typeparamref name="T" /> value in
            the provided <see cref="T:System.ReadOnlySpan`1" /> instance, and then those values will be combined using the Djb2 algorithm.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.GetDjb2HashCode``1(System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ref T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, [in]!!T&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T) (span As ReadOnlySpan(Of T), ByRef value As T) As Integer" />
        <MemberSignature Language="F#" Value="static member IndexOf : ReadOnlySpan&lt;'T&gt; * 'T -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.IndexOf (span, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" RefType="ref" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type if items in the input <see cref="T:System.ReadOnlySpan`1" />.</typeparam>
          <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> to calculate the index for.</param>
          <param name="value">The reference to the target item to get the index for.</param>
          <summary>
            Gets the index of an element of a given <see cref="T:System.ReadOnlySpan`1" /> from its reference.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="Tokenize&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;T&gt; Tokenize&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T separator) where T : IEquatable&lt;T&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer`1&lt;!!T&gt; Tokenize&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T separator) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Tokenize``1(System.ReadOnlySpan{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Tokenize(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), separator As T) As ReadOnlySpanTokenizer(Of T)" />
        <MemberSignature Language="F#" Value="static member Tokenize : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Tokenize (span, separator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="separator" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the <see cref="T:System.ReadOnlySpan`1" /> to tokenize.</typeparam>
          <param name="span">The source <see cref="T:System.ReadOnlySpan`1" /> to tokenize.</param>
          <param name="separator">The separator <typeparamref name="T" /> item to use.</param>
          <summary>
             Tokenizes the values in the input <see cref="T:System.ReadOnlySpan`1" /> instance using a specified separator.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             ReadOnlySpan&lt;char&gt; text = "Hello, world!";
            
             foreach (var token in text.Tokenize(','))
             {
                 // Access the tokens here...
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.Tokenize``1(System.ReadOnlySpan{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="AsBytes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (this Span&lt;T&gt; span) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.AsBytes``1(System.Span{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
        <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.AsBytes span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type if items in the source <see cref="T:System.Span`1" />.</typeparam>
          <param name="span">The source slice, of type <typeparamref name="T" />.</param>
          <summary>
            Casts a <see cref="T:System.Span`1" /> of one primitive type <typeparamref name="T" /> to <see cref="T:System.Span`1" /> of bytes.
            That type may not contain pointers or references. This is checked at runtime in order to preserve type safety.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.AsBytes``1(System.Span{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="Cast&lt;TFrom,TTo&gt;">
        <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (this Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Cast``2(System.Span{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
        <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Cast span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFrom">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TTo">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TFrom">The type of items in the source <see cref="T:System.Span`1" />.</typeparam>
          <typeparam name="TTo">The type of items in the destination <see cref="T:System.Span`1" />.</typeparam>
          <param name="span">The source slice, of type <typeparamref name="TFrom" />.</param>
          <summary>
            Casts a <see cref="T:System.Span`1" /> of one primitive type <typeparamref name="TFrom" /> to another primitive type <typeparamref name="TTo" />.
            These types may not contain pointers or references. This is checked at runtime in order to preserve type safety.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Cast``2(System.Span{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="Count&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;T&gt; (this Span&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Count``1(System.Span{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of T As IEquatable(Of T)) (span As Span(Of T), value As T) As Integer" />
        <MemberSignature Language="F#" Value="static member Count : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Count (span, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.Span`1" /> instance to read.</param>
          <param name="value">The <typeparamref name="T" /> value to look for.</param>
          <summary>
            Counts the number of occurrences of a given value into a target <see cref="T:System.Span`1" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Count``1(System.Span{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="DangerousGetReference&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetReference&lt;T&gt; (this Span&lt;T&gt; span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.DangerousGetReference``1(System.Span{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReference(Of T) (span As Span(Of T)) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetReference : Span&lt;'T&gt; -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.DangerousGetReference span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input <see cref="T:System.Span`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.Span`1" /> instance.</param>
          <summary>
            Returns a reference to the first element within a given <see cref="T:System.Span`1" />, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.DangerousGetReference``1(System.Span{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="DangerousGetReferenceAt&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static ref T DangerousGetReferenceAt&lt;T&gt; (this Span&lt;T&gt; span, int i);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T DangerousGetReferenceAt&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, int32 i) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.DangerousGetReferenceAt``1(System.Span{``0},System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReferenceAt(Of T) (span As Span(Of T), i As Integer) As T" />
        <MemberSignature Language="F#" Value="static member DangerousGetReferenceAt : Span&lt;'T&gt; * int -&gt; 'T" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.DangerousGetReferenceAt (span, i)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
          <Parameter Name="i" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of elements in the input <see cref="T:System.Span`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.Span`1" /> instance.</param>
          <param name="i">The index of the element to retrieve within <paramref name="span" />.</param>
          <summary>
            Returns a reference to an element at a specified index within a given <see cref="T:System.Span`1" />, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.DangerousGetReferenceAt``1(System.Span{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="Enumerate&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.SpanEnumerable&lt;T&gt; Enumerate&lt;T&gt; (this Span&lt;T&gt; span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.SpanEnumerable`1&lt;!!T&gt; Enumerate&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Enumerate``1(System.Span{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Enumerate(Of T) (span As Span(Of T)) As SpanEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member Enumerate : Span&lt;'T&gt; -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.SpanEnumerable&lt;'T&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Enumerate span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.SpanEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items to enumerate.</typeparam>
          <param name="span">The source <see cref="T:System.Span`1" /> to enumerate.</param>
          <summary>
             Enumerates the items in the input <see cref="T:System.Span`1" /> instance, as pairs of reference/index values.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             Span&lt;int&gt; numbers = new[] { 1, 2, 3, 4, 5, 6, 7 };
            
             foreach (var item in numbers.Enumerate())
             {
                 // Access the index and value of each item here...
                 int index = item.Index;
                 ref int value = ref item.Value;
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Enumerate``1(System.Span{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="GetDjb2HashCode&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int GetDjb2HashCode&lt;T&gt; (this Span&lt;T&gt; span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDjb2HashCode&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.GetDjb2HashCode``1(System.Span{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDjb2HashCode(Of T) (span As Span(Of T)) As Integer" />
        <MemberSignature Language="F#" Value="static member GetDjb2HashCode : Span&lt;'T&gt; -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.GetDjb2HashCode span" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
          <param name="span">The input <see cref="T:System.Span`1" /> instance.</param>
          <summary>
            Gets a content hash from the input <see cref="T:System.Span`1" /> instance using the Djb2 algorithm.
            For more info, see the documentation for <see cref="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.GetDjb2HashCode``1(System.ReadOnlySpan{``0})" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.GetDjb2HashCode``1(System.Span{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Span&lt;T&gt; span, ref T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.IndexOf``1(System.Span{``0},``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T) (span As Span(Of T), ByRef value As T) As Integer" />
        <MemberSignature Language="F#" Value="static member IndexOf : Span&lt;'T&gt; * 'T -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.IndexOf (span, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" RefType="ref" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type if items in the input <see cref="T:System.Span`1" />.</typeparam>
          <param name="span">The input <see cref="T:System.Span`1" /> to calculate the index for.</param>
          <param name="value">The reference to the target item to get the index for.</param>
          <summary>
            Gets the index of an element of a given <see cref="T:System.Span`1" /> from its reference.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.IndexOf``1(System.Span{``0},``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Span`1" />
      </Targets>
      <Member MemberName="Tokenize&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.SpanTokenizer&lt;T&gt; Tokenize&lt;T&gt; (this Span&lt;T&gt; span, T separator) where T : IEquatable&lt;T&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.SpanTokenizer`1&lt;!!T&gt; Tokenize&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T separator) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Tokenize``1(System.Span{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Tokenize(Of T As IEquatable(Of T)) (span As Span(Of T), separator As T) As SpanTokenizer(Of T)" />
        <MemberSignature Language="F#" Value="static member Tokenize : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.SpanTokenizer&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Tokenize (span, separator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.SpanTokenizer&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
          <Parameter Name="separator" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of items in the <see cref="T:System.Span`1" /> to tokenize.</typeparam>
          <param name="span">The source <see cref="T:System.Span`1" /> to tokenize.</param>
          <param name="separator">The separator <typeparamref name="T" /> item to use.</param>
          <summary>
             Tokenizes the values in the input <see cref="T:System.Span`1" /> instance using a specified separator.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             Span&lt;char&gt; text = "Hello, world!".ToCharArray();
            
             foreach (var token in text.Tokenize(','))
             {
                 // Access the tokens here...
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.SpanExtensions.Tokenize``1(System.Span{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="Read">
        <MemberSignature Language="C#" Value="public static int Read (this System.IO.Stream stream, Span&lt;byte&gt; buffer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read(class System.IO.Stream stream, valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Read(System.IO.Stream,System.Span{System.Byte})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Read (stream As Stream, buffer As Span(Of Byte)) As Integer" />
        <MemberSignature Language="F#" Value="static member Read : System.IO.Stream * Span&lt;byte&gt; -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Read (stream, buffer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="stream">To be added.</param>
          <param name="buffer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Read(System.IO.Stream,System.Span{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="Read&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (this System.IO.Stream stream) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(class System.IO.Stream stream) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Read``1(System.IO.Stream)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Read(Of T As Structure) (stream As Stream) As T" />
        <MemberSignature Language="F#" Value="static member Read : System.IO.Stream -&gt; 'T (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Read stream" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value to read.</typeparam>
          <param name="stream">The source <see cref="T:System.IO.Stream" /> instance to read from.</param>
          <summary>
            Reads a value of a specified type from a source <see cref="T:System.IO.Stream" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Read``1(System.IO.Stream)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="ReadAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (this System.IO.Stream stream, Memory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(class System.IO.Stream stream, valuetype System.Memory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.ReadAsync(System.IO.Stream,System.Memory{System.Byte},System.Threading.CancellationToken)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsync (stream As Stream, buffer As Memory(Of Byte), Optional cancellationToken As CancellationToken = null) As ValueTask(Of Integer)" />
        <MemberSignature Language="F#" Value="static member ReadAsync : System.IO.Stream * Memory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.ReadAsync (stream, buffer, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="buffer" Type="System.Memory&lt;System.Byte&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="stream">To be added.</param>
          <param name="buffer">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.ReadAsync(System.IO.Stream,System.Memory{System.Byte},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="Write">
        <MemberSignature Language="C#" Value="public static void Write (this System.IO.Stream stream, ReadOnlySpan&lt;byte&gt; buffer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(class System.IO.Stream stream, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Write(System.IO.Stream,System.ReadOnlySpan{System.Byte})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Write (stream As Stream, buffer As ReadOnlySpan(Of Byte))" />
        <MemberSignature Language="F#" Value="static member Write : System.IO.Stream * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Write (stream, buffer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="stream">To be added.</param>
          <param name="buffer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Write(System.IO.Stream,System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="Write&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (this System.IO.Stream stream, ref T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(class System.IO.Stream stream, [in]!!T&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Write``1(System.IO.Stream,``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Write(Of T As Structure) (stream As Stream, ByRef value As T)" />
        <MemberSignature Language="F#" Value="static member Write : System.IO.Stream * 'T -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Write (stream, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="value" Type="T" RefType="ref" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value to write.</typeparam>
          <param name="stream">The target <see cref="T:System.IO.Stream" /> instance to write to.</param>
          <param name="value">The input value to write to <paramref name="stream" />.</param>
          <summary>
            Writes a value of a specified type into a target <see cref="T:System.IO.Stream" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.Write``1(System.IO.Stream,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="WriteAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask WriteAsync (this System.IO.Stream stream, ReadOnlyMemory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask WriteAsync(class System.IO.Stream stream, valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteAsync (stream As Stream, buffer As ReadOnlyMemory(Of Byte), Optional cancellationToken As CancellationToken = null) As ValueTask" />
        <MemberSignature Language="F#" Value="static member WriteAsync : System.IO.Stream * ReadOnlyMemory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.WriteAsync (stream, buffer, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="stream">To be added.</param>
          <param name="buffer">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StreamExtensions.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Count">
        <MemberSignature Language="C#" Value="public static int Count (this string text, char c);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count(string text, char c) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Count(System.String,System.Char)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count (text As String, c As Char) As Integer" />
        <MemberSignature Language="F#" Value="static member Count : string * char -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Count (text, c)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="text" Type="System.String" RefType="this" />
          <Parameter Name="c" Type="System.Char" />
        </Parameters>
        <Docs>
          <param name="text">The input <see cref="T:System.String" /> instance to read.</param>
          <param name="c">The character to look for.</param>
          <summary>
            Counts the number of occurrences of a given character into a target <see cref="T:System.String" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Count(System.String,System.Char)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="DangerousGetReference">
        <MemberSignature Language="C#" Value="public static ref char DangerousGetReference (this string text);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig char DangerousGetReference(string text) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReference(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReference (text As String) As Char" />
        <MemberSignature Language="F#" Value="static member DangerousGetReference : string -&gt; char" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReference text" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Char</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="text" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="text">The input <see cref="T:System.String" /> instance.</param>
          <summary>
            Returns a reference to the first element within a given <see cref="T:System.String" />, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReference(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="DangerousGetReferenceAt">
        <MemberSignature Language="C#" Value="public static ref char DangerousGetReferenceAt (this string text, int i);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig char DangerousGetReferenceAt(string text, int32 i) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReferenceAt(System.String,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DangerousGetReferenceAt (text As String, i As Integer) As Char" />
        <MemberSignature Language="F#" Value="static member DangerousGetReferenceAt : string * int -&gt; char" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReferenceAt (text, i)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Char</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="text" Type="System.String" RefType="this" />
          <Parameter Name="i" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="text">The input <see cref="T:System.String" /> instance.</param>
          <param name="i">The index of the element to retrieve within <paramref name="text" />.</param>
          <summary>
            Returns a reference to an element at a specified index within a given <see cref="T:System.String" />, with no bounds checks.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.DangerousGetReferenceAt(System.String,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Enumerate">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;char&gt; Enumerate (this string text);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable`1&lt;char&gt; Enumerate(string text) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Enumerate(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Enumerate (text As String) As ReadOnlySpanEnumerable(Of Char)" />
        <MemberSignature Language="F#" Value="static member Enumerate : string -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;char&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Enumerate text" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanEnumerable&lt;System.Char&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="text" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="text">The source <see cref="T:System.String" /> to enumerate.</param>
          <summary>
             Enumerates the items in the input <see cref="T:System.String" /> instance, as pairs of value/index values.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             string text = "Hello, world!";
            
             foreach (var item in text.Enumerate())
             {
                 // Access the index and value of each item here...
                 int index = item.Index;
                 string value = item.Value;
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Enumerate(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="GetDjb2HashCode">
        <MemberSignature Language="C#" Value="public static int GetDjb2HashCode (this string text);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDjb2HashCode(string text) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.GetDjb2HashCode(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDjb2HashCode (text As String) As Integer" />
        <MemberSignature Language="F#" Value="static member GetDjb2HashCode : string -&gt; int" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.GetDjb2HashCode text" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="text" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="text">The source <see cref="T:System.String" /> to enumerate.</param>
          <summary>
            Gets a content hash from the input <see cref="T:System.String" /> instance using the Djb2 algorithm.
            For more info, see the documentation for <see cref="M:Microsoft.Toolkit.HighPerformance.Extensions.ReadOnlySpanExtensions.GetDjb2HashCode``1(System.ReadOnlySpan{``0})" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.GetDjb2HashCode(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Tokenize">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;char&gt; Tokenize (this string text, char separator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer`1&lt;char&gt; Tokenize(string text, char separator) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Tokenize(System.String,System.Char)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Tokenize (text As String, separator As Char) As ReadOnlySpanTokenizer(Of Char)" />
        <MemberSignature Language="F#" Value="static member Tokenize : string * char -&gt; Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;char&gt;" Usage="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Tokenize (text, separator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.HighPerformance.Enumerables.ReadOnlySpanTokenizer&lt;System.Char&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="text" Type="System.String" RefType="this" />
          <Parameter Name="separator" Type="System.Char" />
        </Parameters>
        <Docs>
          <param name="text">The source <see cref="T:System.String" /> to tokenize.</param>
          <param name="separator">The separator character to use.</param>
          <summary>
             Tokenizes the values in the input <see cref="T:System.String" /> instance using a specified separator.
             This extension should be used directly within a <see langword="foreach" /> loop:
             <code>
             string text = "Hello, world!";
            
             foreach (var token in text.Tokenize(','))
             {
                 // Access the tokens here...
             }
             </code>
             The compiler will take care of properly setting up the <see langword="foreach" /> loop with the type returned from this method.
             </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.HighPerformance.Extensions.StringExtensions.Tokenize(System.String,System.Char)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Nullable`1" />
      </Targets>
      <Member MemberName="GetErrorString">
        <MemberSignature Language="C#" Value="public static string GetErrorString (this byte? errorValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetErrorString(valuetype System.Nullable`1&lt;unsigned int8&gt; errorValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Connectivity.GattProtocolErrorParser.GetErrorString(System.Nullable{System.Byte})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetErrorString (errorValue As Nullable(Of Byte)) As String" />
        <MemberSignature Language="F#" Value="static member GetErrorString : Nullable&lt;byte&gt; -&gt; string" Usage="Microsoft.Toolkit.Uwp.Connectivity.GattProtocolErrorParser.GetErrorString errorValue" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="errorValue" Type="System.Nullable&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="errorValue"> the byte error value.</param>
          <summary>
            Helper to convert an Gatt error value into a string
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Connectivity.GattProtocolErrorParser" Member="M:Microsoft.Toolkit.Uwp.Connectivity.GattProtocolErrorParser.GetErrorString(System.Nullable{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.EventHandler`1" />
      </Targets>
      <Member MemberName="InvokeAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task InvokeAsync&lt;T&gt; (this EventHandler&lt;T&gt; eventHandler, object sender, T eventArgs) where T : Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task InvokeAsync&lt;(class Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs) T&gt;(class System.EventHandler`1&lt;!!T&gt; eventHandler, object sender, !!T eventArgs) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Deferred.EventHandlerExtensions.InvokeAsync``1(System.EventHandler{``0},System.Object,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InvokeAsync(Of T As DeferredEventArgs) (eventHandler As EventHandler(Of T), sender As Object, eventArgs As T) As Task" />
        <MemberSignature Language="F#" Value="static member InvokeAsync : EventHandler&lt;'T (requires 'T :&gt; Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs)&gt; * obj * 'T -&gt; System.Threading.Tasks.Task (requires 'T :&gt; Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs)" Usage="Microsoft.Toolkit.Uwp.Deferred.EventHandlerExtensions.InvokeAsync (eventHandler, sender, eventArgs)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="eventHandler" Type="System.EventHandler&lt;T&gt;" RefType="this" />
          <Parameter Name="sender" Type="System.Object" />
          <Parameter Name="eventArgs" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            <see cref="T:System.EventArgs" /> type.</typeparam>
          <param name="eventHandler">
            <see cref="T:System.EventHandler`1" /> to be invoked.</param>
          <param name="sender">Sender of the event.</param>
          <param name="eventArgs">
            <see cref="T:System.EventArgs" /> instance.</param>
          <summary>
            Use to invoke an async <see cref="T:System.EventHandler`1" /> using <see cref="T:Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Deferred.EventHandlerExtensions" Member="M:Microsoft.Toolkit.Uwp.Deferred.EventHandlerExtensions.InvokeAsync``1(System.EventHandler{``0},System.Object,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.EventHandler`1" />
      </Targets>
      <Member MemberName="InvokeAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task InvokeAsync&lt;T&gt; (this EventHandler&lt;T&gt; eventHandler, object sender, T eventArgs, System.Threading.CancellationToken cancellationToken) where T : Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task InvokeAsync&lt;(class Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs) T&gt;(class System.EventHandler`1&lt;!!T&gt; eventHandler, object sender, !!T eventArgs, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Deferred.EventHandlerExtensions.InvokeAsync``1(System.EventHandler{``0},System.Object,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InvokeAsync(Of T As DeferredEventArgs) (eventHandler As EventHandler(Of T), sender As Object, eventArgs As T, cancellationToken As CancellationToken) As Task" />
        <MemberSignature Language="F#" Value="static member InvokeAsync : EventHandler&lt;'T (requires 'T :&gt; Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs)&gt; * obj * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task (requires 'T :&gt; Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs)" Usage="Microsoft.Toolkit.Uwp.Deferred.EventHandlerExtensions.InvokeAsync (eventHandler, sender, eventArgs, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="eventHandler" Type="System.EventHandler&lt;T&gt;" RefType="this" />
          <Parameter Name="sender" Type="System.Object" />
          <Parameter Name="eventArgs" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            <see cref="T:System.EventArgs" /> type.</typeparam>
          <param name="eventHandler">
            <see cref="T:System.EventHandler`1" /> to be invoked.</param>
          <param name="sender">Sender of the event.</param>
          <param name="eventArgs">
            <see cref="T:System.EventArgs" /> instance.</param>
          <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken" /> option.</param>
          <summary>
            Use to invoke an async <see cref="T:System.EventHandler`1" /> using <see cref="T:Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs" /> with a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Deferred.EventHandlerExtensions" Member="M:Microsoft.Toolkit.Uwp.Deferred.EventHandlerExtensions.InvokeAsync``1(System.EventHandler{``0},System.Object,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Foundation.TypedEventHandler`2" />
      </Targets>
      <Member MemberName="InvokeAsync&lt;S,R&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task InvokeAsync&lt;S,R&gt; (this Windows.Foundation.TypedEventHandler&lt;S,R&gt; eventHandler, S sender, R eventArgs) where R : Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task InvokeAsync&lt;S, (class Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs) R&gt;(class Windows.Foundation.TypedEventHandler`2&lt;!!S, !!R&gt; eventHandler, !!S sender, !!R eventArgs) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Deferred.TypedEventHandlerExtensions.InvokeAsync``2(Windows.Foundation.TypedEventHandler{``0,``1},``0,``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InvokeAsync(Of S, R) (eventHandler As TypedEventHandler(Of S, R), sender As S, eventArgs As R) As Task" />
        <MemberSignature Language="F#" Value="static member InvokeAsync : Windows.Foundation.TypedEventHandler&lt;'S, 'R (requires 'R :&gt; Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs)&gt; * 'S * 'R -&gt; System.Threading.Tasks.Task (requires 'R :&gt; Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs)" Usage="Microsoft.Toolkit.Uwp.Deferred.TypedEventHandlerExtensions.InvokeAsync (eventHandler, sender, eventArgs)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="S" />
          <TypeParameter Name="R">
            <Constraints>
              <BaseTypeName>Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="eventHandler" Type="Windows.Foundation.TypedEventHandler&lt;S,R&gt;" RefType="this" />
          <Parameter Name="sender" Type="S" />
          <Parameter Name="eventArgs" Type="R" />
        </Parameters>
        <Docs>
          <typeparam name="S">Type of sender.</typeparam>
          <typeparam name="R">
            <see cref="T:System.EventArgs" /> type.</typeparam>
          <param name="eventHandler">
            <see cref="T:Windows.Foundation.TypedEventHandler`2" /> to be invoked.</param>
          <param name="sender">Sender of the event.</param>
          <param name="eventArgs">
            <see cref="T:System.EventArgs" /> instance.</param>
          <summary>
            Use to invoke an async <see cref="T:Windows.Foundation.TypedEventHandler`2" /> using <see cref="T:Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Deferred.TypedEventHandlerExtensions" Member="M:Microsoft.Toolkit.Uwp.Deferred.TypedEventHandlerExtensions.InvokeAsync``2(Windows.Foundation.TypedEventHandler{``0,``1},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Foundation.TypedEventHandler`2" />
      </Targets>
      <Member MemberName="InvokeAsync&lt;S,R&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task InvokeAsync&lt;S,R&gt; (this Windows.Foundation.TypedEventHandler&lt;S,R&gt; eventHandler, S sender, R eventArgs, System.Threading.CancellationToken cancellationToken) where R : Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task InvokeAsync&lt;S, (class Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs) R&gt;(class Windows.Foundation.TypedEventHandler`2&lt;!!S, !!R&gt; eventHandler, !!S sender, !!R eventArgs, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Deferred.TypedEventHandlerExtensions.InvokeAsync``2(Windows.Foundation.TypedEventHandler{``0,``1},``0,``1,System.Threading.CancellationToken)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InvokeAsync(Of S, R) (eventHandler As TypedEventHandler(Of S, R), sender As S, eventArgs As R, cancellationToken As CancellationToken) As Task" />
        <MemberSignature Language="F#" Value="static member InvokeAsync : Windows.Foundation.TypedEventHandler&lt;'S, 'R (requires 'R :&gt; Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs)&gt; * 'S * 'R * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task (requires 'R :&gt; Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs)" Usage="Microsoft.Toolkit.Uwp.Deferred.TypedEventHandlerExtensions.InvokeAsync (eventHandler, sender, eventArgs, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="S" />
          <TypeParameter Name="R">
            <Constraints>
              <BaseTypeName>Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="eventHandler" Type="Windows.Foundation.TypedEventHandler&lt;S,R&gt;" RefType="this" />
          <Parameter Name="sender" Type="S" />
          <Parameter Name="eventArgs" Type="R" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="S">Type of sender.</typeparam>
          <typeparam name="R">
            <see cref="T:System.EventArgs" /> type.</typeparam>
          <param name="eventHandler">
            <see cref="T:Windows.Foundation.TypedEventHandler`2" /> to be invoked.</param>
          <param name="sender">Sender of the event.</param>
          <param name="eventArgs">
            <see cref="T:System.EventArgs" /> instance.</param>
          <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken" /> option.</param>
          <summary>
            Use to invoke an async <see cref="T:Windows.Foundation.TypedEventHandler`2" /> using <see cref="T:Microsoft.Toolkit.Uwp.Deferred.DeferredEventArgs" /> with a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Deferred.TypedEventHandlerExtensions" Member="M:Microsoft.Toolkit.Uwp.Deferred.TypedEventHandlerExtensions.InvokeAsync``2(Windows.Foundation.TypedEventHandler{``0,``1},``0,``1,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="GetLocalized">
        <MemberSignature Language="C#" Value="public static string GetLocalized (this string resourceKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLocalized(string resourceKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetLocalized(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetLocalized (resourceKey As String) As String" />
        <MemberSignature Language="F#" Value="static member GetLocalized : string -&gt; string" Usage="Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetLocalized resourceKey" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resourceKey" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="resourceKey">Resource key to retrieve.</param>
          <summary>
            Retrieves the provided resource for the given key for use independent of the UI thread.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetLocalized(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="GetLocalized">
        <MemberSignature Language="C#" Value="public static string GetLocalized (this string resourceKey, string resourcePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLocalized(string resourceKey, string resourcePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetLocalized(System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetLocalized (resourceKey As String, resourcePath As String) As String" />
        <MemberSignature Language="F#" Value="static member GetLocalized : string * string -&gt; string" Usage="Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetLocalized (resourceKey, resourcePath)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resourceKey" Type="System.String" RefType="this" />
          <Parameter Name="resourcePath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="resourceKey">Resource key to retrieve.</param>
          <param name="resourcePath">Resource path to retrieve.</param>
          <summary>
            Retrieves the provided resource for the given key for use independent of the UI thread.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetLocalized(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="GetViewLocalized">
        <MemberSignature Language="C#" Value="public static string GetViewLocalized (this string resourceKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetViewLocalized(string resourceKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetViewLocalized(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewLocalized (resourceKey As String) As String" />
        <MemberSignature Language="F#" Value="static member GetViewLocalized : string -&gt; string" Usage="Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetViewLocalized resourceKey" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resourceKey" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="resourceKey">Resource key to retrieve.</param>
          <summary>
            Retrieves the provided resource for the current view context.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Extensions.StringExtensions" Member="M:Microsoft.Toolkit.Uwp.Extensions.StringExtensions.GetViewLocalized(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToColor">
        <MemberSignature Language="C#" Value="public static Windows.UI.Color ToColor (this string colorString);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Color ToColor(string colorString) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToColor(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToColor (colorString As String) As Color" />
        <MemberSignature Language="F#" Value="static member ToColor : string -&gt; Windows.UI.Color" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToColor colorString" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="colorString" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="colorString">The XAML color string.</param>
          <summary>
            Creates a <see cref="T:Windows.UI.Color" /> from a XAML color string.
            Any format used in XAML should work.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToColor(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Color" />
      </Targets>
      <Member MemberName="ToHex">
        <MemberSignature Language="C#" Value="public static string ToHex (this Windows.UI.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToHex(valuetype Windows.UI.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHex(Windows.UI.Color)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHex (color As Color) As String" />
        <MemberSignature Language="F#" Value="static member ToHex : Windows.UI.Color -&gt; string" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHex color" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="Windows.UI.Color" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color to convert.</param>
          <summary>
            Converts a <see cref="T:Windows.UI.Color" /> to a hexadecimal string representation.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHex(Windows.UI.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Color" />
      </Targets>
      <Member MemberName="ToHsl">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.HslColor ToHsl (this Windows.UI.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.Uwp.HslColor ToHsl(valuetype Windows.UI.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsl(Windows.UI.Color)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHsl (color As Color) As HslColor" />
        <MemberSignature Language="F#" Value="static member ToHsl : Windows.UI.Color -&gt; Microsoft.Toolkit.Uwp.HslColor" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsl color" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.HslColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="Windows.UI.Color" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The <see cref="T:Windows.UI.Color" /> to convert.</param>
          <summary>
            Converts a <see cref="T:Windows.UI.Color" /> to an <see cref="T:Microsoft.Toolkit.Uwp.HslColor" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsl(Windows.UI.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Color" />
      </Targets>
      <Member MemberName="ToHsv">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.HsvColor ToHsv (this Windows.UI.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.Uwp.HsvColor ToHsv(valuetype Windows.UI.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsv(Windows.UI.Color)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHsv (color As Color) As HsvColor" />
        <MemberSignature Language="F#" Value="static member ToHsv : Windows.UI.Color -&gt; Microsoft.Toolkit.Uwp.HsvColor" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsv color" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.HsvColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="Windows.UI.Color" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The <see cref="T:Windows.UI.Color" /> to convert.</param>
          <summary>
            Converts a <see cref="T:Windows.UI.Color" /> to an <see cref="T:Microsoft.Toolkit.Uwp.HsvColor" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsv(Windows.UI.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Color" />
      </Targets>
      <Member MemberName="ToInt">
        <MemberSignature Language="C#" Value="public static int ToInt (this Windows.UI.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt(valuetype Windows.UI.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToInt(Windows.UI.Color)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToInt (color As Color) As Integer" />
        <MemberSignature Language="F#" Value="static member ToInt : Windows.UI.Color -&gt; int" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToInt color" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="Windows.UI.Color" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color to convert.</param>
          <summary>
            Converts a <see cref="T:Windows.UI.Color" /> to a premultiplied Int32 - 4 byte ARGB structure.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToInt(Windows.UI.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Core.CoreDispatcher" />
      </Targets>
      <Member MemberName="AwaitableRunAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AwaitableRunAsync (this Windows.UI.Core.CoreDispatcher dispatcher, Action function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AwaitableRunAsync(class Windows.UI.Core.CoreDispatcher dispatcher, class System.Action function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync(Windows.UI.Core.CoreDispatcher,System.Action,Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AwaitableRunAsync (dispatcher As CoreDispatcher, function As Action, Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task" />
        <MemberSignature Language="F#" Value="static member AwaitableRunAsync : Windows.UI.Core.CoreDispatcher * Action * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync (dispatcher, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dispatcher" Type="Windows.UI.Core.CoreDispatcher" RefType="this" />
          <Parameter Name="function" Type="System.Action" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <param name="dispatcher">Dispatcher of a thread to run <paramref name="function" /></param>
          <param name="function"> Function to be executed asynchrounously on the given dispatcher</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Extension method for CoreDispatcher. Offering an actual awaitable Task with optional result that will be executed on the given dispatcher
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync(Windows.UI.Core.CoreDispatcher,System.Action,Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Core.CoreDispatcher" />
      </Targets>
      <Member MemberName="AwaitableRunAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AwaitableRunAsync (this Windows.UI.Core.CoreDispatcher dispatcher, Func&lt;System.Threading.Tasks.Task&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AwaitableRunAsync(class Windows.UI.Core.CoreDispatcher dispatcher, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync(Windows.UI.Core.CoreDispatcher,System.Func{System.Threading.Tasks.Task},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AwaitableRunAsync (dispatcher As CoreDispatcher, function As Func(Of Task), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task" />
        <MemberSignature Language="F#" Value="static member AwaitableRunAsync : Windows.UI.Core.CoreDispatcher * Func&lt;System.Threading.Tasks.Task&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync (dispatcher, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dispatcher" Type="Windows.UI.Core.CoreDispatcher" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <param name="dispatcher">Dispatcher of a thread to run <paramref name="function" /></param>
          <param name="function">Asynchrounous function to be executed asynchrounously on the given dispatcher</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Extension method for CoreDispatcher. Offering an actual awaitable Task with optional result that will be executed on the given dispatcher
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync(Windows.UI.Core.CoreDispatcher,System.Func{System.Threading.Tasks.Task},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Core.CoreDispatcher" />
      </Targets>
      <Member MemberName="AwaitableRunAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; AwaitableRunAsync&lt;T&gt; (this Windows.UI.Core.CoreDispatcher dispatcher, Func&lt;T&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; AwaitableRunAsync&lt;T&gt;(class Windows.UI.Core.CoreDispatcher dispatcher, class System.Func`1&lt;!!T&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync``1(Windows.UI.Core.CoreDispatcher,System.Func{``0},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AwaitableRunAsync(Of T) (dispatcher As CoreDispatcher, function As Func(Of T), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member AwaitableRunAsync : Windows.UI.Core.CoreDispatcher * Func&lt;'T&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync (dispatcher, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="dispatcher" Type="Windows.UI.Core.CoreDispatcher" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;T&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <typeparam name="T">Returned data type of the function</typeparam>
          <param name="dispatcher">Dispatcher of a thread to run <paramref name="function" /></param>
          <param name="function"> Function to be executed asynchrounously on the given dispatcher</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Extension method for CoreDispatcher. Offering an actual awaitable Task with optional result that will be executed on the given dispatcher
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync``1(Windows.UI.Core.CoreDispatcher,System.Func{``0},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Core.CoreDispatcher" />
      </Targets>
      <Member MemberName="AwaitableRunAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; AwaitableRunAsync&lt;T&gt; (this Windows.UI.Core.CoreDispatcher dispatcher, Func&lt;System.Threading.Tasks.Task&lt;T&gt;&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; AwaitableRunAsync&lt;T&gt;(class Windows.UI.Core.CoreDispatcher dispatcher, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!T&gt;&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync``1(Windows.UI.Core.CoreDispatcher,System.Func{System.Threading.Tasks.Task{``0}},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AwaitableRunAsync(Of T) (dispatcher As CoreDispatcher, function As Func(Of Task(Of T)), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member AwaitableRunAsync : Windows.UI.Core.CoreDispatcher * Func&lt;System.Threading.Tasks.Task&lt;'T&gt;&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync (dispatcher, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="dispatcher" Type="Windows.UI.Core.CoreDispatcher" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;T&gt;&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <typeparam name="T">Returned data type of the function</typeparam>
          <param name="dispatcher">Dispatcher of a thread to run <paramref name="function" /></param>
          <param name="function">Asynchrounous function to be executed asynchrounously on the given dispatcher</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Extension method for CoreDispatcher. Offering an actual awaitable Task with optional result that will be executed on the given dispatcher
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync``1(Windows.UI.Core.CoreDispatcher,System.Func{System.Threading.Tasks.Task{``0}},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.Core.CoreApplicationView" />
      </Targets>
      <Member MemberName="ExecuteOnUIThreadAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteOnUIThreadAsync (this Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, Action function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteOnUIThreadAsync(class Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, class System.Action function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync(Windows.ApplicationModel.Core.CoreApplicationView,System.Action,Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteOnUIThreadAsync (viewToExecuteOn As CoreApplicationView, function As Action, Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task" />
        <MemberSignature Language="F#" Value="static member ExecuteOnUIThreadAsync : Windows.ApplicationModel.Core.CoreApplicationView * Action * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync (viewToExecuteOn, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="viewToExecuteOn" Type="Windows.ApplicationModel.Core.CoreApplicationView" RefType="this" />
          <Parameter Name="function" Type="System.Action" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <param name="viewToExecuteOn">View for the <paramref name="function" />  to be executed on </param>
          <param name="function">Asynchronous function to be executed asynchronously on UI thread</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Executes the given function asynchronously on given view's UI thread. Default view is the main view.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync(Windows.ApplicationModel.Core.CoreApplicationView,System.Action,Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.Core.CoreApplicationView" />
      </Targets>
      <Member MemberName="ExecuteOnUIThreadAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteOnUIThreadAsync (this Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, Func&lt;System.Threading.Tasks.Task&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteOnUIThreadAsync(class Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{System.Threading.Tasks.Task},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteOnUIThreadAsync (viewToExecuteOn As CoreApplicationView, function As Func(Of Task), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task" />
        <MemberSignature Language="F#" Value="static member ExecuteOnUIThreadAsync : Windows.ApplicationModel.Core.CoreApplicationView * Func&lt;System.Threading.Tasks.Task&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync (viewToExecuteOn, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="viewToExecuteOn" Type="Windows.ApplicationModel.Core.CoreApplicationView" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <param name="viewToExecuteOn">View for the <paramref name="function" />  to be executed on </param>
          <param name="function">Asynchronous function to be executed asynchronously on UI thread</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Executes the given function asynchronously on given view's UI thread. Default view is the main view.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{System.Threading.Tasks.Task},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.Core.CoreApplicationView" />
      </Targets>
      <Member MemberName="ExecuteOnUIThreadAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ExecuteOnUIThreadAsync&lt;T&gt; (this Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, Func&lt;T&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ExecuteOnUIThreadAsync&lt;T&gt;(class Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, class System.Func`1&lt;!!T&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync``1(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{``0},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteOnUIThreadAsync(Of T) (viewToExecuteOn As CoreApplicationView, function As Func(Of T), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ExecuteOnUIThreadAsync : Windows.ApplicationModel.Core.CoreApplicationView * Func&lt;'T&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync (viewToExecuteOn, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="viewToExecuteOn" Type="Windows.ApplicationModel.Core.CoreApplicationView" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;T&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <typeparam name="T">Returned data type of the function</typeparam>
          <param name="viewToExecuteOn">View for the <paramref name="function" />  to be executed on </param>
          <param name="function">Synchronous function with return type <typeparamref name="T" /> to be executed on UI thread</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Executes the given function asynchronously on given view's UI thread. Default view is the main view.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync``1(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{``0},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.Core.CoreApplicationView" />
      </Targets>
      <Member MemberName="ExecuteOnUIThreadAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ExecuteOnUIThreadAsync&lt;T&gt; (this Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, Func&lt;System.Threading.Tasks.Task&lt;T&gt;&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ExecuteOnUIThreadAsync&lt;T&gt;(class Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!T&gt;&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync``1(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{System.Threading.Tasks.Task{``0}},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteOnUIThreadAsync(Of T) (viewToExecuteOn As CoreApplicationView, function As Func(Of Task(Of T)), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ExecuteOnUIThreadAsync : Windows.ApplicationModel.Core.CoreApplicationView * Func&lt;System.Threading.Tasks.Task&lt;'T&gt;&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync (viewToExecuteOn, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="viewToExecuteOn" Type="Windows.ApplicationModel.Core.CoreApplicationView" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;T&gt;&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <typeparam name="T">Returned data type of the function</typeparam>
          <param name="viewToExecuteOn">View for the <paramref name="function" />  to be executed on </param>
          <param name="function">Asynchronous function to be executed asynchronously on UI thread</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Executes the given function asynchronously on given view's UI thread. Default view is the main view.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync``1(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{System.Threading.Tasks.Task{``0}},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.PackageVersion" />
      </Targets>
      <Member MemberName="ToFormattedString">
        <MemberSignature Language="C#" Value="public static string ToFormattedString (this Windows.ApplicationModel.PackageVersion packageVersion);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToFormattedString(valuetype Windows.ApplicationModel.PackageVersion packageVersion) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToFormattedString(Windows.ApplicationModel.PackageVersion)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFormattedString (packageVersion As PackageVersion) As String" />
        <MemberSignature Language="F#" Value="static member ToFormattedString : Windows.ApplicationModel.PackageVersion -&gt; string" Usage="Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToFormattedString packageVersion" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="packageVersion" Type="Windows.ApplicationModel.PackageVersion" RefType="this" />
        </Parameters>
        <Docs>
          <param name="packageVersion">The <see cref="T:Windows.ApplicationModel.PackageVersion" /> to convert to a string</param>
          <summary>
            Returns a string representation of a version with the format 'Major.Minor.Build.Revision'.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToFormattedString(Windows.ApplicationModel.PackageVersion)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToPackageVersion">
        <MemberSignature Language="C#" Value="public static Windows.ApplicationModel.PackageVersion ToPackageVersion (this string formattedVersionNumber);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.ApplicationModel.PackageVersion ToPackageVersion(string formattedVersionNumber) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToPackageVersion(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToPackageVersion (formattedVersionNumber As String) As PackageVersion" />
        <MemberSignature Language="F#" Value="static member ToPackageVersion : string -&gt; Windows.ApplicationModel.PackageVersion" Usage="Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToPackageVersion formattedVersionNumber" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.ApplicationModel.PackageVersion</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formattedVersionNumber" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="formattedVersionNumber">Version string of the format 'Major.Minor.Build.Revision'</param>
          <summary>
            Converts a string representation of a version number to an equivalent <see cref="T:Windows.ApplicationModel.PackageVersion" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToPackageVersion(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="FileExistsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; FileExistsAsync (this Windows.Storage.StorageFolder folder, string fileName, bool isRecursive = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; FileExistsAsync(class Windows.Storage.StorageFolder folder, string fileName, bool isRecursive) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.FileExistsAsync(Windows.Storage.StorageFolder,System.String,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FileExistsAsync (folder As StorageFolder, fileName As String, Optional isRecursive As Boolean = false) As Task(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member FileExistsAsync : Windows.Storage.StorageFolder * string * bool -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.FileExistsAsync (folder, fileName, isRecursive)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="folder" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="isRecursive" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="folder">
            The <see cref="T:Windows.Storage.StorageFolder" /> to look for the file in.
            </param>
          <param name="fileName">
            The <see cref="T:System.String" /> filename of the file to search for. Must include the file extension and is not case-sensitive.
            </param>
          <param name="isRecursive">
            The <see cref="T:System.Boolean" />, indicating if the subfolders should also be searched through.
            </param>
          <summary>
            Gets a value indicating whether a file exists in the current folder.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.FileExistsAsync(Windows.Storage.StorageFolder,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFile" />
      </Targets>
      <Member MemberName="ReadBytesAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;byte[]&gt; ReadBytesAsync (this Windows.Storage.StorageFile file);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ReadBytesAsync(class Windows.Storage.StorageFile file) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesAsync(Windows.Storage.StorageFile)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadBytesAsync (file As StorageFile) As Task(Of Byte())" />
        <MemberSignature Language="F#" Value="static member ReadBytesAsync : Windows.Storage.StorageFile -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesAsync file" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="file" Type="Windows.Storage.StorageFile" RefType="this" />
        </Parameters>
        <Docs>
          <param name="file">
            The <see cref="T:Windows.Storage.StorageFile" />.
            </param>
          <summary>
            Gets an array of bytes from a <see cref="T:Windows.Storage.StorageFile" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesAsync(Windows.Storage.StorageFile)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="ReadBytesFromFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;byte[]&gt; ReadBytesFromFileAsync (this Windows.Storage.StorageFolder fileLocation, string fileName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ReadBytesFromFileAsync(class Windows.Storage.StorageFolder fileLocation, string fileName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesFromFileAsync(Windows.Storage.StorageFolder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadBytesFromFileAsync (fileLocation As StorageFolder, fileName As String) As Task(Of Byte())" />
        <MemberSignature Language="F#" Value="static member ReadBytesFromFileAsync : Windows.Storage.StorageFolder * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesFromFileAsync (fileLocation, fileName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="fileLocation" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="fileLocation">
            The <see cref="T:Windows.Storage.StorageFolder" /> to save the file in.
            </param>
          <param name="fileName">
            The relative <see cref="T:System.String" /> file path.
            </param>
          <summary>
            Gets an array of bytes from a <see cref="T:Windows.Storage.StorageFile" /> located in the given <see cref="T:Windows.Storage.StorageFolder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesFromFileAsync(Windows.Storage.StorageFolder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="ReadTextFromFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadTextFromFileAsync (this Windows.Storage.StorageFolder fileLocation, string fileName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadTextFromFileAsync(class Windows.Storage.StorageFolder fileLocation, string fileName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadTextFromFileAsync(Windows.Storage.StorageFolder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadTextFromFileAsync (fileLocation As StorageFolder, fileName As String) As Task(Of String)" />
        <MemberSignature Language="F#" Value="static member ReadTextFromFileAsync : Windows.Storage.StorageFolder * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadTextFromFileAsync (fileLocation, fileName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="fileLocation" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="fileLocation">
            The <see cref="T:Windows.Storage.StorageFolder" /> to save the file in.
            </param>
          <param name="fileName">
            The relative <see cref="T:System.String" /> file path.
            </param>
          <summary>
            Gets a string value from a <see cref="T:Windows.Storage.StorageFile" /> located in the given <see cref="T:Windows.Storage.StorageFolder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadTextFromFileAsync(Windows.Storage.StorageFolder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="WriteBytesToFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt; WriteBytesToFileAsync (this Windows.Storage.StorageFolder fileLocation, byte[] bytes, string fileName, Windows.Storage.CreationCollisionOption options = Windows.Storage.CreationCollisionOption.ReplaceExisting);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.StorageFile&gt; WriteBytesToFileAsync(class Windows.Storage.StorageFolder fileLocation, unsigned int8[] bytes, string fileName, valuetype Windows.Storage.CreationCollisionOption options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteBytesToFileAsync(Windows.Storage.StorageFolder,System.Byte[],System.String,Windows.Storage.CreationCollisionOption)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteBytesToFileAsync (fileLocation As StorageFolder, bytes As Byte(), fileName As String, Optional options As CreationCollisionOption = Windows.Storage.CreationCollisionOption.ReplaceExisting) As Task(Of StorageFile)" />
        <MemberSignature Language="F#" Value="static member WriteBytesToFileAsync : Windows.Storage.StorageFolder * byte[] * string * Windows.Storage.CreationCollisionOption -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteBytesToFileAsync (fileLocation, bytes, fileName, options)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="fileLocation" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="bytes" Type="System.Byte[]" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="options" Type="Windows.Storage.CreationCollisionOption" />
        </Parameters>
        <Docs>
          <param name="fileLocation">
            The <see cref="T:Windows.Storage.StorageFolder" /> to save the file in.
            </param>
          <param name="bytes">
            The <see cref="T:System.Byte" /> array to save to the file.
            </param>
          <param name="fileName">
            The <see cref="T:System.String" /> name for the file.
            </param>
          <param name="options">
            The creation collision options. Default is ReplaceExisting.
            </param>
          <summary>
            Saves an array of bytes to a <see cref="T:Windows.Storage.StorageFile" /> in the given <see cref="T:Windows.Storage.StorageFolder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteBytesToFileAsync(Windows.Storage.StorageFolder,System.Byte[],System.String,Windows.Storage.CreationCollisionOption)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="WriteTextToFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt; WriteTextToFileAsync (this Windows.Storage.StorageFolder fileLocation, string text, string fileName, Windows.Storage.CreationCollisionOption options = Windows.Storage.CreationCollisionOption.ReplaceExisting);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.StorageFile&gt; WriteTextToFileAsync(class Windows.Storage.StorageFolder fileLocation, string text, string fileName, valuetype Windows.Storage.CreationCollisionOption options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteTextToFileAsync(Windows.Storage.StorageFolder,System.String,System.String,Windows.Storage.CreationCollisionOption)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteTextToFileAsync (fileLocation As StorageFolder, text As String, fileName As String, Optional options As CreationCollisionOption = Windows.Storage.CreationCollisionOption.ReplaceExisting) As Task(Of StorageFile)" />
        <MemberSignature Language="F#" Value="static member WriteTextToFileAsync : Windows.Storage.StorageFolder * string * string * Windows.Storage.CreationCollisionOption -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteTextToFileAsync (fileLocation, text, fileName, options)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="fileLocation" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="options" Type="Windows.Storage.CreationCollisionOption" />
        </Parameters>
        <Docs>
          <param name="fileLocation">
            The <see cref="T:Windows.Storage.StorageFolder" /> to save the file in.
            </param>
          <param name="text">
            The <see cref="T:System.String" /> value to save to the file.
            </param>
          <param name="fileName">
            The <see cref="T:System.String" /> name for the file.
            </param>
          <param name="options">
            The creation collision options. Default is ReplaceExisting.
            </param>
          <summary>
            Saves a string value to a <see cref="T:Windows.Storage.StorageFile" /> in the given <see cref="T:Windows.Storage.StorageFolder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteTextToFileAsync(Windows.Storage.StorageFolder,System.String,System.String,Windows.Storage.CreationCollisionOption)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Uri" />
      </Targets>
      <Member MemberName="GetHttpStreamAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt; GetHttpStreamAsync (this Uri uri, System.Threading.CancellationToken cancellationToken = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.Streams.IRandomAccessStream&gt; GetHttpStreamAsync(class System.Uri uri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHttpStreamAsync (uri As Uri, Optional cancellationToken As CancellationToken = null) As Task(Of IRandomAccessStream)" />
        <MemberSignature Language="F#" Value="static member GetHttpStreamAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamAsync (uri, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="uri" Type="System.Uri" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="uri">Uri to request.</param>
          <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used to cancel the operation.</param>
          <summary>
            Gets the response stream returned by a HTTP get request.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StreamHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Uri" />
      </Targets>
      <Member MemberName="GetHttpStreamToStorageFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task GetHttpStreamToStorageFileAsync (this Uri uri, Windows.Storage.StorageFile targetFile);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task GetHttpStreamToStorageFileAsync(class System.Uri uri, class Windows.Storage.StorageFile targetFile) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHttpStreamToStorageFileAsync (uri As Uri, targetFile As StorageFile) As Task" />
        <MemberSignature Language="F#" Value="static member GetHttpStreamToStorageFileAsync : Uri * Windows.Storage.StorageFile -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamToStorageFileAsync (uri, targetFile)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="uri" Type="System.Uri" RefType="this" />
          <Parameter Name="targetFile" Type="Windows.Storage.StorageFile" />
        </Parameters>
        <Docs>
          <param name="uri">Uri to request.</param>
          <param name="targetFile">StorageFile to save the stream to.</param>
          <summary>
            Gets the response stream returned by a HTTP get request and save it to a local file.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StreamHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.Streams.IRandomAccessStream" />
      </Targets>
      <Member MemberName="ReadTextAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadTextAsync (this Windows.Storage.Streams.IRandomAccessStream stream, System.Text.Encoding encoding = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadTextAsync(class Windows.Storage.Streams.IRandomAccessStream stream, class System.Text.Encoding encoding) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadTextAsync (stream As IRandomAccessStream, Optional encoding As Encoding = null) As Task(Of String)" />
        <MemberSignature Language="F#" Value="static member ReadTextAsync : Windows.Storage.Streams.IRandomAccessStream * System.Text.Encoding -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.ReadTextAsync (stream, encoding)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="Windows.Storage.Streams.IRandomAccessStream" RefType="this" />
          <Parameter Name="encoding" Type="System.Text.Encoding" />
        </Parameters>
        <Docs>
          <param name="stream">Stream to read from.</param>
          <param name="encoding">Encoding to use. If set to null, ASCII will be used.</param>
          <summary>
            Reads stream content as a string.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StreamHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Animation.Storyboard" />
      </Targets>
      <Member MemberName="BeginAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task BeginAsync (this Windows.UI.Xaml.Media.Animation.Storyboard storyboard);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task BeginAsync(class Windows.UI.Xaml.Media.Animation.Storyboard storyboard) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.BeginAsync(Windows.UI.Xaml.Media.Animation.Storyboard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BeginAsync (storyboard As Storyboard) As Task" />
        <MemberSignature Language="F#" Value="static member BeginAsync : Windows.UI.Xaml.Media.Animation.Storyboard -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.BeginAsync storyboard" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="storyboard" Type="Windows.UI.Xaml.Media.Animation.Storyboard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="storyboard">The storyboard to be started</param>
          <summary>
            Begins a Storyboard animation and returns a task that completes when the
            animation is complete
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.BeginAsync(Windows.UI.Xaml.Media.Animation.Storyboard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Blur">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Blur (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, double value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Blur(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float64 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Blur (animationSet As AnimationSet, Optional value As Double = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Blur : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * double * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur (animationSet, value, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="value">The blur amount.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="easingType">The easing function</param>
          <param name="easingMode">The easing mode</param>
          <summary>
            Animates the gaussian blur of the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="Blur">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Blur (this Windows.UI.Xaml.FrameworkElement associatedObject, double value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Blur(class Windows.UI.Xaml.FrameworkElement associatedObject, float64 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Blur (associatedObject As FrameworkElement, Optional value As Double = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Blur : Windows.UI.Xaml.FrameworkElement * double * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur (associatedObject, value, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The associated object.</param>
          <param name="value">The blur amount.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="easingType">The easing function</param>
          <param name="easingMode">The easing mode</param>
          <summary>
            Animates the gaussian blur of the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Fade">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Fade (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Fade(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float32 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Fade (animationSet As AnimationSet, Optional value As Single = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Fade : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade (animationSet, value, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="value">The fade value, between 0 and 1.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <param name="easingMode">The EasingMode to use to interpolate between keyframes.</param>
          <summary>
            Animates the opacity of the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="Fade">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Fade (this Windows.UI.Xaml.UIElement associatedObject, float value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Fade(class Windows.UI.Xaml.UIElement associatedObject, float32 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade(Windows.UI.Xaml.UIElement,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Fade (associatedObject As UIElement, Optional value As Single = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Fade : Windows.UI.Xaml.UIElement * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade (associatedObject, value, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The UI Element to change the opacity of.</param>
          <param name="value">The fade value, between 0 and 1.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <param name="easingMode">The easing mode to use to interpolate between keyframes.</param>
          <summary>
            Animates the opacity of the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade(Windows.UI.Xaml.UIElement,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Light">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Light (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, double distance = 0, double duration = 500, double delay = 0, Windows.UI.Color? color = default, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Light(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float64 distance, float64 duration, float64 delay, valuetype System.Nullable`1&lt;valuetype Windows.UI.Color&gt; color, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,System.Nullable{Windows.UI.Color},Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Light (animationSet As AnimationSet, Optional distance As Double = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional color As Nullable(Of Color) = null, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Light : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * double * double * double * Nullable&lt;Windows.UI.Color&gt; * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light (animationSet, distance, duration, delay, color, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="distance" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="color" Type="System.Nullable&lt;Windows.UI.Color&gt;" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="distance">The distance of the light.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="color">The color of the spotlight.</param>
          <param name="easingType">The easing function</param>
          <param name="easingMode">The easing mode</param>
          <summary>
            Animates a point light and it's distance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,System.Nullable{Windows.UI.Color},Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="Light">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Light (this Windows.UI.Xaml.FrameworkElement associatedObject, double distance = 0, double duration = 500, double delay = 0, Windows.UI.Color? color = default, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Light(class Windows.UI.Xaml.FrameworkElement associatedObject, float64 distance, float64 duration, float64 delay, valuetype System.Nullable`1&lt;valuetype Windows.UI.Color&gt; color, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,System.Nullable{Windows.UI.Color},Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Light (associatedObject As FrameworkElement, Optional distance As Double = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional color As Nullable(Of Color) = null, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Light : Windows.UI.Xaml.FrameworkElement * double * double * double * Nullable&lt;Windows.UI.Color&gt; * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light (associatedObject, distance, duration, delay, color, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="distance" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="color" Type="System.Nullable&lt;Windows.UI.Color&gt;" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The associated object.</param>
          <param name="distance">The value.</param>
          <param name="duration">The duration.</param>
          <param name="delay">The delay.</param>
          <param name="color">The color of the spotlight.</param>
          <param name="easingType">The easing function</param>
          <param name="easingMode">The easing mode</param>
          <summary>
            Animates a point light and it's distance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,System.Nullable{Windows.UI.Color},Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Offset">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Offset (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float offsetX = 0, float offsetY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Offset(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float32 offsetX, float32 offsetY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Offset (animationSet As AnimationSet, Optional offsetX As Single = 0, Optional offsetY As Single = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Offset : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset (animationSet, offsetX, offsetY, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="offsetX" Type="System.Single" />
          <Parameter Name="offsetY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="offsetX">The offset on the x axis.</param>
          <param name="offsetY">The offset on the y axis.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <param name="easingMode">The EasingMode to use to interpolate between keyframes.</param>
          <summary>
            Animates the offset of the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="Offset">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Offset (this Windows.UI.Xaml.UIElement associatedObject, float offsetX = 0, float offsetY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Offset(class Windows.UI.Xaml.UIElement associatedObject, float32 offsetX, float32 offsetY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Offset (associatedObject As UIElement, Optional offsetX As Single = 0, Optional offsetY As Single = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Offset : Windows.UI.Xaml.UIElement * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset (associatedObject, offsetX, offsetY, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="offsetX" Type="System.Single" />
          <Parameter Name="offsetY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The specified UI Element.</param>
          <param name="offsetX">The offset on the x axis.</param>
          <param name="offsetY">The offset on the y axis.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <param name="easingMode">The EasingMode to use to interpolate between keyframes.</param>
          <summary>
            Animates the offset of the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Rotate">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Rotate (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float value = 0, float centerX = 0, float centerY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Rotate(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float32 value, float32 centerX, float32 centerY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Rotate (animationSet As AnimationSet, Optional value As Single = 0, Optional centerX As Single = 0, Optional centerY As Single = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Rotate : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * single * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate (animationSet, value, centerX, centerY, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
          <Parameter Name="centerX" Type="System.Single" />
          <Parameter Name="centerY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="value">The value in degrees to rotate.</param>
          <param name="centerX">The center x in pixels.</param>
          <param name="centerY">The center y in pixels.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <param name="easingMode">The EasingMode to use to interpolate between keyframes.</param>
          <summary>
            Animates the rotation in degrees of the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="Rotate">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Rotate (this Windows.UI.Xaml.UIElement associatedObject, float value = 0, float centerX = 0, float centerY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Rotate(class Windows.UI.Xaml.UIElement associatedObject, float32 value, float32 centerX, float32 centerY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Rotate (associatedObject As UIElement, Optional value As Single = 0, Optional centerX As Single = 0, Optional centerY As Single = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Rotate : Windows.UI.Xaml.UIElement * single * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate (associatedObject, value, centerX, centerY, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
          <Parameter Name="centerX" Type="System.Single" />
          <Parameter Name="centerY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The UI Element to rotate.</param>
          <param name="value">The value in degrees to rotate.</param>
          <param name="centerX">The center x in pixels.</param>
          <param name="centerY">The center y in pixels.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <param name="easingMode">EasingMode used to interpolate between keyframes.</param>
          <summary>
            Animates the rotation in degrees of the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Saturation">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Saturation (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, double value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Saturation(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float64 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Saturation (animationSet As AnimationSet, Optional value As Double = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Saturation : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * double * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation (animationSet, value, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="value">The value. 0 is desaturated, 1 is saturated.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds.</param>
          <param name="easingType">The <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.EasingType" /></param>
          <param name="easingMode">The <see cref="T:Windows.UI.Xaml.Media.Animation.EasingMode" /></param>
          <summary>
            Saturates the visual within the animation set.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="Saturation">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Saturation (this Windows.UI.Xaml.FrameworkElement associatedObject, double value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Saturation(class Windows.UI.Xaml.FrameworkElement associatedObject, float64 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Saturation (associatedObject As FrameworkElement, Optional value As Double = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Saturation : Windows.UI.Xaml.FrameworkElement * double * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation (associatedObject, value, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The associated object.</param>
          <param name="value">The value, between 0 and 1. 0 is desaturated, 1 is saturated.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds.</param>
          <param name="easingType">The <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.EasingType" /></param>
          <param name="easingMode">The <see cref="T:Windows.UI.Xaml.Media.Animation.EasingMode" /></param>
          <summary>
            Saturates the FrameworkElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Scale">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Scale (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float scaleX = 1, float scaleY = 1, float centerX = 0, float centerY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Scale(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float32 scaleX, float32 scaleY, float32 centerX, float32 centerY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scale (animationSet As AnimationSet, Optional scaleX As Single = 1, Optional scaleY As Single = 1, Optional centerX As Single = 0, Optional centerY As Single = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Scale : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * single * single * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale (animationSet, scaleX, scaleY, centerX, centerY, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="scaleX" Type="System.Single" />
          <Parameter Name="scaleY" Type="System.Single" />
          <Parameter Name="centerX" Type="System.Single" />
          <Parameter Name="centerY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animationSet object.</param>
          <param name="scaleX">The scale on the x axis.</param>
          <param name="scaleY">The scale on the y axis.</param>
          <param name="centerX">The center x in pixels.</param>
          <param name="centerY">The center y in pixels.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <param name="easingMode">The EasingMode to use to interpolate between keyframes.</param>
          <summary>
            Animates the scale of the specified UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="Scale">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Scale (this Windows.UI.Xaml.UIElement associatedObject, float scaleX = 1, float scaleY = 1, float centerX = 0, float centerY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Windows.UI.Xaml.Media.Animation.EasingMode easingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Scale(class Windows.UI.Xaml.UIElement associatedObject, float32 scaleX, float32 scaleY, float32 centerX, float32 centerY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType, valuetype Windows.UI.Xaml.Media.Animation.EasingMode easingMode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scale (associatedObject As UIElement, Optional scaleX As Single = 1, Optional scaleY As Single = 1, Optional centerX As Single = 0, Optional centerY As Single = 0, Optional duration As Double = 500, Optional delay As Double = 0, Optional easingType As EasingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default, Optional easingMode As EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut) As AnimationSet" />
        <MemberSignature Language="F#" Value="static member Scale : Windows.UI.Xaml.UIElement * single * single * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType * Windows.UI.Xaml.Media.Animation.EasingMode -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale (associatedObject, scaleX, scaleY, centerX, centerY, duration, delay, easingType, easingMode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="scaleX" Type="System.Single" />
          <Parameter Name="scaleY" Type="System.Single" />
          <Parameter Name="centerX" Type="System.Single" />
          <Parameter Name="centerY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
          <Parameter Name="easingMode" Type="Windows.UI.Xaml.Media.Animation.EasingMode" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The associated UIElement.</param>
          <param name="scaleX">The scale on the x axis.</param>
          <param name="scaleY">The scale on the y axis.</param>
          <param name="centerX">The center x in pixels.</param>
          <param name="centerY">The center y in pixels.</param>
          <param name="duration">The duration in millisecond.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <param name="easingMode">The EasingMode to use to interpolate between keyframes.</param>
          <summary>
            Animates the scale of the specified UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType,Windows.UI.Xaml.Media.Animation.EasingMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.Page" />
      </Targets>
      <Member MemberName="AttachAnchorElementForConnectedAnimation">
        <MemberSignature Language="C#" Value="public static void AttachAnchorElementForConnectedAnimation (this Windows.UI.Xaml.Controls.Page page, Windows.UI.Xaml.UIElement element, Windows.UI.Xaml.UIElement anchor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AttachAnchorElementForConnectedAnimation(class Windows.UI.Xaml.Controls.Page page, class Windows.UI.Xaml.UIElement element, class Windows.UI.Xaml.UIElement anchor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.AttachAnchorElementForConnectedAnimation(Windows.UI.Xaml.Controls.Page,Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AttachAnchorElementForConnectedAnimation (page As Page, element As UIElement, anchor As UIElement)" />
        <MemberSignature Language="F#" Value="static member AttachAnchorElementForConnectedAnimation : Windows.UI.Xaml.Controls.Page * Windows.UI.Xaml.UIElement * Windows.UI.Xaml.UIElement -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Connected.AttachAnchorElementForConnectedAnimation (page, element, anchor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="page" Type="Windows.UI.Xaml.Controls.Page" RefType="this" />
          <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" />
          <Parameter Name="anchor" Type="Windows.UI.Xaml.UIElement" />
        </Parameters>
        <Docs>
          <param name="page">the parent page of the elements</param>
          <param name="element">the main element that will be animating</param>
          <param name="anchor">the element that will animate alongside the main element</param>
          <summary>
            Add an anchor element to animate alongside the main element
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Connected" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.AttachAnchorElementForConnectedAnimation(Windows.UI.Xaml.Controls.Page,Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.Page" />
      </Targets>
      <Member MemberName="RegisterElementForConnectedAnimation">
        <MemberSignature Language="C#" Value="public static void RegisterElementForConnectedAnimation (this Windows.UI.Xaml.Controls.Page page, string key, Windows.UI.Xaml.UIElement element, System.Collections.Generic.IEnumerable&lt;Windows.UI.Xaml.UIElement&gt; anchors = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterElementForConnectedAnimation(class Windows.UI.Xaml.Controls.Page page, string key, class Windows.UI.Xaml.UIElement element, class System.Collections.Generic.IEnumerable`1&lt;class Windows.UI.Xaml.UIElement&gt; anchors) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.RegisterElementForConnectedAnimation(Windows.UI.Xaml.Controls.Page,System.String,Windows.UI.Xaml.UIElement,System.Collections.Generic.IEnumerable{Windows.UI.Xaml.UIElement})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RegisterElementForConnectedAnimation (page As Page, key As String, element As UIElement, Optional anchors As IEnumerable(Of UIElement) = null)" />
        <MemberSignature Language="F#" Value="static member RegisterElementForConnectedAnimation : Windows.UI.Xaml.Controls.Page * string * Windows.UI.Xaml.UIElement * seq&lt;Windows.UI.Xaml.UIElement&gt; -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Connected.RegisterElementForConnectedAnimation (page, key, element, anchors)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="page" Type="Windows.UI.Xaml.Controls.Page" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" />
          <Parameter Name="anchors" Type="System.Collections.Generic.IEnumerable&lt;Windows.UI.Xaml.UIElement&gt;" />
        </Parameters>
        <Docs>
          <param name="page">The parent page of the element</param>
          <param name="key">The key of the element (same key will need to be used on another page)</param>
          <param name="element">The element to animate</param>
          <param name="anchors">Any other elements to animate alongside the element</param>
          <summary>
            Registers an <see cref="T:Windows.UI.Xaml.UIElement" /> with the ConnectedAnimations service to run automatically on page navigation
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Connected" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.RegisterElementForConnectedAnimation(Windows.UI.Xaml.Controls.Page,System.String,Windows.UI.Xaml.UIElement,System.Collections.Generic.IEnumerable{Windows.UI.Xaml.UIElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.Page" />
      </Targets>
      <Member MemberName="RegisterListItemForConnectedAnimation">
        <MemberSignature Language="C#" Value="public static void RegisterListItemForConnectedAnimation (this Windows.UI.Xaml.Controls.Page page, Windows.UI.Xaml.Controls.ListViewBase listViewBase, string key, string elementName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterListItemForConnectedAnimation(class Windows.UI.Xaml.Controls.Page page, class Windows.UI.Xaml.Controls.ListViewBase listViewBase, string key, string elementName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.RegisterListItemForConnectedAnimation(Windows.UI.Xaml.Controls.Page,Windows.UI.Xaml.Controls.ListViewBase,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RegisterListItemForConnectedAnimation (page As Page, listViewBase As ListViewBase, key As String, elementName As String)" />
        <MemberSignature Language="F#" Value="static member RegisterListItemForConnectedAnimation : Windows.UI.Xaml.Controls.Page * Windows.UI.Xaml.Controls.ListViewBase * string * string -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Connected.RegisterListItemForConnectedAnimation (page, listViewBase, key, elementName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="page" Type="Windows.UI.Xaml.Controls.Page" RefType="this" />
          <Parameter Name="listViewBase" Type="Windows.UI.Xaml.Controls.ListViewBase" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="elementName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="page">The parent page of the list control</param>
          <param name="listViewBase">The list control (such as ListView or GridView)</param>
          <param name="key">The key of the element (same key will need to be used on another page)</param>
          <param name="elementName">The name of the element in the DataTemplate that should be animated</param>
          <summary>
            Registers an element (part of a DataTemplate in a list control)
            with the ConnectedAnimations service to run automatically on page navigation
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Connected" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.RegisterListItemForConnectedAnimation(Windows.UI.Xaml.Controls.Page,Windows.UI.Xaml.Controls.ListViewBase,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.Page" />
      </Targets>
      <Member MemberName="RemoveAnchoredElementForConnectedAnimation">
        <MemberSignature Language="C#" Value="public static void RemoveAnchoredElementForConnectedAnimation (this Windows.UI.Xaml.Controls.Page page, Windows.UI.Xaml.UIElement element, Windows.UI.Xaml.UIElement anchor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveAnchoredElementForConnectedAnimation(class Windows.UI.Xaml.Controls.Page page, class Windows.UI.Xaml.UIElement element, class Windows.UI.Xaml.UIElement anchor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.RemoveAnchoredElementForConnectedAnimation(Windows.UI.Xaml.Controls.Page,Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveAnchoredElementForConnectedAnimation (page As Page, element As UIElement, anchor As UIElement)" />
        <MemberSignature Language="F#" Value="static member RemoveAnchoredElementForConnectedAnimation : Windows.UI.Xaml.Controls.Page * Windows.UI.Xaml.UIElement * Windows.UI.Xaml.UIElement -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Connected.RemoveAnchoredElementForConnectedAnimation (page, element, anchor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="page" Type="Windows.UI.Xaml.Controls.Page" RefType="this" />
          <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" />
          <Parameter Name="anchor" Type="Windows.UI.Xaml.UIElement" />
        </Parameters>
        <Docs>
          <param name="page">the parent page of the elements</param>
          <param name="element">the main element that will be animating</param>
          <param name="anchor">the element that should not animate alongside the main element</param>
          <summary>
            Remove an anchor element from animating alongside the main element
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Connected" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.RemoveAnchoredElementForConnectedAnimation(Windows.UI.Xaml.Controls.Page,Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.Frame" />
      </Targets>
      <Member MemberName="SetListDataItemForNextConnectedAnimation">
        <MemberSignature Language="C#" Value="public static void SetListDataItemForNextConnectedAnimation (this Windows.UI.Xaml.Controls.Frame frame, object item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetListDataItemForNextConnectedAnimation(class Windows.UI.Xaml.Controls.Frame frame, object item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.SetListDataItemForNextConnectedAnimation(Windows.UI.Xaml.Controls.Frame,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetListDataItemForNextConnectedAnimation (frame As Frame, item As Object)" />
        <MemberSignature Language="F#" Value="static member SetListDataItemForNextConnectedAnimation : Windows.UI.Xaml.Controls.Frame * obj -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Connected.SetListDataItemForNextConnectedAnimation (frame, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="frame" Type="Windows.UI.Xaml.Controls.Frame" RefType="this" />
          <Parameter Name="item" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="frame">The Frame handling the navigation</param>
          <param name="item">The data item from a list control to be animated during next frame navigation</param>
          <summary>
            Sets the object that will be used during next Frame navigation for
            Connected Animation involving a list control (item must be an element of
            ListViewBase.ItemsSource collection).
            Useful if the parameter used during page navigation is different from the
            data item in the list control. Also useful during back navigation if the
            item navigating back to is different from the item that was navigated from.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Connected" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.SetListDataItemForNextConnectedAnimation(Windows.UI.Xaml.Controls.Frame,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.Frame" />
      </Targets>
      <Member MemberName="SetListDataItemForNextConnectedAnnimation">
        <MemberSignature Language="C#" Value="public static void SetListDataItemForNextConnectedAnnimation (this Windows.UI.Xaml.Controls.Frame frame, object item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetListDataItemForNextConnectedAnnimation(class Windows.UI.Xaml.Controls.Frame frame, object item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.SetListDataItemForNextConnectedAnnimation(Windows.UI.Xaml.Controls.Frame,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetListDataItemForNextConnectedAnnimation (frame As Frame, item As Object)" />
        <MemberSignature Language="F#" Value="static member SetListDataItemForNextConnectedAnnimation : Windows.UI.Xaml.Controls.Frame * obj -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Connected.SetListDataItemForNextConnectedAnnimation (frame, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="frame" Type="Windows.UI.Xaml.Controls.Frame" RefType="this" />
          <Parameter Name="item" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="frame">The Frame handling the navigation</param>
          <param name="item">The data item from a list control to be animated during next frame navigation</param>
          <summary>
            Sets the object that will be used during next Frame navigation for
            Connected Animation involving a list control (item must be an element of
            ListViewBase.ItemsSource collection).
            Useful if the parameter used during page navigation is different from the
            data item in the list control. Also useful during back navigation if the
            item navigating back to is different from the item that was navigated from.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Connected" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.SetListDataItemForNextConnectedAnnimation(Windows.UI.Xaml.Controls.Frame,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.Page" />
      </Targets>
      <Member MemberName="UnregisterElementForConnectedAnimation">
        <MemberSignature Language="C#" Value="public static void UnregisterElementForConnectedAnimation (this Windows.UI.Xaml.Controls.Page page, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterElementForConnectedAnimation(class Windows.UI.Xaml.Controls.Page page, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.UnregisterElementForConnectedAnimation(Windows.UI.Xaml.Controls.Page,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UnregisterElementForConnectedAnimation (page As Page, key As String)" />
        <MemberSignature Language="F#" Value="static member UnregisterElementForConnectedAnimation : Windows.UI.Xaml.Controls.Page * string -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Connected.UnregisterElementForConnectedAnimation (page, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="page" Type="Windows.UI.Xaml.Controls.Page" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="page">The parent page of the element</param>
          <param name="key">The key used to register the element</param>
          <summary>
            Unregisters an <see cref="T:Windows.UI.Xaml.UIElement" /> from the ConnectedAnimations service
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Connected" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.UnregisterElementForConnectedAnimation(Windows.UI.Xaml.Controls.Page,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.Page" />
      </Targets>
      <Member MemberName="UnregisterListItemForConnectedAnimation">
        <MemberSignature Language="C#" Value="public static void UnregisterListItemForConnectedAnimation (this Windows.UI.Xaml.Controls.Page page, Windows.UI.Xaml.Controls.ListViewBase listViewBase, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterListItemForConnectedAnimation(class Windows.UI.Xaml.Controls.Page page, class Windows.UI.Xaml.Controls.ListViewBase listViewBase, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.UnregisterListItemForConnectedAnimation(Windows.UI.Xaml.Controls.Page,Windows.UI.Xaml.Controls.ListViewBase,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UnregisterListItemForConnectedAnimation (page As Page, listViewBase As ListViewBase, key As String)" />
        <MemberSignature Language="F#" Value="static member UnregisterListItemForConnectedAnimation : Windows.UI.Xaml.Controls.Page * Windows.UI.Xaml.Controls.ListViewBase * string -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Connected.UnregisterListItemForConnectedAnimation (page, listViewBase, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="page" Type="Windows.UI.Xaml.Controls.Page" RefType="this" />
          <Parameter Name="listViewBase" Type="Windows.UI.Xaml.Controls.ListViewBase" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="page">The parent page of the list control</param>
          <param name="listViewBase">The list control (such as ListView or GridView)</param>
          <param name="key">The key used to register the element</param>
          <summary>
            Unregisters an element (part of a DataTemplate in a list control) from the ConnectedAnimations service
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Connected" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Connected.UnregisterListItemForConnectedAnimation(Windows.UI.Xaml.Controls.Page,Windows.UI.Xaml.Controls.ListViewBase,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.AmbientLight" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.AmbientLightReferenceNode GetReference (this Windows.UI.Composition.AmbientLight compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.AmbientLightReferenceNode GetReference(class Windows.UI.Composition.AmbientLight compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.AmbientLight)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As AmbientLight) As AmbientLightReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.AmbientLight -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.AmbientLightReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.AmbientLightReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.AmbientLight" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.AmbientLight)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionColorBrush" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ColorBrushReferenceNode GetReference (this Windows.UI.Composition.CompositionColorBrush compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ColorBrushReferenceNode GetReference(class Windows.UI.Composition.CompositionColorBrush compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionColorBrush)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As CompositionColorBrush) As ColorBrushReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.CompositionColorBrush -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ColorBrushReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ColorBrushReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.CompositionColorBrush" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionColorBrush)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionNineGridBrush" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.NineGridBrushReferenceNode GetReference (this Windows.UI.Composition.CompositionNineGridBrush compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.NineGridBrushReferenceNode GetReference(class Windows.UI.Composition.CompositionNineGridBrush compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionNineGridBrush)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As CompositionNineGridBrush) As NineGridBrushReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.CompositionNineGridBrush -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.NineGridBrushReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.NineGridBrushReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.CompositionNineGridBrush" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionNineGridBrush)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionPropertySet" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode GetReference (this Windows.UI.Composition.CompositionPropertySet compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode GetReference(class Windows.UI.Composition.CompositionPropertySet compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionPropertySet)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As CompositionPropertySet) As PropertySetReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.CompositionPropertySet -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.CompositionPropertySet" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionPropertySet)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionSurfaceBrush" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SurfaceBrushReferenceNode GetReference (this Windows.UI.Composition.CompositionSurfaceBrush compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SurfaceBrushReferenceNode GetReference(class Windows.UI.Composition.CompositionSurfaceBrush compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionSurfaceBrush)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As CompositionSurfaceBrush) As SurfaceBrushReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.CompositionSurfaceBrush -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SurfaceBrushReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SurfaceBrushReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.CompositionSurfaceBrush" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionSurfaceBrush)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.DistantLight" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DistantLightReferenceNode GetReference (this Windows.UI.Composition.DistantLight compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DistantLightReferenceNode GetReference(class Windows.UI.Composition.DistantLight compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.DistantLight)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As DistantLight) As DistantLightReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.DistantLight -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DistantLightReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DistantLightReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.DistantLight" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.DistantLight)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.DropShadow" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DropShadowReferenceNode GetReference (this Windows.UI.Composition.DropShadow compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DropShadowReferenceNode GetReference(class Windows.UI.Composition.DropShadow compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.DropShadow)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As DropShadow) As DropShadowReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.DropShadow -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DropShadowReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DropShadowReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.DropShadow" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.DropShadow)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.InsetClip" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InsetClipReferenceNode GetReference (this Windows.UI.Composition.InsetClip compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InsetClipReferenceNode GetReference(class Windows.UI.Composition.InsetClip compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.InsetClip)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As InsetClip) As InsetClipReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.InsetClip -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InsetClipReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InsetClipReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.InsetClip" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.InsetClip)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTracker" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InteractionTrackerReferenceNode GetReference (this Windows.UI.Composition.Interactions.InteractionTracker compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InteractionTrackerReferenceNode GetReference(class Windows.UI.Composition.Interactions.InteractionTracker compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.Interactions.InteractionTracker)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As InteractionTracker) As InteractionTrackerReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.Interactions.InteractionTracker -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InteractionTrackerReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InteractionTrackerReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.Interactions.InteractionTracker" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.Interactions.InteractionTracker)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.PointLight" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PointLightReferenceNode GetReference (this Windows.UI.Composition.PointLight compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PointLightReferenceNode GetReference(class Windows.UI.Composition.PointLight compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.PointLight)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As PointLight) As PointLightReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.PointLight -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PointLightReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PointLightReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.PointLight" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.PointLight)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.SpotLight" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SpotLightReferenceNode GetReference (this Windows.UI.Composition.SpotLight compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SpotLightReferenceNode GetReference(class Windows.UI.Composition.SpotLight compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.SpotLight)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As SpotLight) As SpotLightReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.SpotLight -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SpotLightReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SpotLightReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.SpotLight" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.SpotLight)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Visual" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.VisualReferenceNode GetReference (this Windows.UI.Composition.Visual compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.VisualReferenceNode GetReference(class Windows.UI.Composition.Visual compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.Visual)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As Visual) As VisualReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.Visual -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.VisualReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.VisualReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.Visual" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.Visual)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionPropertySet" />
      </Targets>
      <Member MemberName="GetSpecializedReference&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetSpecializedReference&lt;T&gt; (this Windows.UI.Composition.CompositionPropertySet ps) where T : Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetSpecializedReference&lt;(class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode) T&gt;(class Windows.UI.Composition.CompositionPropertySet ps) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetSpecializedReference``1(Windows.UI.Composition.CompositionPropertySet)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSpecializedReference(Of T As PropertySetReferenceNode) (ps As CompositionPropertySet) As T" />
        <MemberSignature Language="F#" Value="static member GetSpecializedReference : Windows.UI.Composition.CompositionPropertySet -&gt; 'T (requires 'T :&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode)" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetSpecializedReference ps" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="ps" Type="Windows.UI.Composition.CompositionPropertySet" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">A class that derives from PropertySetReferenceNode.</typeparam>
          <param name="ps">The ps.</param>
          <summary>
            Create an ExpressionNode reference to this specialized PropertySet.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetSpecializedReference``1(Windows.UI.Composition.CompositionPropertySet)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.KeyFrameAnimation" />
      </Targets>
      <Member MemberName="InsertExpressionKeyFrame">
        <MemberSignature Language="C#" Value="public static void InsertExpressionKeyFrame (this Windows.UI.Composition.KeyFrameAnimation keyframeAnimation, float normalizedProgressKey, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode, Windows.UI.Composition.CompositionEasingFunction easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InsertExpressionKeyFrame(class Windows.UI.Composition.KeyFrameAnimation keyframeAnimation, float32 normalizedProgressKey, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode, class Windows.UI.Composition.CompositionEasingFunction easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.InsertExpressionKeyFrame(Windows.UI.Composition.KeyFrameAnimation,System.Single,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode,Windows.UI.Composition.CompositionEasingFunction)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub InsertExpressionKeyFrame (keyframeAnimation As KeyFrameAnimation, normalizedProgressKey As Single, expressionNode As ExpressionNode, Optional easing As CompositionEasingFunction = null)" />
        <MemberSignature Language="F#" Value="static member InsertExpressionKeyFrame : Windows.UI.Composition.KeyFrameAnimation * single * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode * Windows.UI.Composition.CompositionEasingFunction -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.InsertExpressionKeyFrame (keyframeAnimation, normalizedProgressKey, expressionNode, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyframeAnimation" Type="Windows.UI.Composition.KeyFrameAnimation" RefType="this" />
          <Parameter Name="normalizedProgressKey" Type="System.Single" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
          <Parameter Name="easing" Type="Windows.UI.Composition.CompositionEasingFunction" />
        </Parameters>
        <Docs>
          <param name="keyframeAnimation">The keyframe animation.</param>
          <param name="normalizedProgressKey">The time the key frame should occur at, expressed as a percentage of the animation Duration. Allowed value is from 0.0 to 1.0.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <param name="easing">The easing function to use when interpolating between frames.</param>
          <summary>
            Inserts a KeyFrame whose value is calculated using the specified ExpressionNode.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.InsertExpressionKeyFrame(Windows.UI.Composition.KeyFrameAnimation,System.Single,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode,Windows.UI.Composition.CompositionEasingFunction)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion" />
      </Targets>
      <Member MemberName="SetCondition">
        <MemberSignature Language="C#" Value="public static void SetCondition (this Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion modifier, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCondition(class Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion modifier, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition(Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetCondition (modifier As InteractionTrackerInertiaMotion, expressionNode As ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member SetCondition : Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition (modifier, expressionNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modifier" Type="Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion" RefType="this" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="modifier">The modifier.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Use the value of specified ExpressionNode to determine if this inertia modifier should be chosen.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition(Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue" />
      </Targets>
      <Member MemberName="SetCondition">
        <MemberSignature Language="C#" Value="public static void SetCondition (this Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue modifier, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCondition(class Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue modifier, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition(Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetCondition (modifier As InteractionTrackerInertiaRestingValue, expressionNode As ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member SetCondition : Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition (modifier, expressionNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modifier" Type="Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue" RefType="this" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="modifier">The modifier.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Use the value of specified ExpressionNode to determine if this inertia modifier should be chosen.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition(Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion" />
      </Targets>
      <Member MemberName="SetMotion">
        <MemberSignature Language="C#" Value="public static void SetMotion (this Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion modifier, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetMotion(class Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion modifier, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetMotion(Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetMotion (modifier As InteractionTrackerInertiaMotion, expressionNode As ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member SetMotion : Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetMotion (modifier, expressionNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modifier" Type="Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion" RefType="this" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="modifier">The modifier.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Use the value of specified ExpressionNode to dictate the motion for this inertia modifier.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetMotion(Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue" />
      </Targets>
      <Member MemberName="SetRestingValue">
        <MemberSignature Language="C#" Value="public static void SetRestingValue (this Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue modifier, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetRestingValue(class Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue modifier, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetRestingValue(Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetRestingValue (modifier As InteractionTrackerInertiaRestingValue, expressionNode As ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member SetRestingValue : Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetRestingValue (modifier, expressionNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modifier" Type="Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue" RefType="this" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="modifier">The modifier.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Use the value of specified ExpressionNode as the resting value for this inertia modifier.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetRestingValue(Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionObject" />
      </Targets>
      <Member MemberName="StartAnimation">
        <MemberSignature Language="C#" Value="public static void StartAnimation (this Windows.UI.Composition.CompositionObject compObject, string propertyName, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartAnimation(class Windows.UI.Composition.CompositionObject compObject, string propertyName, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.StartAnimation(Windows.UI.Composition.CompositionObject,System.String,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub StartAnimation (compObject As CompositionObject, propertyName As String, expressionNode As ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member StartAnimation : Windows.UI.Composition.CompositionObject * string * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.StartAnimation (compObject, propertyName, expressionNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObject" Type="Windows.UI.Composition.CompositionObject" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="compObject">The comp object.</param>
          <param name="propertyName">The name of the property that the expression will target.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Connects the specified ExpressionNode with the specified property of the object.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.StartAnimation(Windows.UI.Composition.CompositionObject,System.String,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DispatcherTimer" />
      </Targets>
      <Member MemberName="Debounce">
        <MemberSignature Language="C#" Value="public static void Debounce (this Windows.UI.Xaml.DispatcherTimer timer, Action action, TimeSpan interval, bool immediate = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Debounce(class Windows.UI.Xaml.DispatcherTimer timer, class System.Action action, valuetype System.TimeSpan interval, bool immediate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.DispatcherTimerExtensions.Debounce(Windows.UI.Xaml.DispatcherTimer,System.Action,System.TimeSpan,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Debounce (timer As DispatcherTimer, action As Action, interval As TimeSpan, Optional immediate As Boolean = false)" />
        <MemberSignature Language="F#" Value="static member Debounce : Windows.UI.Xaml.DispatcherTimer * Action * TimeSpan * bool -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.DispatcherTimerExtensions.Debounce (timer, action, interval, immediate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timer" Type="Windows.UI.Xaml.DispatcherTimer" RefType="this" />
          <Parameter Name="action" Type="System.Action" />
          <Parameter Name="interval" Type="System.TimeSpan" />
          <Parameter Name="immediate" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="timer">Timer instance, only one debounced function can be used per timer.</param>
          <param name="action">Action to execute at the end of the interval.</param>
          <param name="interval">Interval to wait before executing the action.</param>
          <param name="immediate">Determines if the action execute on the leading edge instead of trailing edge.</param>
          <summary>
            <para>Used to debounce (rate-limit) an event.  The action will be postponed and executed after the interval has elapsed.  At the end of the interval, the function will be called with the arguments that were passed most recently to the debounced function.</para>
            <para>Use this method to control the timer instead of calling Start/Interval/Stop manually.</para>
            <para>A scheduled debounce can still be stopped by calling the stop method on the timer instance.</para>
            <para>Each timer can only have one debounced function limited at a time.</para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.DispatcherTimerExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.DispatcherTimerExtensions.Debounce(Windows.UI.Xaml.DispatcherTimer,System.Action,System.TimeSpan,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.ListViewBase" />
      </Targets>
      <Member MemberName="DeselectAll">
        <MemberSignature Language="C#" Value="public static void DeselectAll (this Windows.UI.Xaml.Controls.ListViewBase list);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeselectAll(class Windows.UI.Xaml.Controls.ListViewBase list) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.DeselectAll(Windows.UI.Xaml.Controls.ListViewBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DeselectAll (list As ListViewBase)" />
        <MemberSignature Language="F#" Value="static member DeselectAll : Windows.UI.Xaml.Controls.ListViewBase -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.DeselectAll list" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="list" Type="Windows.UI.Xaml.Controls.ListViewBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="list">
            <see cref="T:Windows.UI.Xaml.Controls.ListViewBase" />
          </param>
          <summary>
            Deselects all items in list.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.DeselectAll(Windows.UI.Xaml.Controls.ListViewBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.ListViewBase" />
      </Targets>
      <Member MemberName="DeselectItem&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void DeselectItem&lt;T&gt; (this Windows.UI.Xaml.Controls.ListViewBase list, T item) where T : Windows.UI.Xaml.DependencyObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeselectItem&lt;(class Windows.UI.Xaml.DependencyObject) T&gt;(class Windows.UI.Xaml.Controls.ListViewBase list, !!T item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.DeselectItem``1(Windows.UI.Xaml.Controls.ListViewBase,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DeselectItem(Of T As DependencyObject) (list As ListViewBase, item As T)" />
        <MemberSignature Language="F#" Value="static member DeselectItem : Windows.UI.Xaml.Controls.ListViewBase * 'T -&gt; unit (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.DeselectItem (list, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.DependencyObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="list" Type="Windows.UI.Xaml.Controls.ListViewBase" RefType="this" />
          <Parameter Name="item" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type of item.</typeparam>
          <param name="list">
            <see cref="T:Windows.UI.Xaml.Controls.ListViewBase" />
          </param>
          <param name="item">Item to deselect.</param>
          <summary>
            Deselects the provided item.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.DeselectItem``1(Windows.UI.Xaml.Controls.ListViewBase,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.ListViewBase" />
      </Targets>
      <Member MemberName="SelectAllSafe">
        <MemberSignature Language="C#" Value="public static void SelectAllSafe (this Windows.UI.Xaml.Controls.ListViewBase list);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SelectAllSafe(class Windows.UI.Xaml.Controls.ListViewBase list) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.SelectAllSafe(Windows.UI.Xaml.Controls.ListViewBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SelectAllSafe (list As ListViewBase)" />
        <MemberSignature Language="F#" Value="static member SelectAllSafe : Windows.UI.Xaml.Controls.ListViewBase -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.SelectAllSafe list" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="list" Type="Windows.UI.Xaml.Controls.ListViewBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="list">
            <see cref="T:Windows.UI.Xaml.Controls.ListViewBase" />
          </param>
          <summary>
            Selects all items in the list (or first one), if possible.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.ListViewExtensions.SelectAllSafe(Windows.UI.Xaml.Controls.ListViewBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindChild&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindChild&lt;T&gt; (this Windows.UI.Xaml.FrameworkElement element) where T : Windows.UI.Xaml.FrameworkElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindChild&lt;(class Windows.UI.Xaml.FrameworkElement) T&gt;(class Windows.UI.Xaml.FrameworkElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChild``1(Windows.UI.Xaml.FrameworkElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindChild(Of T As FrameworkElement) (element As FrameworkElement) As T" />
        <MemberSignature Language="F#" Value="static member FindChild : Windows.UI.Xaml.FrameworkElement -&gt; 'T (requires 'T :&gt; Windows.UI.Xaml.FrameworkElement)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChild element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.FrameworkElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Parent element.</param>
          <summary>
            Find first logical child control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChild``1(Windows.UI.Xaml.FrameworkElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindChildByName">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.FrameworkElement FindChildByName (this Windows.UI.Xaml.FrameworkElement element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.FrameworkElement FindChildByName(class Windows.UI.Xaml.FrameworkElement element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildByName(Windows.UI.Xaml.FrameworkElement,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindChildByName (element As FrameworkElement, name As String) As FrameworkElement" />
        <MemberSignature Language="F#" Value="static member FindChildByName : Windows.UI.Xaml.FrameworkElement * string -&gt; Windows.UI.Xaml.FrameworkElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildByName (element, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.FrameworkElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <param name="name">Name of the control to find.</param>
          <summary>
            Find logical child control using its name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildByName(Windows.UI.Xaml.FrameworkElement,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindChildren&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; FindChildren&lt;T&gt; (this Windows.UI.Xaml.FrameworkElement element) where T : Windows.UI.Xaml.FrameworkElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; FindChildren&lt;(class Windows.UI.Xaml.FrameworkElement) T&gt;(class Windows.UI.Xaml.FrameworkElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildren``1(Windows.UI.Xaml.FrameworkElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function FindChildren(Of T As FrameworkElement) (element As FrameworkElement) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member FindChildren : Windows.UI.Xaml.FrameworkElement -&gt; seq&lt;'T (requires 'T :&gt; Windows.UI.Xaml.FrameworkElement)&gt; (requires 'T :&gt; Windows.UI.Xaml.FrameworkElement)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildren element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.FrameworkElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Parent element.</param>
          <summary>
            Find all logical child controls of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildren``1(Windows.UI.Xaml.FrameworkElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindParent&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindParent&lt;T&gt; (this Windows.UI.Xaml.FrameworkElement element) where T : Windows.UI.Xaml.FrameworkElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindParent&lt;(class Windows.UI.Xaml.FrameworkElement) T&gt;(class Windows.UI.Xaml.FrameworkElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParent``1(Windows.UI.Xaml.FrameworkElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindParent(Of T As FrameworkElement) (element As FrameworkElement) As T" />
        <MemberSignature Language="F#" Value="static member FindParent : Windows.UI.Xaml.FrameworkElement -&gt; 'T (requires 'T :&gt; Windows.UI.Xaml.FrameworkElement)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParent element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.FrameworkElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Child element.</param>
          <summary>
            Find first logical parent control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParent``1(Windows.UI.Xaml.FrameworkElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindParentByName">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.FrameworkElement FindParentByName (this Windows.UI.Xaml.FrameworkElement element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.FrameworkElement FindParentByName(class Windows.UI.Xaml.FrameworkElement element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParentByName(Windows.UI.Xaml.FrameworkElement,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindParentByName (element As FrameworkElement, name As String) As FrameworkElement" />
        <MemberSignature Language="F#" Value="static member FindParentByName : Windows.UI.Xaml.FrameworkElement * string -&gt; Windows.UI.Xaml.FrameworkElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParentByName (element, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.FrameworkElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="element">Child element.</param>
          <param name="name">Name of the control to find.</param>
          <summary>
            Finds the logical parent element with the given name or returns null.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParentByName(Windows.UI.Xaml.FrameworkElement,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="GetContentControl">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.UIElement GetContentControl (this Windows.UI.Xaml.FrameworkElement element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.UIElement GetContentControl(class Windows.UI.Xaml.FrameworkElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.GetContentControl(Windows.UI.Xaml.FrameworkElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContentControl (element As FrameworkElement) As UIElement" />
        <MemberSignature Language="F#" Value="static member GetContentControl : Windows.UI.Xaml.FrameworkElement -&gt; Windows.UI.Xaml.UIElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.GetContentControl element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.UIElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <summary>
            Retrieves the Content control of this element as defined by the ContentPropertyAttribute.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.GetContentControl(Windows.UI.Xaml.FrameworkElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="TryFindResource">
        <MemberSignature Language="C#" Value="public static object TryFindResource (this Windows.UI.Xaml.FrameworkElement start, object resourceKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object TryFindResource(class Windows.UI.Xaml.FrameworkElement start, object resourceKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.TryFindResource(Windows.UI.Xaml.FrameworkElement,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryFindResource (start As FrameworkElement, resourceKey As Object) As Object" />
        <MemberSignature Language="F#" Value="static member TryFindResource : Windows.UI.Xaml.FrameworkElement * obj -&gt; obj" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.TryFindResource (start, resourceKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="start" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="resourceKey" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="start">
            <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to start searching for Resource.</param>
          <param name="resourceKey">Key to search for.</param>
          <summary>
            Provides a WPF compatible version of TryFindResource to provide a static resource lookup.
            If the key is not found in the current element's resources, the logical tree is then searched element-by-element to look for the resource in each element's resources.
            If none of the elements contain the resource, the Application's resources are then searched.
            <seealso href="https://docs.microsoft.com/dotnet/api/system.windows.frameworkelement.tryfindresource" /><seealso href="https://docs.microsoft.com/dotnet/desktop-wpf/fundamentals/xaml-resources-define#static-resource-lookup-behavior" /></summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.TryFindResource(Windows.UI.Xaml.FrameworkElement,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Matrix" />
      </Targets>
      <Member MemberName="HasInverse">
        <MemberSignature Language="C#" Value="public static bool HasInverse (this Windows.UI.Xaml.Media.Matrix matrix);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasInverse(valuetype Windows.UI.Xaml.Media.Matrix matrix) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.HasInverse(Windows.UI.Xaml.Media.Matrix)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasInverse (matrix As Matrix) As Boolean" />
        <MemberSignature Language="F#" Value="static member HasInverse : Windows.UI.Xaml.Media.Matrix -&gt; bool" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.HasInverse matrix" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matrix" Type="Windows.UI.Xaml.Media.Matrix" RefType="this" />
        </Parameters>
        <Docs>
          <param name="matrix">The matrix.</param>
          <summary>
            Implements WPF's Matrix.HasInverse.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.HasInverse(Windows.UI.Xaml.Media.Matrix)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Matrix" />
      </Targets>
      <Member MemberName="Multiply">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix Multiply (this Windows.UI.Xaml.Media.Matrix matrix1, Windows.UI.Xaml.Media.Matrix matrix2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix Multiply(valuetype Windows.UI.Xaml.Media.Matrix matrix1, valuetype Windows.UI.Xaml.Media.Matrix matrix2) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Multiply(Windows.UI.Xaml.Media.Matrix,Windows.UI.Xaml.Media.Matrix)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Multiply (matrix1 As Matrix, matrix2 As Matrix) As Matrix" />
        <MemberSignature Language="F#" Value="static member Multiply : Windows.UI.Xaml.Media.Matrix * Windows.UI.Xaml.Media.Matrix -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Multiply (matrix1, matrix2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matrix1" Type="Windows.UI.Xaml.Media.Matrix" RefType="this" />
          <Parameter Name="matrix2" Type="Windows.UI.Xaml.Media.Matrix" />
        </Parameters>
        <Docs>
          <param name="matrix1">Initial matrix.</param>
          <param name="matrix2">Matrix to multiply by.</param>
          <summary>
            Multiply this matrix to the given matrix and return the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Multiply(Windows.UI.Xaml.Media.Matrix,Windows.UI.Xaml.Media.Matrix)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Matrix" />
      </Targets>
      <Member MemberName="Rotate">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix Rotate (this Windows.UI.Xaml.Media.Matrix matrix, double angle);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix Rotate(valuetype Windows.UI.Xaml.Media.Matrix matrix, float64 angle) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Rotate(Windows.UI.Xaml.Media.Matrix,System.Double)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Rotate (matrix As Matrix, angle As Double) As Matrix" />
        <MemberSignature Language="F#" Value="static member Rotate : Windows.UI.Xaml.Media.Matrix * double -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Rotate (matrix, angle)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matrix" Type="Windows.UI.Xaml.Media.Matrix" RefType="this" />
          <Parameter Name="angle" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="matrix">Matrix to extend.</param>
          <param name="angle">The angle of rotation in degrees.</param>
          <summary>
            Applies a rotation of the specified angle about the origin of this Matrix structure and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Rotate(Windows.UI.Xaml.Media.Matrix,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Matrix" />
      </Targets>
      <Member MemberName="RotateAt">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix RotateAt (this Windows.UI.Xaml.Media.Matrix matrix, double angle, double centerX, double centerY);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix RotateAt(valuetype Windows.UI.Xaml.Media.Matrix matrix, float64 angle, float64 centerX, float64 centerY) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.RotateAt(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double,System.Double)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RotateAt (matrix As Matrix, angle As Double, centerX As Double, centerY As Double) As Matrix" />
        <MemberSignature Language="F#" Value="static member RotateAt : Windows.UI.Xaml.Media.Matrix * double * double * double -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.RotateAt (matrix, angle, centerX, centerY)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matrix" Type="Windows.UI.Xaml.Media.Matrix" RefType="this" />
          <Parameter Name="angle" Type="System.Double" />
          <Parameter Name="centerX" Type="System.Double" />
          <Parameter Name="centerY" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="matrix">Matrix to extend.</param>
          <param name="angle">The angle of rotation in degrees.</param>
          <param name="centerX">The x-coordinate of the point about which to rotate this matrix.</param>
          <param name="centerY">The y-coordinate of the point about which to rotate this matrix.</param>
          <summary>
            Rotates this matrix about the specified point and returns the new result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.RotateAt(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Matrix" />
      </Targets>
      <Member MemberName="Scale">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix Scale (this Windows.UI.Xaml.Media.Matrix matrix, double scaleX, double scaleY);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix Scale(valuetype Windows.UI.Xaml.Media.Matrix matrix, float64 scaleX, float64 scaleY) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Scale(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Scale (matrix As Matrix, scaleX As Double, scaleY As Double) As Matrix" />
        <MemberSignature Language="F#" Value="static member Scale : Windows.UI.Xaml.Media.Matrix * double * double -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Scale (matrix, scaleX, scaleY)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matrix" Type="Windows.UI.Xaml.Media.Matrix" RefType="this" />
          <Parameter Name="scaleX" Type="System.Double" />
          <Parameter Name="scaleY" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="matrix">Matrix to extend.</param>
          <param name="scaleX">The value by which to scale this Matrix along the x-axis.</param>
          <param name="scaleY">The value by which to scale this Matrix along the y-axis.</param>
          <summary>
            Appends the specified scale vector to this Matrix structure and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Scale(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Matrix" />
      </Targets>
      <Member MemberName="ScaleAt">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix ScaleAt (this Windows.UI.Xaml.Media.Matrix matrix, double scaleX, double scaleY, double centerX, double centerY);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix ScaleAt(valuetype Windows.UI.Xaml.Media.Matrix matrix, float64 scaleX, float64 scaleY, float64 centerX, float64 centerY) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.ScaleAt(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double,System.Double,System.Double)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ScaleAt (matrix As Matrix, scaleX As Double, scaleY As Double, centerX As Double, centerY As Double) As Matrix" />
        <MemberSignature Language="F#" Value="static member ScaleAt : Windows.UI.Xaml.Media.Matrix * double * double * double * double -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.ScaleAt (matrix, scaleX, scaleY, centerX, centerY)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matrix" Type="Windows.UI.Xaml.Media.Matrix" RefType="this" />
          <Parameter Name="scaleX" Type="System.Double" />
          <Parameter Name="scaleY" Type="System.Double" />
          <Parameter Name="centerX" Type="System.Double" />
          <Parameter Name="centerY" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="matrix">Matrix to extend.</param>
          <param name="scaleX">The value by which to scale this Matrix along the x-axis.</param>
          <param name="scaleY">The value by which to scale this Matrix along the y-axis.</param>
          <param name="centerX">The x-coordinate of the scale operation's center point.</param>
          <param name="centerY">The y-coordinate of the scale operation's center point.</param>
          <summary>
            Scales this Matrix by the specified amount about the specified point and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.ScaleAt(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Matrix" />
      </Targets>
      <Member MemberName="Skew">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix Skew (this Windows.UI.Xaml.Media.Matrix matrix, double skewX, double skewY);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix Skew(valuetype Windows.UI.Xaml.Media.Matrix matrix, float64 skewX, float64 skewY) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Skew(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skew (matrix As Matrix, skewX As Double, skewY As Double) As Matrix" />
        <MemberSignature Language="F#" Value="static member Skew : Windows.UI.Xaml.Media.Matrix * double * double -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Skew (matrix, skewX, skewY)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matrix" Type="Windows.UI.Xaml.Media.Matrix" RefType="this" />
          <Parameter Name="skewX" Type="System.Double" />
          <Parameter Name="skewY" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="matrix">Matrix to extend.</param>
          <param name="skewX">The angle in the x dimension by which to skew this Matrix.</param>
          <param name="skewY">The angle in the y dimension by which to skew this Matrix.</param>
          <summary>
            Appends a skew of the specified degrees in the x and y dimensions to this Matrix structure and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Skew(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Matrix" />
      </Targets>
      <Member MemberName="Translate">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix Translate (this Windows.UI.Xaml.Media.Matrix matrix, double offsetX, double offsetY);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix Translate(valuetype Windows.UI.Xaml.Media.Matrix matrix, float64 offsetX, float64 offsetY) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Translate(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Translate (matrix As Matrix, offsetX As Double, offsetY As Double) As Matrix" />
        <MemberSignature Language="F#" Value="static member Translate : Windows.UI.Xaml.Media.Matrix * double * double -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Translate (matrix, offsetX, offsetY)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matrix" Type="Windows.UI.Xaml.Media.Matrix" RefType="this" />
          <Parameter Name="offsetX" Type="System.Double" />
          <Parameter Name="offsetY" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="matrix">Matrix to extend.</param>
          <param name="offsetX">The offset in the x dimension.</param>
          <param name="offsetY">The offset in the y dimension.</param>
          <summary>
            Translates the matrix by the given amount and returns the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.MatrixExtensions.Translate(Windows.UI.Xaml.Media.Matrix,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.RotateTransform" />
      </Targets>
      <Member MemberName="GetMatrix">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix GetMatrix (this Windows.UI.Xaml.Media.RotateTransform transform);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix GetMatrix(class Windows.UI.Xaml.Media.RotateTransform transform) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.RotateTransformExtensions.GetMatrix(Windows.UI.Xaml.Media.RotateTransform)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMatrix (transform As RotateTransform) As Matrix" />
        <MemberSignature Language="F#" Value="static member GetMatrix : Windows.UI.Xaml.Media.RotateTransform -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.RotateTransformExtensions.GetMatrix transform" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="transform" Type="Windows.UI.Xaml.Media.RotateTransform" RefType="this" />
        </Parameters>
        <Docs>
          <param name="transform">Extended SkewTranform.</param>
          <summary>
            Gets the matrix that represents this transform.
            Implements WPF's SkewTransform.Value.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.RotateTransformExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.RotateTransformExtensions.GetMatrix(Windows.UI.Xaml.Media.RotateTransform)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.ScaleTransform" />
      </Targets>
      <Member MemberName="GetMatrix">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix GetMatrix (this Windows.UI.Xaml.Media.ScaleTransform transform);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix GetMatrix(class Windows.UI.Xaml.Media.ScaleTransform transform) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.ScaleTransformExtensions.GetMatrix(Windows.UI.Xaml.Media.ScaleTransform)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMatrix (transform As ScaleTransform) As Matrix" />
        <MemberSignature Language="F#" Value="static member GetMatrix : Windows.UI.Xaml.Media.ScaleTransform -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.ScaleTransformExtensions.GetMatrix transform" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="transform" Type="Windows.UI.Xaml.Media.ScaleTransform" RefType="this" />
        </Parameters>
        <Docs>
          <param name="transform">Extended SkewTranform.</param>
          <summary>
            Gets the matrix that represents this transform.
            Implements WPF's SkewTransform.Value.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.ScaleTransformExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.ScaleTransformExtensions.GetMatrix(Windows.UI.Xaml.Media.ScaleTransform)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.ScrollViewer" />
      </Targets>
      <Member MemberName="StartExpressionAnimation">
        <MemberSignature Language="C#" Value="public static Windows.UI.Composition.ExpressionAnimation StartExpressionAnimation (this Windows.UI.Xaml.Controls.ScrollViewer scroller, Windows.UI.Xaml.UIElement target, Microsoft.Toolkit.Uwp.UI.Extensions.Axis sourceAxis, Microsoft.Toolkit.Uwp.UI.Extensions.Axis targetAxis, Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty property = Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty.Translation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Composition.ExpressionAnimation StartExpressionAnimation(class Windows.UI.Xaml.Controls.ScrollViewer scroller, class Windows.UI.Xaml.UIElement target, valuetype Microsoft.Toolkit.Uwp.UI.Extensions.Axis sourceAxis, valuetype Microsoft.Toolkit.Uwp.UI.Extensions.Axis targetAxis, valuetype Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.ScrollViewerExtensions.StartExpressionAnimation(Windows.UI.Xaml.Controls.ScrollViewer,Windows.UI.Xaml.UIElement,Microsoft.Toolkit.Uwp.UI.Extensions.Axis,Microsoft.Toolkit.Uwp.UI.Extensions.Axis,Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartExpressionAnimation (scroller As ScrollViewer, target As UIElement, sourceAxis As Axis, targetAxis As Axis, Optional property As VisualProperty = Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty.Translation) As ExpressionAnimation" />
        <MemberSignature Language="F#" Value="static member StartExpressionAnimation : Windows.UI.Xaml.Controls.ScrollViewer * Windows.UI.Xaml.UIElement * Microsoft.Toolkit.Uwp.UI.Extensions.Axis * Microsoft.Toolkit.Uwp.UI.Extensions.Axis * Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty -&gt; Windows.UI.Composition.ExpressionAnimation" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.ScrollViewerExtensions.StartExpressionAnimation (scroller, target, sourceAxis, targetAxis, property)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Composition.ExpressionAnimation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="scroller" Type="Windows.UI.Xaml.Controls.ScrollViewer" RefType="this" />
          <Parameter Name="target" Type="Windows.UI.Xaml.UIElement" />
          <Parameter Name="sourceAxis" Type="Microsoft.Toolkit.Uwp.UI.Extensions.Axis" />
          <Parameter Name="targetAxis" Type="Microsoft.Toolkit.Uwp.UI.Extensions.Axis" />
          <Parameter Name="property" Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty" />
        </Parameters>
        <Docs>
          <param name="scroller">The source <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer" /> control to use</param>
          <param name="target">The target <see cref="T:Windows.UI.Xaml.UIElement" /> that will be animated</param>
          <param name="sourceAxis">The scrolling axis of the source <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer" /></param>
          <param name="targetAxis">The optional scrolling axis of the target element, if <see langword="null" /> the source axis will be used</param>
          <param name="property">The target <see cref="T:Windows.UI.Composition.Visual" /> property to animate.</param>
          <summary>
            Creates and starts an animation on the target element that binds either the X or Y axis of the source <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer" /></summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.ScrollViewerExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.ScrollViewerExtensions.StartExpressionAnimation(Windows.UI.Xaml.Controls.ScrollViewer,Windows.UI.Xaml.UIElement,Microsoft.Toolkit.Uwp.UI.Extensions.Axis,Microsoft.Toolkit.Uwp.UI.Extensions.Axis,Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Controls.ScrollViewer" />
      </Targets>
      <Member MemberName="StartExpressionAnimation">
        <MemberSignature Language="C#" Value="public static Windows.UI.Composition.ExpressionAnimation StartExpressionAnimation (this Windows.UI.Xaml.Controls.ScrollViewer scroller, Windows.UI.Xaml.UIElement target, Microsoft.Toolkit.Uwp.UI.Extensions.Axis axis, Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty property = Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty.Translation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Composition.ExpressionAnimation StartExpressionAnimation(class Windows.UI.Xaml.Controls.ScrollViewer scroller, class Windows.UI.Xaml.UIElement target, valuetype Microsoft.Toolkit.Uwp.UI.Extensions.Axis axis, valuetype Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty property) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.ScrollViewerExtensions.StartExpressionAnimation(Windows.UI.Xaml.Controls.ScrollViewer,Windows.UI.Xaml.UIElement,Microsoft.Toolkit.Uwp.UI.Extensions.Axis,Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartExpressionAnimation (scroller As ScrollViewer, target As UIElement, axis As Axis, Optional property As VisualProperty = Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty.Translation) As ExpressionAnimation" />
        <MemberSignature Language="F#" Value="static member StartExpressionAnimation : Windows.UI.Xaml.Controls.ScrollViewer * Windows.UI.Xaml.UIElement * Microsoft.Toolkit.Uwp.UI.Extensions.Axis * Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty -&gt; Windows.UI.Composition.ExpressionAnimation" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.ScrollViewerExtensions.StartExpressionAnimation (scroller, target, axis, property)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Composition.ExpressionAnimation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="scroller" Type="Windows.UI.Xaml.Controls.ScrollViewer" RefType="this" />
          <Parameter Name="target" Type="Windows.UI.Xaml.UIElement" />
          <Parameter Name="axis" Type="Microsoft.Toolkit.Uwp.UI.Extensions.Axis" />
          <Parameter Name="property" Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty" />
        </Parameters>
        <Docs>
          <param name="scroller">The source <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer" /> control to use.</param>
          <param name="target">The target <see cref="T:Windows.UI.Xaml.UIElement" /> that will be animated.</param>
          <param name="axis">The scrolling axis of the source <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer" />.</param>
          <param name="property">The target <see cref="T:Windows.UI.Composition.Visual" /> property to animate.</param>
          <summary>
            Creates and starts an animation on the target element that binds either the X or Y axis of the source <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.ScrollViewerExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.ScrollViewerExtensions.StartExpressionAnimation(Windows.UI.Xaml.Controls.ScrollViewer,Windows.UI.Xaml.UIElement,Microsoft.Toolkit.Uwp.UI.Extensions.Axis,Microsoft.Toolkit.Uwp.UI.Extensions.VisualProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.SkewTransform" />
      </Targets>
      <Member MemberName="GetMatrix">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix GetMatrix (this Windows.UI.Xaml.Media.SkewTransform transform);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix GetMatrix(class Windows.UI.Xaml.Media.SkewTransform transform) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.SkewTransformExtensions.GetMatrix(Windows.UI.Xaml.Media.SkewTransform)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMatrix (transform As SkewTransform) As Matrix" />
        <MemberSignature Language="F#" Value="static member GetMatrix : Windows.UI.Xaml.Media.SkewTransform -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.SkewTransformExtensions.GetMatrix transform" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="transform" Type="Windows.UI.Xaml.Media.SkewTransform" RefType="this" />
        </Parameters>
        <Docs>
          <param name="transform">Extended SkewTranform.</param>
          <summary>
            Gets the matrix that represents this transform.
            Implements WPF's SkewTransform.Value.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.SkewTransformExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.SkewTransformExtensions.GetMatrix(Windows.UI.Xaml.Media.SkewTransform)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.TranslateTransform" />
      </Targets>
      <Member MemberName="GetMatrix">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.Media.Matrix GetMatrix (this Windows.UI.Xaml.Media.TranslateTransform transform);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Xaml.Media.Matrix GetMatrix(class Windows.UI.Xaml.Media.TranslateTransform transform) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.TranslateTransformExtensions.GetMatrix(Windows.UI.Xaml.Media.TranslateTransform)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMatrix (transform As TranslateTransform) As Matrix" />
        <MemberSignature Language="F#" Value="static member GetMatrix : Windows.UI.Xaml.Media.TranslateTransform -&gt; Windows.UI.Xaml.Media.Matrix" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.TranslateTransformExtensions.GetMatrix transform" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.Media.Matrix</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="transform" Type="Windows.UI.Xaml.Media.TranslateTransform" RefType="this" />
        </Parameters>
        <Docs>
          <param name="transform">Extended TranslateTranform.</param>
          <summary>
            Gets the matrix that represents this transform.
            Implements WPF's TranslateTransform.Value.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.TranslateTransformExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.TranslateTransformExtensions.GetMatrix(Windows.UI.Xaml.Media.TranslateTransform)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToVector2">
        <MemberSignature Language="C#" Value="public static System.Numerics.Vector2 ToVector2 (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector2 ToVector2(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector2(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector2 (str As String) As Vector2" />
        <MemberSignature Language="F#" Value="static member ToVector2 : string -&gt; System.Numerics.Vector2" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector2 str" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Numerics.Vector2</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">A string in the format of "float, float"</param>
          <summary>
            Converts a <see cref="T:System.String" /> to <see cref="T:System.Numerics.Vector2" /></summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector2(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToVector3">
        <MemberSignature Language="C#" Value="public static System.Numerics.Vector3 ToVector3 (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector3 ToVector3(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector3(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector3 (str As String) As Vector3" />
        <MemberSignature Language="F#" Value="static member ToVector3 : string -&gt; System.Numerics.Vector3" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector3 str" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Numerics.Vector3</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">A string in the format of "float, float, float"</param>
          <summary>
            Converts a <see cref="T:System.String" /> to <see cref="T:System.Numerics.Vector3" /></summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector3(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToVector4">
        <MemberSignature Language="C#" Value="public static System.Numerics.Vector4 ToVector4 (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector4 ToVector4(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector4(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector4 (str As String) As Vector4" />
        <MemberSignature Language="F#" Value="static member ToVector4 : string -&gt; System.Numerics.Vector4" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector4 str" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Numerics.Vector4</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">A string in the format of "float, float, float, float"</param>
          <summary>
            Converts a <see cref="T:System.String" /> to <see cref="T:System.Numerics.Vector4" /></summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector4(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindAscendant">
        <MemberSignature Language="C#" Value="public static object FindAscendant (this Windows.UI.Xaml.DependencyObject element, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object FindAscendant(class Windows.UI.Xaml.DependencyObject element, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant(Windows.UI.Xaml.DependencyObject,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindAscendant (element As DependencyObject, type As Type) As Object" />
        <MemberSignature Language="F#" Value="static member FindAscendant : Windows.UI.Xaml.DependencyObject * Type -&gt; obj" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant (element, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">Child element.</param>
          <param name="type">Type of ascendant to look for.</param>
          <summary>
            Find first visual ascendant control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant(Windows.UI.Xaml.DependencyObject,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindAscendant&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindAscendant&lt;T&gt; (this Windows.UI.Xaml.DependencyObject element) where T : Windows.UI.Xaml.DependencyObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindAscendant&lt;(class Windows.UI.Xaml.DependencyObject) T&gt;(class Windows.UI.Xaml.DependencyObject element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant``1(Windows.UI.Xaml.DependencyObject)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindAscendant(Of T As DependencyObject) (element As DependencyObject) As T" />
        <MemberSignature Language="F#" Value="static member FindAscendant : Windows.UI.Xaml.DependencyObject -&gt; 'T (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.DependencyObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Child element.</param>
          <summary>
            Find first visual ascendant control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant``1(Windows.UI.Xaml.DependencyObject)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindAscendantByName">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.FrameworkElement FindAscendantByName (this Windows.UI.Xaml.DependencyObject element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.FrameworkElement FindAscendantByName(class Windows.UI.Xaml.DependencyObject element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendantByName(Windows.UI.Xaml.DependencyObject,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindAscendantByName (element As DependencyObject, name As String) As FrameworkElement" />
        <MemberSignature Language="F#" Value="static member FindAscendantByName : Windows.UI.Xaml.DependencyObject * string -&gt; Windows.UI.Xaml.FrameworkElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendantByName (element, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.FrameworkElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <param name="name">Name of the control to find</param>
          <summary>
            Find visual ascendant <see cref="T:Windows.UI.Xaml.FrameworkElement" /> control using its name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendantByName(Windows.UI.Xaml.DependencyObject,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindAscendants">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Windows.UI.Xaml.DependencyObject&gt; FindAscendants (this Windows.UI.Xaml.DependencyObject element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Windows.UI.Xaml.DependencyObject&gt; FindAscendants(class Windows.UI.Xaml.DependencyObject element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendants(Windows.UI.Xaml.DependencyObject)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function FindAscendants (element As DependencyObject) As IEnumerable(Of DependencyObject)" />
        <MemberSignature Language="F#" Value="static member FindAscendants : Windows.UI.Xaml.DependencyObject -&gt; seq&lt;Windows.UI.Xaml.DependencyObject&gt;" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendants element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Windows.UI.Xaml.DependencyObject&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">Child element.</param>
          <summary>
            Find all visual ascendants for the element.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendants(Windows.UI.Xaml.DependencyObject)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindDescendant">
        <MemberSignature Language="C#" Value="public static object FindDescendant (this Windows.UI.Xaml.DependencyObject element, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object FindDescendant(class Windows.UI.Xaml.DependencyObject element, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant(Windows.UI.Xaml.DependencyObject,System.Type)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDescendant (element As DependencyObject, type As Type) As Object" />
        <MemberSignature Language="F#" Value="static member FindDescendant : Windows.UI.Xaml.DependencyObject * Type -&gt; obj" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant (element, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <param name="type">Type of descendant.</param>
          <summary>
            Find first descendant control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant(Windows.UI.Xaml.DependencyObject,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindDescendant&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindDescendant&lt;T&gt; (this Windows.UI.Xaml.DependencyObject element) where T : Windows.UI.Xaml.DependencyObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindDescendant&lt;(class Windows.UI.Xaml.DependencyObject) T&gt;(class Windows.UI.Xaml.DependencyObject element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant``1(Windows.UI.Xaml.DependencyObject)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDescendant(Of T As DependencyObject) (element As DependencyObject) As T" />
        <MemberSignature Language="F#" Value="static member FindDescendant : Windows.UI.Xaml.DependencyObject -&gt; 'T (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.DependencyObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Parent element.</param>
          <summary>
            Find first descendant control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant``1(Windows.UI.Xaml.DependencyObject)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindDescendantByName">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.FrameworkElement FindDescendantByName (this Windows.UI.Xaml.DependencyObject element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.FrameworkElement FindDescendantByName(class Windows.UI.Xaml.DependencyObject element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendantByName(Windows.UI.Xaml.DependencyObject,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDescendantByName (element As DependencyObject, name As String) As FrameworkElement" />
        <MemberSignature Language="F#" Value="static member FindDescendantByName : Windows.UI.Xaml.DependencyObject * string -&gt; Windows.UI.Xaml.FrameworkElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendantByName (element, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.FrameworkElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <param name="name">Name of the control to find</param>
          <summary>
            Find descendant <see cref="T:Windows.UI.Xaml.FrameworkElement" /> control using its name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendantByName(Windows.UI.Xaml.DependencyObject,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindDescendants&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; FindDescendants&lt;T&gt; (this Windows.UI.Xaml.DependencyObject element) where T : Windows.UI.Xaml.DependencyObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; FindDescendants&lt;(class Windows.UI.Xaml.DependencyObject) T&gt;(class Windows.UI.Xaml.DependencyObject element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendants``1(Windows.UI.Xaml.DependencyObject)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function FindDescendants(Of T As DependencyObject) (element As DependencyObject) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member FindDescendants : Windows.UI.Xaml.DependencyObject -&gt; seq&lt;'T (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)&gt; (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendants element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.DependencyObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Parent element.</param>
          <summary>
            Find all descendant controls of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendants``1(Windows.UI.Xaml.DependencyObject)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToAppxUri">
        <MemberSignature Language="C#" Value="public static Uri ToAppxUri (this string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri ToAppxUri(string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Media.Extensions.UriExtensions.ToAppxUri(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAppxUri (path As String) As Uri" />
        <MemberSignature Language="F#" Value="static member ToAppxUri : string -&gt; Uri" Usage="Microsoft.Toolkit.Uwp.UI.Media.Extensions.UriExtensions.ToAppxUri path" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Uri</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="path" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="path">The input relative path to convert</param>
          <summary>
            Returns an <see cref="T:System.Uri" /> that starts with the ms-appx:// prefix
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Media.Extensions.UriExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Media.Extensions.UriExtensions.ToAppxUri(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource" />
      </Targets>
      <Member MemberName="GetInterop&lt;TInterface&gt;">
        <MemberSignature Language="C#" Value="public static TInterface GetInterop&lt;TInterface&gt; (this Windows.UI.Xaml.Hosting.DesktopWindowXamlSource desktopWindowXamlSource) where TInterface : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TInterface GetInterop&lt;class TInterface&gt;(class Windows.UI.Xaml.Hosting.DesktopWindowXamlSource desktopWindowXamlSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Win32.UI.XamlHost.DesktopWindowXamlSourceExtensions.GetInterop``1(Windows.UI.Xaml.Hosting.DesktopWindowXamlSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInterop(Of TInterface As Class) (desktopWindowXamlSource As DesktopWindowXamlSource) As TInterface" />
        <MemberSignature Language="F#" Value="static member GetInterop : Windows.UI.Xaml.Hosting.DesktopWindowXamlSource -&gt; 'Interface (requires 'Interface : null)" Usage="Microsoft.Toolkit.Win32.UI.XamlHost.DesktopWindowXamlSourceExtensions.GetInterop desktopWindowXamlSource" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TInterface</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TInterface">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="desktopWindowXamlSource" Type="Windows.UI.Xaml.Hosting.DesktopWindowXamlSource" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TInterface">The interface to cast to</typeparam>
          <param name="desktopWindowXamlSource">The DesktopWindowXamlSource instance to get the interface from</param>
          <summary>
            Gets the <see cref="T:Microsoft.Toolkit.Win32.UI.XamlHost.IDesktopWindowXamlSourceNative" /> interface from a <see cref="T:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource" /> instance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Win32.UI.XamlHost.DesktopWindowXamlSourceExtensions" Member="M:Microsoft.Toolkit.Win32.UI.XamlHost.DesktopWindowXamlSourceExtensions.GetInterop``1(Windows.UI.Xaml.Hosting.DesktopWindowXamlSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="GetWrapper">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase GetWrapper (this Windows.UI.Xaml.UIElement element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase GetWrapper(class Windows.UI.Xaml.UIElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Wpf.UI.XamlHost.UwpUIElementExtensions.GetWrapper(Windows.UI.Xaml.UIElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetWrapper (element As UIElement) As WindowsXamlHostBase" />
        <MemberSignature Language="F#" Value="static member GetWrapper : Windows.UI.Xaml.UIElement -&gt; Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase" Usage="Microsoft.Toolkit.Wpf.UI.XamlHost.UwpUIElementExtensions.GetWrapper element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Wpf.UI.XamlHost.UwpUIElementExtensions" Member="M:Microsoft.Toolkit.Wpf.UI.XamlHost.UwpUIElementExtensions.GetWrapper(Windows.UI.Xaml.UIElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="SetWrapper">
        <MemberSignature Language="C#" Value="public static void SetWrapper (this Windows.UI.Xaml.UIElement element, Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase wrapper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWrapper(class Windows.UI.Xaml.UIElement element, class Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase wrapper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Wpf.UI.XamlHost.UwpUIElementExtensions.SetWrapper(Windows.UI.Xaml.UIElement,Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetWrapper (element As UIElement, wrapper As WindowsXamlHostBase)" />
        <MemberSignature Language="F#" Value="static member SetWrapper : Windows.UI.Xaml.UIElement * Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase -&gt; unit" Usage="Microsoft.Toolkit.Wpf.UI.XamlHost.UwpUIElementExtensions.SetWrapper (element, wrapper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="wrapper" Type="Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="wrapper">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Wpf.UI.XamlHost.UwpUIElementExtensions" Member="M:Microsoft.Toolkit.Wpf.UI.XamlHost.UwpUIElementExtensions.SetWrapper(Windows.UI.Xaml.UIElement,Microsoft.Toolkit.Wpf.UI.XamlHost.WindowsXamlHostBase)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
