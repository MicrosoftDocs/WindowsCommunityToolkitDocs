<Type Name="DispatcherTimerExtensions" FullName="Microsoft.Toolkit.Uwp.UI.Extensions.DispatcherTimerExtensions">
  <TypeSignature Language="C#" Value="public static class DispatcherTimerExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DispatcherTimerExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Toolkit.Uwp.UI.Extensions.DispatcherTimerExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DispatcherTimerExtensions" />
  <TypeSignature Language="F#" Value="type DispatcherTimerExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit.Uwp.UI</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Set of extention methods for using <see cref="T:Windows.UI.Xaml.DispatcherTimer" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Debounce">
      <MemberSignature Language="C#" Value="public static void Debounce (this Windows.UI.Xaml.DispatcherTimer timer, Action action, TimeSpan interval, bool immediate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Debounce(class Windows.UI.Xaml.DispatcherTimer timer, class System.Action action, valuetype System.TimeSpan interval, bool immediate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.DispatcherTimerExtensions.Debounce(Windows.UI.Xaml.DispatcherTimer,System.Action,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Debounce (timer As DispatcherTimer, action As Action, interval As TimeSpan, Optional immediate As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member Debounce : Windows.UI.Xaml.DispatcherTimer * Action * TimeSpan * bool -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.DispatcherTimerExtensions.Debounce (timer, action, interval, immediate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timer" Type="Windows.UI.Xaml.DispatcherTimer" RefType="this" />
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timer">Timer instance, only one debounced function can be used per timer.</param>
        <param name="action">Action to execute at the end of the interval.</param>
        <param name="interval">Interval to wait before executing the action.</param>
        <param name="immediate">Determines if the action execute on the leading edge instead of trailing edge.</param>
        <summary>
          <para>Used to debounce (rate-limit) an event.  The action will be postponed and executed after the interval has elapsed.  At the end of the interval, the function will be called with the arguments that were passed most recently to the debounced function.</para>
          <para>Use this method to control the timer instead of calling Start/Interval/Stop manually.</para>
          <para>A scheduled debounce can still be stopped by calling the stop method on the timer instance.</para>
          <para>Each timer can only have one debounced function limited at a time.</para>
        </summary>
        <remarks>To be added.</remarks>
        <example>
          <code>
             private DispatcherTimer _typeTimer = new DispatcherTimer();
            
             _typeTimer.Debounce(async () =&gt;
                 {
                     // Only executes this code after 0.3 seconds have elapsed since last trigger.
                 }, TimeSpan.FromSeconds(0.3));
             </code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>
