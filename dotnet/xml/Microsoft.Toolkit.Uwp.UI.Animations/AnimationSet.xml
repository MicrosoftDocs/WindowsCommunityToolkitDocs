<Type Name="AnimationSet" FullName="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet">
  <TypeSignature Language="C#" Value="public class AnimationSet : IDisposable" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AnimationSet extends System.Object implements class System.IDisposable" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
  <TypeSignature Language="VB.NET" Value="Public Class AnimationSet&#xA;Implements IDisposable" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
  <TypeSignature Language="F#" Value="type AnimationSet = class&#xA;    interface IDisposable" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
  <TypeSignature Language="C#" Value="public sealed class AnimationSet : Windows.UI.Xaml.DependencyObjectCollection" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AnimationSet extends Windows.UI.Xaml.DependencyObjectCollection" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AnimationSet&#xA;Inherits DependencyObjectCollection" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
  <TypeSignature Language="F#" Value="type AnimationSet = class&#xA;    inherit DependencyObjectCollection" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
    <AssemblyVersion>5.1.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.1.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">Windows.UI.Xaml.DependencyObjectCollection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="win-comm-toolkit-dotnet-6.1">
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A collection of animations that can be grouped together. This type represents a composite animation
            (such as <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard" />) that can be executed on a given element.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnimationSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnimationSet (Windows.UI.Xaml.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Windows.UI.Xaml.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.#ctor(Windows.UI.Xaml.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (element As UIElement)" />
      <MemberSignature Language="F#" Value="new Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet : Windows.UI.Xaml.UIElement -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="new Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet element" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="element">The associated element</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCompositionAnimation">
      <MemberSignature Language="C#" Value="public void AddCompositionAnimation (string propertyName, Windows.UI.Composition.CompositionAnimation animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCompositionAnimation(string propertyName, class Windows.UI.Composition.CompositionAnimation animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.AddCompositionAnimation(System.String,Windows.UI.Composition.CompositionAnimation)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCompositionAnimation (propertyName As String, animation As CompositionAnimation)" />
      <MemberSignature Language="F#" Value="member this.AddCompositionAnimation : string * Windows.UI.Composition.CompositionAnimation -&gt; unit" Usage="animationSet.AddCompositionAnimation (propertyName, animation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
        <Parameter Name="animation" Type="Windows.UI.Composition.CompositionAnimation" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="propertyName">The property to be animated on the backing Visual</param>
        <param name="animation">The <see cref="T:Windows.UI.Composition.CompositionAnimation" /> to be applied</param>
        <summary>
            Adds a composition animation to be run on <see cref="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.StartAsync" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCompositionDirectPropertyChange">
      <MemberSignature Language="C#" Value="public void AddCompositionDirectPropertyChange (string propertyName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCompositionDirectPropertyChange(string propertyName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.AddCompositionDirectPropertyChange(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCompositionDirectPropertyChange (propertyName As String, value As Object)" />
      <MemberSignature Language="F#" Value="member this.AddCompositionDirectPropertyChange : string * obj -&gt; unit" Usage="animationSet.AddCompositionDirectPropertyChange (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="propertyName">The property to be animated on the backing Visual</param>
        <param name="value">The value to be applied</param>
        <summary>
            Adds a composition property that will change instantaneously
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCompositionEffectAnimation">
      <MemberSignature Language="C#" Value="public void AddCompositionEffectAnimation (Windows.UI.Composition.CompositionObject effectBrush, Windows.UI.Composition.CompositionAnimation animation, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCompositionEffectAnimation(class Windows.UI.Composition.CompositionObject effectBrush, class Windows.UI.Composition.CompositionAnimation animation, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.AddCompositionEffectAnimation(Windows.UI.Composition.CompositionObject,Windows.UI.Composition.CompositionAnimation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCompositionEffectAnimation (effectBrush As CompositionObject, animation As CompositionAnimation, propertyName As String)" />
      <MemberSignature Language="F#" Value="member this.AddCompositionEffectAnimation : Windows.UI.Composition.CompositionObject * Windows.UI.Composition.CompositionAnimation * string -&gt; unit" Usage="animationSet.AddCompositionEffectAnimation (effectBrush, animation, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effectBrush" Type="Windows.UI.Composition.CompositionObject" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
        <Parameter Name="animation" Type="Windows.UI.Composition.CompositionAnimation" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
        <Parameter Name="propertyName" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="effectBrush">The <see cref="T:Windows.UI.Composition.CompositionEffectBrush" /> that will have a property animated</param>
        <param name="animation">The animation to be applied</param>
        <param name="propertyName">The property of the effect to be animated</param>
        <summary>
            Adds a composition effect animation to be run on backing <see cref="P:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Visual" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStoryboardAnimation">
      <MemberSignature Language="C#" Value="public void AddStoryboardAnimation (string propertyPath, Windows.UI.Xaml.Media.Animation.Timeline timeline);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddStoryboardAnimation(string propertyPath, class Windows.UI.Xaml.Media.Animation.Timeline timeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.AddStoryboardAnimation(System.String,Windows.UI.Xaml.Media.Animation.Timeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddStoryboardAnimation (propertyPath As String, timeline As Timeline)" />
      <MemberSignature Language="F#" Value="member this.AddStoryboardAnimation : string * Windows.UI.Xaml.Media.Animation.Timeline -&gt; unit" Usage="animationSet.AddStoryboardAnimation (propertyPath, timeline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyPath" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
        <Parameter Name="timeline" Type="Windows.UI.Xaml.Media.Animation.Timeline" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="propertyPath">The property to be animated with Storyboards</param>
        <param name="timeline">The timeline object to be added to storyboard</param>
        <summary>
            Adds a storyboard animation to be run
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetCompletedEventArgs&gt; Completed;" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetCompletedEventArgs&gt; Completed" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Completed" />
      <MemberSignature Language="VB.NET" Value="Public Event Completed As EventHandler(Of AnimationSetCompletedEventArgs) " FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      <MemberSignature Language="F#" Value="member this.Completed : EventHandler&lt;Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetCompletedEventArgs&gt; " Usage="member this.Completed : System.EventHandler&lt;Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetCompletedEventArgs&gt; " FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      <MemberSignature Language="C#" Value="public event EventHandler? Completed;" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Completed" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      <MemberSignature Language="VB.NET" Value="Public Event Completed As EventHandler " FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      <MemberSignature Language="F#" Value="member this.Completed : EventHandler " Usage="member this.Completed : System.EventHandler " FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="win-comm-toolkit-dotnet-6.1">System.EventHandler&lt;Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetCompletedEventArgs&gt;</ReturnType>
        <ReturnType FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Raised whenever the current animation completes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="animationSet.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Dispose resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Element">
      <MemberSignature Language="C#" Value="public Windows.UI.Xaml.UIElement Element { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Windows.UI.Xaml.UIElement Element" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Element" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Element As UIElement" />
      <MemberSignature Language="F#" Value="member this.Element : Windows.UI.Xaml.UIElement" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Element" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.UI.Xaml.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Windows.UI.Xaml.UIElement" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSequential">
      <MemberSignature Language="C#" Value="public bool IsSequential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSequential" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.IsSequential" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSequential As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSequential : bool with get, set" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.IsSequential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether top level animation nodes in this collection are invoked
            sequentially. This applies to both <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationScope" /> nodes (which will still trigger
            contained animations at the same time), and other top level animation nodes. The default value
            is <see langword="false" />, which means that all contained animations will start at the same time.
            <para>
            Note that this property will also cause a change in behavior for the animation. With the default
            configuration, with all animations starting at the same time, it's not possible to use multiple
            animations targeting the same property (as they'll cause a conflict and be ignored when on the
            composition layer, or cause a crash when on the XAML layer). When animations are started sequentially
            instead, each sequential block will be able to share target properties with animations from other
            sequential blocks, without issues. Note that especially for simple scenarios (eg. an opacity animation
            that just transitions to a state and then back, or between two states), it is recommended to use a single
            keyframe animation instead, which will result in less overhead when creating and starting the animation.
            </para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCompositionAnimation">
      <MemberSignature Language="C#" Value="public void RemoveCompositionAnimation (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveCompositionAnimation(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.RemoveCompositionAnimation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCompositionAnimation (propertyName As String)" />
      <MemberSignature Language="F#" Value="member this.RemoveCompositionAnimation : string -&gt; unit" Usage="animationSet.RemoveCompositionAnimation propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="propertyName">The property that no longer needs to be animated</param>
        <summary>
            Removes a composition animation from being run on <see cref="P:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Visual" /> property
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCompositionDirectPropertyChange">
      <MemberSignature Language="C#" Value="public void RemoveCompositionDirectPropertyChange (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveCompositionDirectPropertyChange(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.RemoveCompositionDirectPropertyChange(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCompositionDirectPropertyChange (propertyName As String)" />
      <MemberSignature Language="F#" Value="member this.RemoveCompositionDirectPropertyChange : string -&gt; unit" Usage="animationSet.RemoveCompositionDirectPropertyChange propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="propertyName">The property that no longer needs to be changed</param>
        <summary>
            Removes a composition property change
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDelay">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDelay (double delayTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDelay(float64 delayTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.SetDelay(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDelay (delayTime As Double) As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.SetDelay : double -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.SetDelay delayTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delayTime" Type="System.Double" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="delayTime">The delay time in milliseconds</param>
        <summary>
            Overwrites the delay time on all animations after last Then()
            to the specified value
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDelay">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDelay (TimeSpan delayTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDelay(valuetype System.TimeSpan delayTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.SetDelay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDelay (delayTime As TimeSpan) As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.SetDelay : TimeSpan -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.SetDelay delayTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delayTime" Type="System.TimeSpan" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="delayTime">
          <see cref="T:System.TimeSpan" /> for how much to delay</param>
        <summary>
            Overwrites the delay time on all animations after last Then()
            to the specified value
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDelayForAll">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDelayForAll (double delayTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDelayForAll(float64 delayTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.SetDelayForAll(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDelayForAll (delayTime As Double) As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.SetDelayForAll : double -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.SetDelayForAll delayTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delayTime" Type="System.Double" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="delayTime">The delay time in milliseconds</param>
        <summary>
            Overwrites the delay time on all animations to the specified value
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDelayForAll">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDelayForAll (TimeSpan delayTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDelayForAll(valuetype System.TimeSpan delayTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.SetDelayForAll(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDelayForAll (delayTime As TimeSpan) As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.SetDelayForAll : TimeSpan -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.SetDelayForAll delayTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delayTime" Type="System.TimeSpan" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="delayTime">
          <see cref="T:System.TimeSpan" /> for how much to delay</param>
        <summary>
            Overwrites the delay time on all animations to the specified value
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDuration">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDuration (double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDuration(float64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.SetDuration(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDuration (duration As Double) As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.SetDuration : double -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.SetDuration duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Double" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="duration">The duration in milliseconds</param>
        <summary>
            Overwrites the duration on all animations after last Then()
            to the specified value
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDuration">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDuration (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDuration(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.SetDuration(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDuration (duration As TimeSpan) As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.SetDuration : TimeSpan -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.SetDuration duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="duration">
          <see cref="T:System.TimeSpan" /> for the duration</param>
        <summary>
            Overwrites the duration on all animations after last Then()
            to the specified value
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDurationForAll">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDurationForAll (double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDurationForAll(float64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.SetDurationForAll(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDurationForAll (duration As Double) As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.SetDurationForAll : double -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.SetDurationForAll duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Double" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="duration">The duration in milliseconds</param>
        <summary>
            Overwrites the duration on all animations to the specified value
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDurationForAll">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDurationForAll (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet SetDurationForAll(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.SetDurationForAll(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDurationForAll (duration As TimeSpan) As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.SetDurationForAll : TimeSpan -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.SetDurationForAll duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      </Parameters>
      <Docs>
        <param name="duration">
          <see cref="T:System.TimeSpan" /> for the duration</param>
        <summary>
            Overwrites the duration on all animations to the specified value
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="animationSet.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stats all animations. This method is not awaitable.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when there is no attached <see cref="T:Windows.UI.Xaml.UIElement" /> instance.</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Start(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (token As CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.Start : System.Threading.CancellationToken -&gt; unit" Usage="animationSet.Start token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when there is no attached <see cref="T:Windows.UI.Xaml.UIElement" /> instance.</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (Windows.UI.Xaml.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(class Windows.UI.Xaml.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Start(Windows.UI.Xaml.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (element As UIElement)" />
      <MemberSignature Language="F#" Value="member this.Start : Windows.UI.Xaml.UIElement -&gt; unit" Usage="animationSet.Start element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="element">The target <see cref="T:Windows.UI.Xaml.UIElement" /> to animate.</param>
        <summary>
            Starts the animations present in the current <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationBuilder" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; StartAsync ();" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; StartAsync() cil managed" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.StartAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StartAsync () As Task(Of Boolean)" FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      <MemberSignature Language="F#" Value="member this.StartAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="animationSet.StartAsync " FrameworkAlternate="win-comm-toolkit-dotnet-6.1" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartAsync ();" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartAsync() cil managed" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      <MemberSignature Language="VB.NET" Value="Public Function StartAsync () As Task" FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      <MemberSignature Language="F#" Value="member this.StartAsync : unit -&gt; System.Threading.Tasks.Task" Usage="animationSet.StartAsync " FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="win-comm-toolkit-dotnet-6.1">System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        <ReturnType FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Starts all animations and returns an awaitable task.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that can be awaited until all animations have completed</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when there is no attached <see cref="T:Windows.UI.Xaml.UIElement" /> instance.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartAsync (System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartAsync(valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.StartAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartAsync (token As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="member this.StartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="animationSet.StartAsync token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when there is no attached <see cref="T:Windows.UI.Xaml.UIElement" /> instance.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartAsync (Windows.UI.Xaml.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartAsync(class Windows.UI.Xaml.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.StartAsync(Windows.UI.Xaml.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartAsync (element As UIElement) As Task" />
      <MemberSignature Language="F#" Value="member this.StartAsync : Windows.UI.Xaml.UIElement -&gt; System.Threading.Tasks.Task" Usage="animationSet.StartAsync element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="element">The target <see cref="T:Windows.UI.Xaml.UIElement" /> to animate.</param>
        <summary>
            Starts the animations present in the current <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationBuilder" /> instance.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartAsync (Windows.UI.Xaml.UIElement element, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartAsync(class Windows.UI.Xaml.UIElement element, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.StartAsync(Windows.UI.Xaml.UIElement,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartAsync (element As UIElement, token As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="member this.StartAsync : Windows.UI.Xaml.UIElement * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="animationSet.StartAsync (element, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <param name="element">The target <see cref="T:Windows.UI.Xaml.UIElement" /> to animate.</param>
        <summary>
            Starts the animations present in the current <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationBuilder" /> instance.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler? Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Started" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler " />
      <MemberSignature Language="F#" Value="member this.Started : EventHandler " Usage="member this.Started : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Raised whenever the current animation is started.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetState State" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As AnimationSetState" />
      <MemberSignature Language="F#" Value="member this.State : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetState" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSetState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current state of the AnimationSet
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="animationSet.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Cancels the current animation on the attached <see cref="T:Windows.UI.Xaml.UIElement" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when there is no attached <see cref="T:Windows.UI.Xaml.UIElement" /> instance.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (Windows.UI.Xaml.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class Windows.UI.Xaml.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Stop(Windows.UI.Xaml.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop (element As UIElement)" />
      <MemberSignature Language="F#" Value="member this.Stop : Windows.UI.Xaml.UIElement -&gt; unit" Usage="animationSet.Stop element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="Windows.UI.Xaml.UIElement" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="element">The target <see cref="T:Windows.UI.Xaml.UIElement" /> instance to stop the animation for.</param>
        <summary>
             Cancels the current animation for a target <see cref="T:Windows.UI.Xaml.UIElement" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Then">
      <MemberSignature Language="C#" Value="public Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Then ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Then() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Then" />
      <MemberSignature Language="VB.NET" Value="Public Function Then () As AnimationSet" />
      <MemberSignature Language="F#" Value="member this.Then : unit -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="animationSet.Then " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Wait for existing animations to complete before running new animations
            </summary>
        <returns>AnimationSet to allow chaining</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseComposition">
      <MemberSignature Language="C#" Value="public static bool UseComposition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseComposition" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.UseComposition" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property UseComposition As Boolean" />
      <MemberSignature Language="F#" Value="static member UseComposition : bool with get, set" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.UseComposition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether composition must be use even on SDK &gt; 10586
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visual">
      <MemberSignature Language="C#" Value="public Windows.UI.Composition.Visual Visual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Windows.UI.Composition.Visual Visual" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Visual" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Visual As Visual" />
      <MemberSignature Language="F#" Value="member this.Visual : Windows.UI.Composition.Visual" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Visual" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp.UI.Animations</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.UI.Composition.Visual</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet.Visual" /> object that backs the XAML element
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
