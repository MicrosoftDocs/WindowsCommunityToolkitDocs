<Type Name="ImplicitAnimationSet" FullName="CommunityToolkit.WinUI.UI.Animations.ImplicitAnimationSet">
  <TypeSignature Language="C#" Value="public sealed class ImplicitAnimationSet : Microsoft.UI.Xaml.DependencyObjectCollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImplicitAnimationSet extends Microsoft.UI.Xaml.DependencyObjectCollection" />
  <TypeSignature Language="DocId" Value="T:CommunityToolkit.WinUI.UI.Animations.ImplicitAnimationSet" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImplicitAnimationSet&#xA;Inherits DependencyObjectCollection" />
  <TypeSignature Language="F#" Value="type ImplicitAnimationSet = class&#xA;    inherit DependencyObjectCollection" />
  <AssemblyInfo>
    <AssemblyName>CommunityToolkit.WinUI.UI.Animations</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.UI.Xaml.DependencyObjectCollection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A collection of implicit animations that can be assigned to a <see cref="T:Microsoft.UI.Xaml.UIElement" /> and configured to be run automatically
            when the element is either shown or hidden (through <see cref="F:CommunityToolkit.WinUI.UI.Animations.Implicit.ShowAnimationsProperty" /> and <see cref="F:CommunityToolkit.WinUI.UI.Animations.Implicit.HideAnimationsProperty" />),
            or whenever one of the targeted properties on the underlying <see cref="T:Microsoft.UI.Composition.Visual" /> element changes (through <see cref="F:CommunityToolkit.WinUI.UI.Animations.Implicit.AnimationsProperty" />).
            <para>
            Animations within an <see cref="T:CommunityToolkit.WinUI.UI.Animations.ImplicitAnimationSet" /> should be objects implementing the <see cref="T:CommunityToolkit.WinUI.UI.Animations.IImplicitTimeline" /> interface, such as
            types inheriting from <see cref="T:CommunityToolkit.WinUI.UI.Animations.ImplicitAnimation`2" /> (eg. <see cref="T:CommunityToolkit.WinUI.UI.Animations.OpacityAnimation" />, <see cref="T:CommunityToolkit.WinUI.UI.Animations.TranslationAnimation" />,
            <see cref="T:CommunityToolkit.WinUI.UI.Animations.OffsetAnimation" /> and <see cref="T:CommunityToolkit.WinUI.UI.Animations.ScaleAnimation" />, or custom ones such as <see cref="T:CommunityToolkit.WinUI.UI.Animations.ScalarAnimation" /> and <see cref="T:CommunityToolkit.WinUI.UI.Animations.Vector3Animation" />).
            Adding incompatible elements cannot be validated at build-time, but will result in a runtime crash.
            </para><para>
            Animations will monitor for changes in real-time to any of their public properties. For instance, if a binding is used to dynamically update the
            <see cref="P:CommunityToolkit.WinUI.UI.Animations.Animation`2.To" /> or <see cref="P:CommunityToolkit.WinUI.UI.Animations.Animation`2.From" /> properties, the entire animation set will be
            initialized again and assigned to the underlying <see cref="T:Microsoft.UI.Composition.Visual" /> object for the targeted <see cref="T:Microsoft.UI.Xaml.UIElement" />. This does not currently apply
            to changes to the <see cref="P:CommunityToolkit.WinUI.UI.Animations.Animation`2.KeyFrames" /> property though (other than the entire property being reassigned). To achieve
            dynamic updates to animation sets in that case, either leverage expression keyframes or just use code-behind to manually reinitialize the animations.
            </para></summary>
    <remarks>
            An <see cref="T:CommunityToolkit.WinUI.UI.Animations.ImplicitAnimationSet" /> instance can only be used on a single <see cref="T:Microsoft.UI.Xaml.UIElement" /> target, and it cannot be shared across multiple
            elements. Attempting to do so will result in a runtime crash. Furthermore, it is recommended not to move <see cref="T:CommunityToolkit.WinUI.UI.Animations.IImplicitTimeline" /> instances from
            one <see cref="T:CommunityToolkit.WinUI.UI.Animations.ImplicitAnimationSet" /> to another, and doing so will add unnecessary runtime overhead over time. If you want to apply the same animations
            to multiple elements, simply create another <see cref="T:CommunityToolkit.WinUI.UI.Animations.ImplicitAnimationSet" /> instance and another set of animations with the same properties within it.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImplicitAnimationSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.UI.Animations.ImplicitAnimationSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.UI.Animations</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.WinUI.UI.Animations.ImplicitAnimationSet" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
