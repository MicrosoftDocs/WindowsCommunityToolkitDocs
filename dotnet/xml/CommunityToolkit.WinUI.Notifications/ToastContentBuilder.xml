<Type Name="ToastContentBuilder" FullName="CommunityToolkit.WinUI.Notifications.ToastContentBuilder">
  <TypeSignature Language="C#" Value="public class ToastContentBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ToastContentBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ToastContentBuilder" />
  <TypeSignature Language="F#" Value="type ToastContentBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Builder class used to create <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContent" /></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToastContentBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAppLogoOverride">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAppLogoOverride (Uri uri, CommunityToolkit.WinUI.Notifications.ToastGenericAppLogoCrop? hintCrop = default, string alternateText = default, bool? addImageQuery = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAppLogoOverride(class System.Uri uri, valuetype System.Nullable`1&lt;valuetype CommunityToolkit.WinUI.Notifications.ToastGenericAppLogoCrop&gt; hintCrop, string alternateText, valuetype System.Nullable`1&lt;bool&gt; addImageQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddAppLogoOverride(System.Uri,System.Nullable{CommunityToolkit.WinUI.Notifications.ToastGenericAppLogoCrop},System.String,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAppLogoOverride (uri As Uri, Optional hintCrop As Nullable(Of ToastGenericAppLogoCrop) = Nothing, Optional alternateText As String = Nothing, Optional addImageQuery As Nullable(Of Boolean) = Nothing) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddAppLogoOverride : Uri * Nullable&lt;CommunityToolkit.WinUI.Notifications.ToastGenericAppLogoCrop&gt; * string * Nullable&lt;bool&gt; -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddAppLogoOverride (uri, hintCrop, alternateText, addImageQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="hintCrop" Type="System.Nullable&lt;CommunityToolkit.WinUI.Notifications.ToastGenericAppLogoCrop&gt;" />
        <Parameter Name="alternateText" Type="System.String" />
        <Parameter Name="addImageQuery" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="uri">The URI of the image. Can be from your application package, application data, or the internet. Internet images must be less than 200 KB in size.</param>
        <param name="hintCrop">Specify how the image should be cropped.</param>
        <param name="alternateText">A description of the image, for users of assistive technologies.</param>
        <param name="addImageQuery">A value whether Windows is allowed to append a query string to the image URI supplied in the Tile notification.</param>
        <summary>
            Override the app logo with custom image of choice that will be displayed on the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddArgument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddArgument (key As String) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddArgument : string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.AddArgument : string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddArgument key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key.</param>
        <summary>
            Adds a key (without value) to the activation arguments that will be returned when the toast notification or its buttons are clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument (string key, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument(string key, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddArgument(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddArgument (key As String, value As Boolean) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddArgument : string * bool -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.AddArgument : string * bool -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddArgument (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">The key for this value.</param>
        <param name="value">The value itself.</param>
        <summary>
            Adds a key/value to the activation arguments that will be returned when the toast notification or its buttons are clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument (string key, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument(string key, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddArgument(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddArgument (key As String, value As Double) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddArgument : string * double -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.AddArgument : string * double -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddArgument (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="key">The key for this value.</param>
        <param name="value">The value itself.</param>
        <summary>
            Adds a key/value to the activation arguments that will be returned when the toast notification or its buttons are clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument (string key, Enum value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument(string key, class System.Enum value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddArgument(System.String,System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddArgument (key As String, value As Enum) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddArgument : string * Enum -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.AddArgument : string * Enum -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddArgument (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="key">The key for this value.</param>
        <param name="value">The value itself. Note that the enums are stored using their numeric value, so be aware that changing your enum number values might break existing activation of toasts currently in Action Center.</param>
        <summary>
            Adds a key/value to the activation arguments that will be returned when the toast notification or its buttons are clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument (string key, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument(string key, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddArgument(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddArgument (key As String, value As Integer) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddArgument : string * int -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.AddArgument : string * int -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddArgument (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">The key for this value.</param>
        <param name="value">The value itself.</param>
        <summary>
            Adds a key/value to the activation arguments that will be returned when the toast notification or its buttons are clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument (string key, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument(string key, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddArgument(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddArgument (key As String, value As Single) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddArgument : string * single -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.AddArgument : string * single -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddArgument (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="key">The key for this value.</param>
        <param name="value">The value itself.</param>
        <summary>
            Adds a key/value to the activation arguments that will be returned when the toast notification or its buttons are clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddArgument(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddArgument(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddArgument (key As String, value As String) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddArgument : string * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.AddArgument : string * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddArgument (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key for this value.</param>
        <param name="value">The value itself.</param>
        <summary>
            Adds a key/value to the activation arguments that will be returned when the toast notification or its buttons are clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributionText">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAttributionText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAttributionText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddAttributionText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAttributionText (text As String) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddAttributionText : string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddAttributionText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Text to be displayed as Attribution Text</param>
        <summary>
            Add an Attribution Text to be displayed on the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributionText">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAttributionText (string text, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAttributionText(string text, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddAttributionText(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAttributionText (text As String, language As String) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddAttributionText : string * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddAttributionText (text, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Text to be displayed as Attribution Text</param>
        <param name="language">The target locale of the XML payload, specified as a BCP-47 language tags such as "en-US" or "fr-FR".</param>
        <summary>
            Add an Attribution Text to be displayed on the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAudio">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAudio (CommunityToolkit.WinUI.Notifications.ToastAudio audio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAudio(class CommunityToolkit.WinUI.Notifications.ToastAudio audio) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddAudio(CommunityToolkit.WinUI.Notifications.ToastAudio)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAudio (audio As ToastAudio) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddAudio : CommunityToolkit.WinUI.Notifications.ToastAudio -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddAudio audio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audio" Type="CommunityToolkit.WinUI.Notifications.ToastAudio" />
      </Parameters>
      <Docs>
        <param name="audio">The <see cref="T:CommunityToolkit.WinUI.Notifications.ToastAudio" /> to set.</param>
        <summary>
            Set custom audio to go along with the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAudio">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAudio (Uri src, bool? loop = default, bool? silent = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddAudio(class System.Uri src, valuetype System.Nullable`1&lt;bool&gt; loop, valuetype System.Nullable`1&lt;bool&gt; silent) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddAudio(System.Uri,System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAudio (src As Uri, Optional loop As Nullable(Of Boolean) = Nothing, Optional silent As Nullable(Of Boolean) = Nothing) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddAudio : Uri * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddAudio (src, loop, silent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Uri" />
        <Parameter Name="loop" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="silent" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="src">Source to the media that will be played when the toast is pop</param>
        <param name="loop">Indicating whether sound should repeat as long as the Toast is shown; false to play only once (default).</param>
        <param name="silent">Indicating whether sound is muted; false to allow the Toast notification sound to play (default).</param>
        <summary>
            Set custom audio to go along with the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddButton">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton (CommunityToolkit.WinUI.Notifications.IToastButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton(class CommunityToolkit.WinUI.Notifications.IToastButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddButton(CommunityToolkit.WinUI.Notifications.IToastButton)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddButton (button As IToastButton) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddButton : CommunityToolkit.WinUI.Notifications.IToastButton -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddButton button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="CommunityToolkit.WinUI.Notifications.IToastButton" />
      </Parameters>
      <Docs>
        <param name="button">An instance of class that implement <see cref="T:CommunityToolkit.WinUI.Notifications.IToastButton" /> for the button that will be used on the toast.</param>
        <summary>
            Add a button to the current toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddButton">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton (string content, CommunityToolkit.WinUI.Notifications.ToastActivationType activationType, string arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton(string content, valuetype CommunityToolkit.WinUI.Notifications.ToastActivationType activationType, string arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddButton(System.String,CommunityToolkit.WinUI.Notifications.ToastActivationType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddButton (content As String, activationType As ToastActivationType, arguments As String) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddButton : string * CommunityToolkit.WinUI.Notifications.ToastActivationType * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddButton (content, activationType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="activationType" Type="CommunityToolkit.WinUI.Notifications.ToastActivationType" />
        <Parameter Name="arguments" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="content">Text to display on the button.</param>
        <param name="activationType">Type of activation this button will use when clicked. Defaults to Foreground.</param>
        <param name="arguments">App-defined string of arguments that the app can later retrieve once it is activated when the user clicks the button.</param>
        <summary>
            Add a button to the current toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddButton">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton (string content, CommunityToolkit.WinUI.Notifications.ToastActivationType activationType, string arguments, Uri imageUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton(string content, valuetype CommunityToolkit.WinUI.Notifications.ToastActivationType activationType, string arguments, class System.Uri imageUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddButton(System.String,CommunityToolkit.WinUI.Notifications.ToastActivationType,System.String,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddButton (content As String, activationType As ToastActivationType, arguments As String, imageUri As Uri) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddButton : string * CommunityToolkit.WinUI.Notifications.ToastActivationType * string * Uri -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddButton (content, activationType, arguments, imageUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="activationType" Type="CommunityToolkit.WinUI.Notifications.ToastActivationType" />
        <Parameter Name="arguments" Type="System.String" />
        <Parameter Name="imageUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="content">Text to display on the button.</param>
        <param name="activationType">Type of activation this button will use when clicked. Defaults to Foreground.</param>
        <param name="arguments">App-defined string of arguments that the app can later retrieve once it is activated when the user clicks the button.</param>
        <param name="imageUri">Optional image icon for the button to display (required for buttons adjacent to inputs like quick reply).</param>
        <summary>
            Add a button to the current toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddButton">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton (string textBoxId, string content, CommunityToolkit.WinUI.Notifications.ToastActivationType activationType, string arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton(string textBoxId, string content, valuetype CommunityToolkit.WinUI.Notifications.ToastActivationType activationType, string arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddButton(System.String,System.String,CommunityToolkit.WinUI.Notifications.ToastActivationType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddButton (textBoxId As String, content As String, activationType As ToastActivationType, arguments As String) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddButton : string * string * CommunityToolkit.WinUI.Notifications.ToastActivationType * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddButton (textBoxId, content, activationType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxId" Type="System.String" />
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="activationType" Type="CommunityToolkit.WinUI.Notifications.ToastActivationType" />
        <Parameter Name="arguments" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textBoxId">ID of an existing <see cref="T:CommunityToolkit.WinUI.Notifications.ToastTextBox" /> in order to have this button display to the right of the input, achieving a quick reply scenario.</param>
        <param name="content">Text to display on the button.</param>
        <param name="activationType">Type of activation this button will use when clicked. Defaults to Foreground.</param>
        <param name="arguments">App-defined string of arguments that the app can later retrieve once it is activated when the user clicks the button.</param>
        <summary>
            Add an button to the toast that will be display to the right of the input text box, achieving a quick reply scenario.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddButton">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton (string textBoxId, string content, CommunityToolkit.WinUI.Notifications.ToastActivationType activationType, string arguments, Uri imageUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddButton(string textBoxId, string content, valuetype CommunityToolkit.WinUI.Notifications.ToastActivationType activationType, string arguments, class System.Uri imageUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddButton(System.String,System.String,CommunityToolkit.WinUI.Notifications.ToastActivationType,System.String,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddButton (textBoxId As String, content As String, activationType As ToastActivationType, arguments As String, imageUri As Uri) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddButton : string * string * CommunityToolkit.WinUI.Notifications.ToastActivationType * string * Uri -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddButton (textBoxId, content, activationType, arguments, imageUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxId" Type="System.String" />
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="activationType" Type="CommunityToolkit.WinUI.Notifications.ToastActivationType" />
        <Parameter Name="arguments" Type="System.String" />
        <Parameter Name="imageUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="textBoxId">ID of an existing <see cref="T:CommunityToolkit.WinUI.Notifications.ToastTextBox" /> in order to have this button display to the right of the input, achieving a quick reply scenario.</param>
        <param name="content">Text to display on the button.</param>
        <param name="activationType">Type of activation this button will use when clicked. Defaults to Foreground.</param>
        <param name="arguments">App-defined string of arguments that the app can later retrieve once it is activated when the user clicks the button.</param>
        <param name="imageUri">An optional image icon for the button to display (required for buttons adjacent to inputs like quick reply)</param>
        <summary>
            Add an button to the toast that will be display to the right of the input text box, achieving a quick reply scenario.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddComboBox">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddComboBox (string id, params (string comboBoxItemId, string comboBoxItemContent)[] choices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddComboBox(string id, valuetype System.ValueTuple`2&lt;string, string&gt;[] choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddComboBox(System.String,System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddComboBox (id As String, ParamArray choices As ValueTuple(Of String, String)()) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddComboBox : string * ValueTuple&lt;string, string&gt;[] -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddComboBox (id, choices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="choices" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "comboBoxItemId", "comboBoxItemContent" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "comboBoxItemId", "comboBoxItemContent" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="id">Required ID property used so that developers can retrieve user input once the app is activated.</param>
        <param name="choices">List of choices that will be available for user to select.</param>
        <summary>
            Add a combo box / drop-down menu that contain options for user to select.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddComboBox">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddComboBox (string id, string defaultSelectionBoxItemId, params (string comboBoxItemId, string comboBoxItemContent)[] choices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddComboBox(string id, string defaultSelectionBoxItemId, valuetype System.ValueTuple`2&lt;string, string&gt;[] choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddComboBox(System.String,System.String,System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddComboBox (id As String, defaultSelectionBoxItemId As String, ParamArray choices As ValueTuple(Of String, String)()) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddComboBox : string * string * ValueTuple&lt;string, string&gt;[] -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddComboBox (id, defaultSelectionBoxItemId, choices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="defaultSelectionBoxItemId" Type="System.String" />
        <Parameter Name="choices" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "comboBoxItemId", "comboBoxItemContent" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "comboBoxItemId", "comboBoxItemContent" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="id">Required ID property used so that developers can retrieve user input once the app is activated.</param>
        <param name="defaultSelectionBoxItemId">Sets which item is selected by default, and refers to the Id property of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastSelectionBoxItem" />. If you do not provide this or null, the default selection will be empty (user sees nothing).</param>
        <param name="choices">List of choices that will be available for user to select.</param>
        <summary>
            Add a combo box / drop-down menu that contain options for user to select.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddComboBox">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddComboBox (string id, string title, string defaultSelectionBoxItemId, System.Collections.Generic.IEnumerable&lt;(string comboBoxItemId, string comboBoxItemContent)&gt; choices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddComboBox(string id, string title, string defaultSelectionBoxItemId, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ValueTuple`2&lt;string, string&gt;&gt; choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddComboBox(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddComboBox (id As String, title As String, defaultSelectionBoxItemId As String, choices As IEnumerable(Of ValueTuple(Of String, String))) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddComboBox : string * string * string * seq&lt;ValueTuple&lt;string, string&gt;&gt; -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddComboBox (id, title, defaultSelectionBoxItemId, choices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="defaultSelectionBoxItemId" Type="System.String" />
        <Parameter Name="choices" Type="System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;System.String,System.String&gt;&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "comboBoxItemId", "comboBoxItemContent" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "comboBoxItemId", "comboBoxItemContent" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="id">Required ID property used so that developers can retrieve user input once the app is activated.</param>
        <param name="title">Title text to display above the Combo Box.</param>
        <param name="defaultSelectionBoxItemId">Sets which item is selected by default, and refers to the Id property of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastSelectionBoxItem" />. If you do not provide this or null, the default selection will be empty (user sees nothing).</param>
        <param name="choices">List of choices that will be available for user to select.</param>
        <summary>
            Add a combo box / drop-down menu that contain options for user to select.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddComboBox">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddComboBox (string id, string title, string defaultSelectionBoxItemId, params (string comboBoxItemId, string comboBoxItemContent)[] choices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddComboBox(string id, string title, string defaultSelectionBoxItemId, valuetype System.ValueTuple`2&lt;string, string&gt;[] choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddComboBox(System.String,System.String,System.String,System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddComboBox (id As String, title As String, defaultSelectionBoxItemId As String, ParamArray choices As ValueTuple(Of String, String)()) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddComboBox : string * string * string * ValueTuple&lt;string, string&gt;[] -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddComboBox (id, title, defaultSelectionBoxItemId, choices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="defaultSelectionBoxItemId" Type="System.String" />
        <Parameter Name="choices" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "comboBoxItemId", "comboBoxItemContent" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "comboBoxItemId", "comboBoxItemContent" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="id">Required ID property used so that developers can retrieve user input once the app is activated.</param>
        <param name="title">Title text to display above the Combo Box.</param>
        <param name="defaultSelectionBoxItemId">Sets which item is selected by default, and refers to the Id property of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastSelectionBoxItem" />. If you do not provide this or null, the default selection will be empty (user sees nothing).</param>
        <param name="choices">List of choices that will be available for user to select.</param>
        <summary>
            Add a combo box / drop-down menu that contain options for user to select.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCustomTimeStamp">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddCustomTimeStamp (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddCustomTimeStamp(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddCustomTimeStamp(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddCustomTimeStamp (dateTime As DateTime) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddCustomTimeStamp : DateTime -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddCustomTimeStamp dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Custom Time to be displayed on the toast</param>
        <summary>
            Add custom time stamp on the toast to override the time display on the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHeader">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddHeader (string id, string title, CommunityToolkit.WinUI.Notifications.ToastArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddHeader(string id, string title, class CommunityToolkit.WinUI.Notifications.ToastArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddHeader(System.String,System.String,CommunityToolkit.WinUI.Notifications.ToastArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHeader (id As String, title As String, arguments As ToastArguments) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddHeader : string * string * CommunityToolkit.WinUI.Notifications.ToastArguments -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddHeader (id, title, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="arguments" Type="CommunityToolkit.WinUI.Notifications.ToastArguments" />
      </Parameters>
      <Docs>
        <param name="id">A developer-created identifier that uniquely identifies this header. If two notifications have the same header id, they will be displayed underneath the same header in Action Center.</param>
        <param name="title">A title for the header.</param>
        <param name="arguments">Developer-defined arguments that are returned to the app when the user clicks this header.</param>
        <summary>
            Add a header to a toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>More info about toast header: https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/toast-headers </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHeader">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddHeader (string id, string title, string arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddHeader(string id, string title, string arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddHeader(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHeader (id As String, title As String, arguments As String) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddHeader : string * string * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddHeader (id, title, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="arguments" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">A developer-created identifier that uniquely identifies this header. If two notifications have the same header id, they will be displayed underneath the same header in Action Center.</param>
        <param name="title">A title for the header.</param>
        <param name="arguments">A developer-defined string of arguments that is returned to the app when the user clicks this header.</param>
        <summary>
            Add a header to a toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>More info about toast header: https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/toast-headers </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHeroImage">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddHeroImage (Uri uri, string alternateText = default, bool? addImageQuery = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddHeroImage(class System.Uri uri, string alternateText, valuetype System.Nullable`1&lt;bool&gt; addImageQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddHeroImage(System.Uri,System.String,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHeroImage (uri As Uri, Optional alternateText As String = Nothing, Optional addImageQuery As Nullable(Of Boolean) = Nothing) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddHeroImage : Uri * string * Nullable&lt;bool&gt; -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddHeroImage (uri, alternateText, addImageQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
        <Parameter Name="addImageQuery" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="uri">The URI of the image. Can be from your application package, application data, or the internet. Internet images must be less than 200 KB in size.</param>
        <param name="alternateText">A description of the image, for users of assistive technologies.</param>
        <param name="addImageQuery">A value whether Windows is allowed to append a query string to the image URI supplied in the Tile notification.</param>
        <summary>
            Add a hero image to the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInlineImage">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddInlineImage (Uri uri, string alternateText = default, bool? addImageQuery = default, CommunityToolkit.WinUI.Notifications.AdaptiveImageCrop? hintCrop = default, bool? hintRemoveMargin = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddInlineImage(class System.Uri uri, string alternateText, valuetype System.Nullable`1&lt;bool&gt; addImageQuery, valuetype System.Nullable`1&lt;valuetype CommunityToolkit.WinUI.Notifications.AdaptiveImageCrop&gt; hintCrop, valuetype System.Nullable`1&lt;bool&gt; hintRemoveMargin) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddInlineImage(System.Uri,System.String,System.Nullable{System.Boolean},System.Nullable{CommunityToolkit.WinUI.Notifications.AdaptiveImageCrop},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddInlineImage (uri As Uri, Optional alternateText As String = Nothing, Optional addImageQuery As Nullable(Of Boolean) = Nothing, Optional hintCrop As Nullable(Of AdaptiveImageCrop) = Nothing, Optional hintRemoveMargin As Nullable(Of Boolean) = Nothing) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddInlineImage : Uri * string * Nullable&lt;bool&gt; * Nullable&lt;CommunityToolkit.WinUI.Notifications.AdaptiveImageCrop&gt; * Nullable&lt;bool&gt; -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddInlineImage (uri, alternateText, addImageQuery, hintCrop, hintRemoveMargin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
        <Parameter Name="addImageQuery" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="hintCrop" Type="System.Nullable&lt;CommunityToolkit.WinUI.Notifications.AdaptiveImageCrop&gt;" />
        <Parameter Name="hintRemoveMargin" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="uri">The URI of the image. Can be from your application package, application data, or the internet. Internet images must be less than 200 KB in size.</param>
        <param name="alternateText">A description of the image, for users of assistive technologies.</param>
        <param name="addImageQuery">A value whether Windows is allowed to append a query string to the image URI supplied in the Tile notification.</param>
        <param name="hintCrop">A value whether a margin is removed. images have an 8px margin around them.</param>
        <param name="hintRemoveMargin">This property is not used. Setting this has no impact.</param>
        <summary>
            Add an image inline with other toast content.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInputTextBox">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddInputTextBox (string id, string placeHolderContent = default, string title = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddInputTextBox(string id, string placeHolderContent, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddInputTextBox(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddInputTextBox (id As String, Optional placeHolderContent As String = Nothing, Optional title As String = Nothing) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddInputTextBox : string * string * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddInputTextBox (id, placeHolderContent, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="placeHolderContent" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Required ID property so that developers can retrieve user input once the app is activated.</param>
        <param name="placeHolderContent">Placeholder text to be displayed on the text box when the user hasn't typed any text yet.</param>
        <param name="title">Title text to display above the text box.</param>
        <summary>
            Add an input text box that the user can type into.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProgressBar">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddProgressBar (string title = default, double? value = default, bool isIndeterminate = false, string valueStringOverride = default, string status = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddProgressBar(string title, valuetype System.Nullable`1&lt;float64&gt; value, bool isIndeterminate, string valueStringOverride, string status) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddProgressBar(System.String,System.Nullable{System.Double},System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddProgressBar (Optional title As String = Nothing, Optional value As Nullable(Of Double) = Nothing, Optional isIndeterminate As Boolean = false, Optional valueStringOverride As String = Nothing, Optional status As String = Nothing) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddProgressBar : string * Nullable&lt;double&gt; * bool * string * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddProgressBar (title, value, isIndeterminate, valueStringOverride, status)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="value" Type="System.Nullable&lt;System.Double&gt;" />
        <Parameter Name="isIndeterminate" Type="System.Boolean" />
        <Parameter Name="valueStringOverride" Type="System.String" />
        <Parameter Name="status" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">Title of the progress bar.</param>
        <param name="value">Value of the progress bar. Default is 0</param>
        <param name="isIndeterminate">Determine if the progress bar value should be indeterminate. Default to false.</param>
        <param name="valueStringOverride">An optional string to be displayed instead of the default percentage string. If this isn't provided, something like "70%" will be displayed.</param>
        <param name="status">A status string which is displayed underneath the progress bar. This string should reflect the status of the operation, like "Downloading..." or "Installing...". Default to empty.</param>
        <summary>
            Add a progress bar to the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>More info at: https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/toast-progress-bar </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddText (string text, CommunityToolkit.WinUI.Notifications.AdaptiveTextStyle? hintStyle = default, bool? hintWrap = default, int? hintMaxLines = default, int? hintMinLines = default, CommunityToolkit.WinUI.Notifications.AdaptiveTextAlign? hintAlign = default, string language = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddText(string text, valuetype System.Nullable`1&lt;valuetype CommunityToolkit.WinUI.Notifications.AdaptiveTextStyle&gt; hintStyle, valuetype System.Nullable`1&lt;bool&gt; hintWrap, valuetype System.Nullable`1&lt;int32&gt; hintMaxLines, valuetype System.Nullable`1&lt;int32&gt; hintMinLines, valuetype System.Nullable`1&lt;valuetype CommunityToolkit.WinUI.Notifications.AdaptiveTextAlign&gt; hintAlign, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddText(System.String,System.Nullable{CommunityToolkit.WinUI.Notifications.AdaptiveTextStyle},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{CommunityToolkit.WinUI.Notifications.AdaptiveTextAlign},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddText (text As String, Optional hintStyle As Nullable(Of AdaptiveTextStyle) = Nothing, Optional hintWrap As Nullable(Of Boolean) = Nothing, Optional hintMaxLines As Nullable(Of Integer) = Nothing, Optional hintMinLines As Nullable(Of Integer) = Nothing, Optional hintAlign As Nullable(Of AdaptiveTextAlign) = Nothing, Optional language As String = Nothing) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddText : string * Nullable&lt;CommunityToolkit.WinUI.Notifications.AdaptiveTextStyle&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;CommunityToolkit.WinUI.Notifications.AdaptiveTextAlign&gt; * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddText (text, hintStyle, hintWrap, hintMaxLines, hintMinLines, hintAlign, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="hintStyle" Type="System.Nullable&lt;CommunityToolkit.WinUI.Notifications.AdaptiveTextStyle&gt;" />
        <Parameter Name="hintWrap" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="hintMaxLines" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="hintMinLines" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="hintAlign" Type="System.Nullable&lt;CommunityToolkit.WinUI.Notifications.AdaptiveTextAlign&gt;" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Custom text to display on the tile.</param>
        <param name="hintStyle">This property is not used. Setting this has no effect.</param>
        <param name="hintWrap">This property is not used. Setting this has no effect. If you need to disable wrapping, set hintMaxLines to 1.</param>
        <param name="hintMaxLines">The maximum number of lines the text element is allowed to display.</param>
        <param name="hintMinLines">hintMinLines is not used. Setting this has no effect.</param>
        <param name="hintAlign">hintAlign is not used. Setting this has no effect.</param>
        <param name="language">
            The target locale of the XML payload, specified as a BCP-47 language tags such as "en-US" or "fr-FR". The locale specified here overrides any other specified locale, such as that in binding or visual.
            </param>
        <summary>
            Add text to the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>More info at: https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/adaptive-interactive-toasts#text-elements</remarks>
        <exception cref="T:System.InvalidOperationException">Throws when attempting to add/reserve more than 4 lines on a single toast. </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Throws when <paramref name="hintMaxLines" /> value is larger than 2. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddToastActivationInfo">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddToastActivationInfo (string launchArgs, CommunityToolkit.WinUI.Notifications.ToastActivationType activationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddToastActivationInfo(string launchArgs, valuetype CommunityToolkit.WinUI.Notifications.ToastActivationType activationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddToastActivationInfo(System.String,CommunityToolkit.WinUI.Notifications.ToastActivationType)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddToastActivationInfo (launchArgs As String, activationType As ToastActivationType) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddToastActivationInfo : string * CommunityToolkit.WinUI.Notifications.ToastActivationType -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddToastActivationInfo (launchArgs, activationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="launchArgs" Type="System.String" />
        <Parameter Name="activationType" Type="CommunityToolkit.WinUI.Notifications.ToastActivationType" />
      </Parameters>
      <Docs>
        <param name="launchArgs">Custom app-defined launch arguments to be passed along on toast activation</param>
        <param name="activationType">Set the activation type that will be used when the user click on this toast</param>
        <summary>
            Instead of this method, for foreground/background activation, it is suggested to use <see cref="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddArgument(System.String,System.String)" /> and optionally <see cref="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.SetBackgroundActivation" />. For protocol activation, you should use <see cref="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.SetProtocolActivation(System.Uri)" />. Add info that can be used by the application when the app was activated/launched by the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToastInput">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddToastInput (CommunityToolkit.WinUI.Notifications.IToastInput input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddToastInput(class CommunityToolkit.WinUI.Notifications.IToastInput input) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddToastInput(CommunityToolkit.WinUI.Notifications.IToastInput)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddToastInput (input As IToastInput) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddToastInput : CommunityToolkit.WinUI.Notifications.IToastInput -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddToastInput input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="CommunityToolkit.WinUI.Notifications.IToastInput" />
      </Parameters>
      <Docs>
        <param name="input">An instance of a class that implement <see cref="T:CommunityToolkit.WinUI.Notifications.IToastInput" /> that will be used on the toast.</param>
        <summary>
            Add an input option to the Toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddVisualChild">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddVisualChild (CommunityToolkit.WinUI.Notifications.IToastBindingGenericChild child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder AddVisualChild(class CommunityToolkit.WinUI.Notifications.IToastBindingGenericChild child) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.AddVisualChild(CommunityToolkit.WinUI.Notifications.IToastBindingGenericChild)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddVisualChild (child As IToastBindingGenericChild) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.AddVisualChild : CommunityToolkit.WinUI.Notifications.IToastBindingGenericChild -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.AddVisualChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="CommunityToolkit.WinUI.Notifications.IToastBindingGenericChild" />
      </Parameters>
      <Docs>
        <param name="child">An instance of a class that implement <see cref="T:CommunityToolkit.WinUI.Notifications.IToastBindingGenericChild" />.</param>
        <summary>
            Add a visual element to the toast.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContent Content { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CommunityToolkit.WinUI.Notifications.ToastContent Content" />
      <MemberSignature Language="DocId" Value="P:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.Content" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Content As ToastContent" />
      <MemberSignature Language="F#" Value="member this.Content : CommunityToolkit.WinUI.Notifications.ToastContent" Usage="CommunityToolkit.WinUI.Notifications.ToastContentBuilder.Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets internal instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContent" />. This is equivalent to the call to <see cref="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.GetToastContent" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProgressBarData">
      <MemberSignature Language="C#" Value="public static Windows.UI.Notifications.NotificationData CreateProgressBarData (CommunityToolkit.WinUI.Notifications.ToastContent toast, int index = 0, string title = default, double? value = default, string valueStringOverride = default, string status = default, uint sequence = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Notifications.NotificationData CreateProgressBarData(class CommunityToolkit.WinUI.Notifications.ToastContent toast, int32 index, string title, valuetype System.Nullable`1&lt;float64&gt; value, string valueStringOverride, string status, unsigned int32 sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.CreateProgressBarData(CommunityToolkit.WinUI.Notifications.ToastContent,System.Int32,System.String,System.Nullable{System.Double},System.String,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProgressBarData (toast As ToastContent, Optional index As Integer = 0, Optional title As String = Nothing, Optional value As Nullable(Of Double) = Nothing, Optional valueStringOverride As String = Nothing, Optional status As String = Nothing, Optional sequence As UInteger = 0) As NotificationData" />
      <MemberSignature Language="F#" Value="static member CreateProgressBarData : CommunityToolkit.WinUI.Notifications.ToastContent * int * string * Nullable&lt;double&gt; * string * string * uint32 -&gt; Windows.UI.Notifications.NotificationData" Usage="CommunityToolkit.WinUI.Notifications.ToastContentBuilder.CreateProgressBarData (toast, index, title, value, valueStringOverride, status, sequence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.UI.Notifications.NotificationData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toast" Type="CommunityToolkit.WinUI.Notifications.ToastContent" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="value" Type="System.Nullable&lt;System.Double&gt;" />
        <Parameter Name="valueStringOverride" Type="System.String" />
        <Parameter Name="status" Type="System.String" />
        <Parameter Name="sequence" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="toast">Instance of ToastContent that contain progress bars that need to be updated</param>
        <param name="index">Index of the progress bar (0-based) that this notification data is updating in the case that toast has multiple progress bars. Default to 0.</param>
        <param name="title">Title of the progress bar.</param>
        <param name="value">Value of the progress bar.</param>
        <param name="valueStringOverride">An optional string to be displayed instead of the default percentage string. If this isn't provided, something like "70%" will be displayed.</param>
        <param name="status"> A status string, which is displayed underneath the progress bar on the left. Default to empty.</param>
        <param name="sequence">A sequence number to prevent out-of-order updates, or assign 0 to indicate "always update".</param>
        <summary>
            Create an instance of NotificationData that can be used to update toast that has a progress bar.
            </summary>
        <returns>An instance of NotificationData that can be used to update the toast.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetToastContent">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContent GetToastContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContent GetToastContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.GetToastContent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetToastContent () As ToastContent" />
      <MemberSignature Language="F#" Value="member this.GetToastContent : unit -&gt; CommunityToolkit.WinUI.Notifications.ToastContent" Usage="toastContentBuilder.GetToastContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContent</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Get the instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContent" /> that has been built by the builder with specified configuration so far.
            </summary>
        <returns>An instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContent" /> that can be used to create tile notification.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public Windows.Data.Xml.Dom.XmlDocument GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Windows.Data.Xml.Dom.XmlDocument GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As XmlDocument" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; Windows.Data.Xml.Dom.XmlDocument" Usage="toastContentBuilder.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Data.Xml.Dom.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Retrieves the notification XML content as a WinRT XmlDocument, so that it can be used with a local Toast notification's constructor on either <see cref="T:Windows.UI.Notifications.ToastNotification" /> or <see cref="T:Windows.UI.Notifications.ScheduledToastNotification" />.
            </summary>
        <returns>The notification XML content as a WinRT XmlDocument.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (DateTimeOffset deliveryTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(valuetype System.DateTimeOffset deliveryTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.Schedule(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Schedule (deliveryTime As DateTimeOffset)" />
      <MemberSignature Language="F#" Value="member this.Schedule : DateTimeOffset -&gt; unit" Usage="toastContentBuilder.Schedule deliveryTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deliveryTime" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="deliveryTime">The date and time that Windows should display the toast notification. This time must be in the future.</param>
        <summary>
            Schedules the notification.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (DateTimeOffset deliveryTime, CommunityToolkit.WinUI.Notifications.CustomizeScheduledToast customize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(valuetype System.DateTimeOffset deliveryTime, class CommunityToolkit.WinUI.Notifications.CustomizeScheduledToast customize) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.Schedule(System.DateTimeOffset,CommunityToolkit.WinUI.Notifications.CustomizeScheduledToast)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Schedule (deliveryTime As DateTimeOffset, customize As CustomizeScheduledToast)" />
      <MemberSignature Language="F#" Value="member this.Schedule : DateTimeOffset * CommunityToolkit.WinUI.Notifications.CustomizeScheduledToast -&gt; unit" Usage="toastContentBuilder.Schedule (deliveryTime, customize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deliveryTime" Type="System.DateTimeOffset" />
        <Parameter Name="customize" Type="CommunityToolkit.WinUI.Notifications.CustomizeScheduledToast" />
      </Parameters>
      <Docs>
        <param name="deliveryTime">The date and time that Windows should display the toast notification. This time must be in the future.</param>
        <param name="customize">Allows you to set additional properties on the <see cref="T:Windows.UI.Notifications.ScheduledToastNotification" /> object.</param>
        <summary>
            Schedules the notification.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction Schedule (DateTimeOffset deliveryTime, CommunityToolkit.WinUI.Notifications.CustomizeScheduledToastAsync customize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Windows.Foundation.IAsyncAction Schedule(valuetype System.DateTimeOffset deliveryTime, class CommunityToolkit.WinUI.Notifications.CustomizeScheduledToastAsync customize) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.Schedule(System.DateTimeOffset,CommunityToolkit.WinUI.Notifications.CustomizeScheduledToastAsync)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schedule (deliveryTime As DateTimeOffset, customize As CustomizeScheduledToastAsync) As IAsyncAction" />
      <MemberSignature Language="F#" Value="member this.Schedule : DateTimeOffset * CommunityToolkit.WinUI.Notifications.CustomizeScheduledToastAsync -&gt; Windows.Foundation.IAsyncAction" Usage="toastContentBuilder.Schedule (deliveryTime, customize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deliveryTime" Type="System.DateTimeOffset" />
        <Parameter Name="customize" Type="CommunityToolkit.WinUI.Notifications.CustomizeScheduledToastAsync" />
      </Parameters>
      <Docs>
        <param name="deliveryTime">The date and time that Windows should display the toast notification. This time must be in the future.</param>
        <param name="customize">Allows you to set additional properties on the <see cref="T:Windows.UI.Notifications.ScheduledToastNotification" /> object.</param>
        <summary>
            Schedules the notification.
            </summary>
        <returns>An operation that completes after your async customizations have completed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundActivation">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetBackgroundActivation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetBackgroundActivation() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.SetBackgroundActivation" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBackgroundActivation () As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member SetBackgroundActivation : unit -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.SetBackgroundActivation : unit -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.SetBackgroundActivation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures the toast notification to use background activation when the toast body is clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProtocolActivation">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetProtocolActivation (Uri protocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetProtocolActivation(class System.Uri protocol) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.SetProtocolActivation(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetProtocolActivation (protocol As Uri) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member SetProtocolActivation : Uri -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.SetProtocolActivation : Uri -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.SetProtocolActivation protocol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="protocol">The protocol to launch.</param>
        <summary>
            Configures the toast notification to launch the specified url when the toast body is clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProtocolActivation">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetProtocolActivation (Uri protocol, string targetApplicationPfn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetProtocolActivation(class System.Uri protocol, string targetApplicationPfn) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.SetProtocolActivation(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetProtocolActivation (protocol As Uri, targetApplicationPfn As String) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="abstract member SetProtocolActivation : Uri * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder&#xA;override this.SetProtocolActivation : Uri * string -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.SetProtocolActivation (protocol, targetApplicationPfn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="System.Uri" />
        <Parameter Name="targetApplicationPfn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="protocol">The protocol to launch.</param>
        <param name="targetApplicationPfn">New in Creators Update: The target PFN, so that regardless of whether multiple apps are registered to handle the same protocol uri, your desired app will always be launched.</param>
        <summary>
            Configures the toast notification to launch the specified url when the toast body is clicked.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetToastDuration">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetToastDuration (CommunityToolkit.WinUI.Notifications.ToastDuration duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetToastDuration(valuetype CommunityToolkit.WinUI.Notifications.ToastDuration duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.SetToastDuration(CommunityToolkit.WinUI.Notifications.ToastDuration)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetToastDuration (duration As ToastDuration) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.SetToastDuration : CommunityToolkit.WinUI.Notifications.ToastDuration -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.SetToastDuration duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="CommunityToolkit.WinUI.Notifications.ToastDuration" />
      </Parameters>
      <Docs>
        <param name="duration">Duration of the toast</param>
        <summary>
            Sets the amount of time the Toast should display. You typically should use the
            Scenario attribute instead, which impacts how long a Toast stays on screen.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetToastScenario">
      <MemberSignature Language="C#" Value="public CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetToastScenario (CommunityToolkit.WinUI.Notifications.ToastScenario scenario);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CommunityToolkit.WinUI.Notifications.ToastContentBuilder SetToastScenario(valuetype CommunityToolkit.WinUI.Notifications.ToastScenario scenario) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.SetToastScenario(CommunityToolkit.WinUI.Notifications.ToastScenario)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetToastScenario (scenario As ToastScenario) As ToastContentBuilder" />
      <MemberSignature Language="F#" Value="member this.SetToastScenario : CommunityToolkit.WinUI.Notifications.ToastScenario -&gt; CommunityToolkit.WinUI.Notifications.ToastContentBuilder" Usage="toastContentBuilder.SetToastScenario scenario" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CommunityToolkit.WinUI.Notifications.ToastContentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scenario" Type="CommunityToolkit.WinUI.Notifications.ToastScenario" />
      </Parameters>
      <Docs>
        <param name="scenario">Scenario to be used for the toast's behavior</param>
        <summary>
             Sets the scenario, to make the Toast behave like an alarm, reminder, or more.
            </summary>
        <returns>The current instance of <see cref="T:CommunityToolkit.WinUI.Notifications.ToastContentBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="toastContentBuilder.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Shows a new toast notification with the current content.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (CommunityToolkit.WinUI.Notifications.CustomizeToast customize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class CommunityToolkit.WinUI.Notifications.CustomizeToast customize) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.Show(CommunityToolkit.WinUI.Notifications.CustomizeToast)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show (customize As CustomizeToast)" />
      <MemberSignature Language="F#" Value="member this.Show : CommunityToolkit.WinUI.Notifications.CustomizeToast -&gt; unit" Usage="toastContentBuilder.Show customize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customize" Type="CommunityToolkit.WinUI.Notifications.CustomizeToast" />
      </Parameters>
      <Docs>
        <param name="customize">Allows you to set additional properties on the <see cref="T:Windows.UI.Notifications.ToastNotification" /> object.</param>
        <summary>
            Shows a new toast notification with the current content.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction Show (CommunityToolkit.WinUI.Notifications.CustomizeToastAsync customize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Windows.Foundation.IAsyncAction Show(class CommunityToolkit.WinUI.Notifications.CustomizeToastAsync customize) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.WinUI.Notifications.ToastContentBuilder.Show(CommunityToolkit.WinUI.Notifications.CustomizeToastAsync)" />
      <MemberSignature Language="VB.NET" Value="Public Function Show (customize As CustomizeToastAsync) As IAsyncAction" />
      <MemberSignature Language="F#" Value="member this.Show : CommunityToolkit.WinUI.Notifications.CustomizeToastAsync -&gt; Windows.Foundation.IAsyncAction" Usage="toastContentBuilder.Show customize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.WinUI.Notifications</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customize" Type="CommunityToolkit.WinUI.Notifications.CustomizeToastAsync" />
      </Parameters>
      <Docs>
        <param name="customize">Allows you to set additional properties on the <see cref="T:Windows.UI.Notifications.ToastNotification" /> object.</param>
        <summary>
            Shows a new toast notification with the current content.
            </summary>
        <returns>An operation that completes after your async customizations have completed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
