<Type Name="Guard" FullName="Microsoft.Toolkit.Diagnostics.Guard">
  <TypeSignature Language="C#" Value="public static class Guard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Guard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Toolkit.Diagnostics.Guard" />
  <TypeSignature Language="VB.NET" Value="Public Class Guard" />
  <TypeSignature Language="F#" Value="type Guard = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit</AssemblyName>
    <AssemblyVersion>6.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Helper methods to verify conditions when running code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public static void CanRead (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CanRead(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.CanRead(System.IO.Stream,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CanRead (stream As Stream, name As String)" />
      <MemberSignature Language="F#" Value="static member CanRead : System.IO.Stream * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.CanRead (stream, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">The input <see cref="T:System.IO.Stream" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.IO.Stream" /> instance must support reading.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> doesn't support reading.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public static void CanSeek (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CanSeek(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.CanSeek(System.IO.Stream,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CanSeek (stream As Stream, name As String)" />
      <MemberSignature Language="F#" Value="static member CanSeek : System.IO.Stream * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.CanSeek (stream, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">The input <see cref="T:System.IO.Stream" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.IO.Stream" /> instance must support seeking.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> doesn't support seeking.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public static void CanWrite (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CanWrite(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.CanWrite(System.IO.Stream,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CanWrite (stream As Stream, name As String)" />
      <MemberSignature Language="F#" Value="static member CanWrite : System.IO.Stream * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.CanWrite (stream, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">The input <see cref="T:System.IO.Stream" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.IO.Stream" /> instance must support writing.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> doesn't support writing.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo (string text, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo(string text, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo (text As String, size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : string * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (text, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo (string source, string destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo(string source, string destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo (source As String, destination As String, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : string * string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="destination" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The source <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.String" /> instance must have the same size of a destination <see cref="T:System.String" /> instance.
            </summary>
        <remarks>The <see cref="T:System.String" /> type is immutable, but the name of this API is kept for consistency with the other overloads.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; source, System.Collections.Generic.ICollection&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; source, class System.Collections.Generic.ICollection`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (source As ICollection(Of T), destination As ICollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : System.Collections.Generic.ICollection&lt;'T&gt; * System.Collections.Generic.ICollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have the same size of a destination <see cref="T:System.Collections.Generic.ICollection`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (collection As ICollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : System.Collections.Generic.ICollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; source, System.Collections.Generic.ICollection&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; source, class System.Collections.Generic.ICollection`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (source As IReadOnlyCollection(Of T), destination As ICollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * System.Collections.Generic.ICollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have the same size of a destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (collection As IReadOnlyCollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; source, System.Collections.Generic.List&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; source, class System.Collections.Generic.List`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (source As List(Of T), destination As List(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : System.Collections.Generic.List&lt;'T&gt; * System.Collections.Generic.List&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.List`1" /> instance must have the same size of a destination <see cref="T:System.Collections.Generic.List`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (list As List(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : System.Collections.Generic.List&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (list, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (Memory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Memory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (memory As Memory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : Memory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (Memory&lt;T&gt; source, Memory&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; source, valuetype System.Memory`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (source As Memory(Of T), destination As Memory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : Memory&lt;'T&gt; * Memory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Memory`1" /> instance must have the same size of a destination <see cref="T:System.Memory`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (memory As ReadOnlyMemory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : ReadOnlyMemory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (ReadOnlyMemory&lt;T&gt; source, Memory&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; source, valuetype System.Memory`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (source As ReadOnlyMemory(Of T), destination As Memory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : ReadOnlyMemory&lt;'T&gt; * Memory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.ReadOnlyMemory`1" /> instance must have the same size of a destination <see cref="T:System.ReadOnlyMemory`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (ReadOnlySpan&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (span As ReadOnlySpan(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : ReadOnlySpan&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (ReadOnlySpan&lt;T&gt; source, Span&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; source, valuetype System.Span`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (source As ReadOnlySpan(Of T), destination As Span(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : ReadOnlySpan&lt;'T&gt; * Span&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.ReadOnlySpan`1" /> instance must have the same size of a destination <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (Span&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Span{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (span As Span(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : Span&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (Span&lt;T&gt; source, Span&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; source, valuetype System.Span`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Span{``0},System.Span{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (source As Span(Of T), destination As Span(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : Span&lt;'T&gt; * Span&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Span&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Span`1" /> instance must have the same size of a destination <see cref="T:System.Span`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (T[] array, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(!!T[] array, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (array As T(), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : 'T[] * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (array, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size of a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is != <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeEqualTo&lt;T&gt; (T[] source, T[] destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeEqualTo&lt;T&gt;(!!T[] source, !!T[] destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeEqualTo(Of T) (source As T(), destination As T(), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeEqualTo : 'T[] * 'T[] * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[]" />
        <Parameter Name="destination" Type="T[]" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="source">The source <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="destination">The destination <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see typeparamref="T" /> array instance must have the same size of a destination <see typeparamref="T" /> array instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan (string text, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan(string text, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan (text As String, size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : string * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (text, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan(Of T) (collection As ICollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : System.Collections.Generic.ICollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan(Of T) (collection As IReadOnlyCollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan(Of T) (list As List(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : System.Collections.Generic.List&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (list, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan&lt;T&gt; (Memory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Memory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan(Of T) (memory As Memory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : Memory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan(Of T) (memory As ReadOnlyMemory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : ReadOnlyMemory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan&lt;T&gt; (ReadOnlySpan&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan(Of T) (span As ReadOnlySpan(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : ReadOnlySpan&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan&lt;T&gt; (Span&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Span{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan(Of T) (span As Span(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : Span&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThan&lt;T&gt; (T[] array, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThan&lt;T&gt;(!!T[] array, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThan(Of T) (array As T(), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThan : 'T[] * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan (array, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size over a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is &lt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo (string text, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo(string text, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo (text As String, size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : string * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (text, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size of at least specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo(Of T) (collection As ICollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : System.Collections.Generic.ICollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo(Of T) (collection As IReadOnlyCollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo(Of T) (list As List(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : System.Collections.Generic.List&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (list, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo&lt;T&gt; (Memory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo(Of T) (memory As Memory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : Memory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo(Of T) (memory As ReadOnlyMemory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : ReadOnlyMemory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo&lt;T&gt; (ReadOnlySpan&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo(Of T) (span As ReadOnlySpan(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : ReadOnlySpan&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo&lt;T&gt; (Span&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo(Of T) (span As Span(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : Span&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeGreaterThanOrEqualTo&lt;T&gt; (T[] array, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeGreaterThanOrEqualTo&lt;T&gt;(!!T[] array, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeGreaterThanOrEqualTo(Of T) (array As T(), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeGreaterThanOrEqualTo : 'T[] * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo (array, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size of at least or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is &lt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan (string text, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan(string text, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan (text As String, size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : string * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (text, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan(Of T) (collection As ICollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : System.Collections.Generic.ICollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan(Of T) (collection As IReadOnlyCollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan(Of T) (list As List(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : System.Collections.Generic.List&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (list, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan&lt;T&gt; (Memory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Memory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan(Of T) (memory As Memory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : Memory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan(Of T) (memory As ReadOnlyMemory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : ReadOnlyMemory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan&lt;T&gt; (ReadOnlySpan&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan(Of T) (span As ReadOnlySpan(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : ReadOnlySpan&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan&lt;T&gt; (Span&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Span{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan(Of T) (span As Span(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : Span&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThan&lt;T&gt; (T[] array, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThan&lt;T&gt;(!!T[] array, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThan(Of T) (array As T(), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThan : 'T[] * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan (array, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size of less than a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is &gt;= <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo (string text, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo(string text, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo (text As String, size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : string * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (text, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo (string source, string destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo(string source, string destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo (source As String, destination As String, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : string * string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="destination" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The source <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.String" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.String" /> instance.
            </summary>
        <remarks>The <see cref="T:System.String" /> type is immutable, but the name of this API is kept for consistency with the other overloads.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; source, System.Collections.Generic.ICollection&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; source, class System.Collections.Generic.ICollection`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (source As ICollection(Of T), destination As ICollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : System.Collections.Generic.ICollection&lt;'T&gt; * System.Collections.Generic.ICollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.ICollection`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (collection As ICollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : System.Collections.Generic.ICollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; source, System.Collections.Generic.ICollection&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; source, class System.Collections.Generic.ICollection`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (source As IReadOnlyCollection(Of T), destination As ICollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * System.Collections.Generic.ICollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (collection As IReadOnlyCollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; source, System.Collections.Generic.List&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; source, class System.Collections.Generic.List`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (source As List(Of T), destination As List(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : System.Collections.Generic.List&lt;'T&gt; * System.Collections.Generic.List&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.List`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (list As List(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : System.Collections.Generic.List&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (list, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (Memory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (memory As Memory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : Memory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (Memory&lt;T&gt; source, Memory&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; source, valuetype System.Memory`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (source As Memory(Of T), destination As Memory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : Memory&lt;'T&gt; * Memory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Memory`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Memory`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (memory As ReadOnlyMemory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : ReadOnlyMemory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (ReadOnlyMemory&lt;T&gt; source, Memory&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; source, valuetype System.Memory`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (source As ReadOnlyMemory(Of T), destination As Memory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : ReadOnlyMemory&lt;'T&gt; * Memory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.ReadOnlyMemory`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (ReadOnlySpan&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (span As ReadOnlySpan(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : ReadOnlySpan&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (ReadOnlySpan&lt;T&gt; source, Span&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; source, valuetype System.Span`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (source As ReadOnlySpan(Of T), destination As Span(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : ReadOnlySpan&lt;'T&gt; * Span&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (Span&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (span As Span(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : Span&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (Span&lt;T&gt; source, Span&lt;T&gt; destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; source, valuetype System.Span`1&lt;!!T&gt; destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Span{``0},System.Span{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (source As Span(Of T), destination As Span(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : Span&lt;'T&gt; * Span&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Span&lt;T&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="source">The source <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="destination">The destination <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see cref="T:System.Span`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Span`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (T[] array, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(!!T[] array, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (array As T(), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : 'T[] * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (array, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size of less than or equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is &gt; <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeLessThanOrEqualTo&lt;T&gt; (T[] source, T[] destination, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeLessThanOrEqualTo&lt;T&gt;(!!T[] source, !!T[] destination, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeLessThanOrEqualTo(Of T) (source As T(), destination As T(), name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeLessThanOrEqualTo : 'T[] * 'T[] * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo (source, destination, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[]" />
        <Parameter Name="destination" Type="T[]" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="source">The source <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="destination">The destination <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the source <see typeparamref="T" /> array instance must have a size of less than or equal to that of a destination <see typeparamref="T" /> array instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo (string text, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo(string text, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo (text As String, size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : string * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (text, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo(Of T) (collection As ICollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : System.Collections.Generic.ICollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo(Of T) (collection As IReadOnlyCollection(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (collection, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo(Of T) (list As List(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : System.Collections.Generic.List&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (list, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo&lt;T&gt; (Memory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Memory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo(Of T) (memory As Memory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : Memory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo(Of T) (memory As ReadOnlyMemory(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : ReadOnlyMemory&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (memory, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo&lt;T&gt; (ReadOnlySpan&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo(Of T) (span As ReadOnlySpan(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : ReadOnlySpan&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo&lt;T&gt; (Span&lt;T&gt; span, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Span{``0},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo(Of T) (span As Span(Of T), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : Span&lt;'T&gt; * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (span, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasSizeNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void HasSizeNotEqualTo&lt;T&gt; (T[] array, int size, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasSizeNotEqualTo&lt;T&gt;(!!T[] array, int32 size, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasSizeNotEqualTo(Of T) (array As T(), size As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member HasSizeNotEqualTo : 'T[] * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo (array, size, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="size">The target size to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size not equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is == <paramref name="size" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasStatusEqualTo">
      <MemberSignature Language="C#" Value="public static void HasStatusEqualTo (System.Threading.Tasks.Task task, System.Threading.Tasks.TaskStatus status, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasStatusEqualTo(class System.Threading.Tasks.Task task, valuetype System.Threading.Tasks.TaskStatus status, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasStatusEqualTo (task As Task, status As TaskStatus, name As String)" />
      <MemberSignature Language="F#" Value="static member HasStatusEqualTo : System.Threading.Tasks.Task * System.Threading.Tasks.TaskStatus * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasStatusEqualTo (task, status, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="status" Type="System.Threading.Tasks.TaskStatus" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="status">The task status that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance has a specific status.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> doesn't match <paramref name="status" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasStatusNotEqualTo">
      <MemberSignature Language="C#" Value="public static void HasStatusNotEqualTo (System.Threading.Tasks.Task task, System.Threading.Tasks.TaskStatus status, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HasStatusNotEqualTo(class System.Threading.Tasks.Task task, valuetype System.Threading.Tasks.TaskStatus status, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusNotEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HasStatusNotEqualTo (task As Task, status As TaskStatus, name As String)" />
      <MemberSignature Language="F#" Value="static member HasStatusNotEqualTo : System.Threading.Tasks.Task * System.Threading.Tasks.TaskStatus * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.HasStatusNotEqualTo (task, status, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="status" Type="System.Threading.Tasks.TaskStatus" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="status">The task status that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance has not a specific status.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> matches <paramref name="status" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableToType">
      <MemberSignature Language="C#" Value="public static void IsAssignableToType (object value, Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsAssignableToType(object value, class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType(System.Object,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsAssignableToType (value As Object, type As Type, name As String)" />
      <MemberSignature Language="F#" Value="static member IsAssignableToType : obj * Type * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType (value, type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Object" /> to test.</param>
        <param name="type">The type to look for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value can be assigned to a specified type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> can't be assigned to <paramref name="type" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableToType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsAssignableToType&lt;T&gt; (object value, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsAssignableToType&lt;T&gt;(object value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType``1(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsAssignableToType(Of T) (value As Object, name As String)" />
      <MemberSignature Language="F#" Value="static member IsAssignableToType : obj * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type to check the input value against.</typeparam>
        <param name="value">The input <see cref="T:System.Object" /> to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value can be assigned to a specified type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> can't be assigned to type <typeparamref name="T" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAtStartPosition">
      <MemberSignature Language="C#" Value="public static void IsAtStartPosition (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsAtStartPosition(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsAtStartPosition(System.IO.Stream,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsAtStartPosition (stream As Stream, name As String)" />
      <MemberSignature Language="F#" Value="static member IsAtStartPosition : System.IO.Stream * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsAtStartPosition (stream, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">The input <see cref="T:System.IO.Stream" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.IO.Stream" /> instance must be at the starting position.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> is not at the starting position.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (byte value, byte minimum, byte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(unsigned int8 value, unsigned int8 minimum, unsigned int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Byte,System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As Byte, minimum As Byte, maximum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : byte * byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="minimum" Type="System.Byte" />
        <Parameter Name="maximum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (char value, char minimum, char maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(char value, char minimum, char maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Char,System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As Char, minimum As Char, maximum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : char * char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="minimum" Type="System.Char" />
        <Parameter Name="maximum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (decimal value, decimal minimum, decimal maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(valuetype System.Decimal value, valuetype System.Decimal minimum, valuetype System.Decimal maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Decimal,System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As Decimal, minimum As Decimal, maximum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : decimal * decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="minimum" Type="System.Decimal" />
        <Parameter Name="maximum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (double value, double minimum, double maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(float64 value, float64 minimum, float64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As Double, minimum As Double, maximum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : double * double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="minimum" Type="System.Double" />
        <Parameter Name="maximum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (short value, short minimum, short maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(int16 value, int16 minimum, int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int16,System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As Short, minimum As Short, maximum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : int16 * int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="minimum" Type="System.Int16" />
        <Parameter Name="maximum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (int value, int minimum, int maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(int32 value, int32 minimum, int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int32,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As Integer, minimum As Integer, maximum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : int * int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="minimum" Type="System.Int32" />
        <Parameter Name="maximum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (long value, long minimum, long maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(int64 value, int64 minimum, int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int64,System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As Long, minimum As Long, maximum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : int64 * int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="minimum" Type="System.Int64" />
        <Parameter Name="maximum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (nint value, nint minimum, nint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(native int value, native int minimum, native int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.IntPtr,System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As IntPtr, minimum As IntPtr, maximum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : nativeint * nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.IntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see langword="nint" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (sbyte value, sbyte minimum, sbyte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(int8 value, int8 minimum, int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.SByte,System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As SByte, minimum As SByte, maximum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : sbyte * sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="minimum" Type="System.SByte" />
        <Parameter Name="maximum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (float value, float minimum, float maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(float32 value, float32 minimum, float32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Single,System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As Single, minimum As Single, maximum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : single * single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="minimum" Type="System.Single" />
        <Parameter Name="maximum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (ushort value, ushort minimum, ushort maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(unsigned int16 value, unsigned int16 minimum, unsigned int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt16,System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As UShort, minimum As UShort, maximum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : uint16 * uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="minimum" Type="System.UInt16" />
        <Parameter Name="maximum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (uint value, uint minimum, uint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(unsigned int32 value, unsigned int32 minimum, unsigned int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt32,System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As UInteger, minimum As UInteger, maximum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : uint32 * uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="minimum" Type="System.UInt32" />
        <Parameter Name="maximum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (ulong value, ulong minimum, ulong maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(unsigned int64 value, unsigned int64 minimum, unsigned int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt64,System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As ULong, minimum As ULong, maximum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : uint64 * uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="minimum" Type="System.UInt64" />
        <Parameter Name="maximum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween">
      <MemberSignature Language="C#" Value="public static void IsBetween (nuint value, nuint minimum, nuint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween(native unsigned int value, native unsigned int minimum, native unsigned int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween (value As UIntPtr, minimum As UIntPtr, maximum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : unativeint * unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.UIntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see langword="nuint" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetween&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsBetween&lt;T&gt; (T value, T minimum, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetween&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween``1(``0,``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetween(Of T As IComparable(Of T)) (value As T, minimum As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetween : 'T * 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="minimum">The exclusive minimum <typeparamref name="T" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (byte value, byte minimum, byte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(unsigned int8 value, unsigned int8 minimum, unsigned int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Byte,System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As Byte, minimum As Byte, maximum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : byte * byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="minimum" Type="System.Byte" />
        <Parameter Name="maximum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (char value, char minimum, char maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(char value, char minimum, char maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Char,System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As Char, minimum As Char, maximum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : char * char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="minimum" Type="System.Char" />
        <Parameter Name="maximum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (decimal value, decimal minimum, decimal maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(valuetype System.Decimal value, valuetype System.Decimal minimum, valuetype System.Decimal maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Decimal,System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As Decimal, minimum As Decimal, maximum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : decimal * decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="minimum" Type="System.Decimal" />
        <Parameter Name="maximum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (double value, double minimum, double maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(float64 value, float64 minimum, float64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As Double, minimum As Double, maximum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : double * double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="minimum" Type="System.Double" />
        <Parameter Name="maximum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (short value, short minimum, short maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(int16 value, int16 minimum, int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int16,System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As Short, minimum As Short, maximum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : int16 * int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="minimum" Type="System.Int16" />
        <Parameter Name="maximum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (int value, int minimum, int maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(int32 value, int32 minimum, int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int32,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As Integer, minimum As Integer, maximum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : int * int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="minimum" Type="System.Int32" />
        <Parameter Name="maximum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (long value, long minimum, long maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(int64 value, int64 minimum, int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int64,System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As Long, minimum As Long, maximum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : int64 * int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="minimum" Type="System.Int64" />
        <Parameter Name="maximum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (nint value, nint minimum, nint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(native int value, native int minimum, native int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.IntPtr,System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As IntPtr, minimum As IntPtr, maximum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : nativeint * nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.IntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nint" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (sbyte value, sbyte minimum, sbyte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(int8 value, int8 minimum, int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.SByte,System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As SByte, minimum As SByte, maximum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : sbyte * sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="minimum" Type="System.SByte" />
        <Parameter Name="maximum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (float value, float minimum, float maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(float32 value, float32 minimum, float32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Single,System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As Single, minimum As Single, maximum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : single * single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="minimum" Type="System.Single" />
        <Parameter Name="maximum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (ushort value, ushort minimum, ushort maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(unsigned int16 value, unsigned int16 minimum, unsigned int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt16,System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As UShort, minimum As UShort, maximum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : uint16 * uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="minimum" Type="System.UInt16" />
        <Parameter Name="maximum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (uint value, uint minimum, uint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(unsigned int32 value, unsigned int32 minimum, unsigned int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt32,System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As UInteger, minimum As UInteger, maximum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : uint32 * uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="minimum" Type="System.UInt32" />
        <Parameter Name="maximum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (ulong value, ulong minimum, ulong maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(unsigned int64 value, unsigned int64 minimum, unsigned int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt64,System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As ULong, minimum As ULong, maximum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : uint64 * uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="minimum" Type="System.UInt64" />
        <Parameter Name="maximum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo (nuint value, nuint minimum, nuint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo(native unsigned int value, native unsigned int minimum, native unsigned int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo (value As UIntPtr, minimum As UIntPtr, maximum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : unativeint * unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.UIntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nuint" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBetweenOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsBetweenOrEqualTo&lt;T&gt; (T value, T minimum, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBetweenOrEqualTo&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo``1(``0,``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBetweenOrEqualTo(Of T As IComparable(Of T)) (value As T, minimum As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBetweenOrEqualTo : 'T * 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBitwiseEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsBitwiseEqualTo&lt;T&gt; (T value, T target, string name) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsBitwiseEqualTo&lt;struct .ctor (class System.ValueType) T&gt;(!!T value, !!T target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsBitwiseEqualTo``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsBitwiseEqualTo(Of T As Structure) (value As T, target As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsBitwiseEqualTo : 'T * 'T * string -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsBitwiseEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="target" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="target">The target <typeparamref name="T" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be a bitwise match with a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not a bitwise match for <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCanceled">
      <MemberSignature Language="C#" Value="public static void IsCanceled (System.Threading.Tasks.Task task, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsCanceled(class System.Threading.Tasks.Task task, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsCanceled(System.Threading.Tasks.Task,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsCanceled (task As Task, name As String)" />
      <MemberSignature Language="F#" Value="static member IsCanceled : System.Threading.Tasks.Task * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsCanceled (task, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is canceled.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is not canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCloseTo">
      <MemberSignature Language="C#" Value="public static void IsCloseTo (double value, double target, double delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsCloseTo(float64 value, float64 target, float64 delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsCloseTo (value As Double, target As Double, delta As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsCloseTo : double * double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="target" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Double" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCloseTo">
      <MemberSignature Language="C#" Value="public static void IsCloseTo (int value, int target, uint delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsCloseTo(int32 value, int32 target, unsigned int32 delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int32,System.Int32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsCloseTo (value As Integer, target As Integer, delta As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsCloseTo : int * int * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="target" Type="System.Int32" />
        <Parameter Name="delta" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int32" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCloseTo">
      <MemberSignature Language="C#" Value="public static void IsCloseTo (long value, long target, ulong delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsCloseTo(int64 value, int64 target, unsigned int64 delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int64,System.Int64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsCloseTo (value As Long, target As Long, delta As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsCloseTo : int64 * int64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="target" Type="System.Int64" />
        <Parameter Name="delta" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int64" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCloseTo">
      <MemberSignature Language="C#" Value="public static void IsCloseTo (nint value, nint target, nuint delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsCloseTo(native int value, native int target, native unsigned int delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.IntPtr,System.IntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsCloseTo (value As IntPtr, target As IntPtr, delta As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsCloseTo : nativeint * nativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="target" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="delta" Type="System.UIntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="target">The target <see langword="nint" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCloseTo">
      <MemberSignature Language="C#" Value="public static void IsCloseTo (float value, float target, float delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsCloseTo(float32 value, float32 target, float32 delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Single,System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsCloseTo (value As Single, target As Single, delta As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsCloseTo : single * single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="target" Type="System.Single" />
        <Parameter Name="delta" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Single" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public static void IsCompleted (System.Threading.Tasks.Task task, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsCompleted(class System.Threading.Tasks.Task task, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompleted(System.Threading.Tasks.Task,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsCompleted (task As Task, name As String)" />
      <MemberSignature Language="F#" Value="static member IsCompleted : System.Threading.Tasks.Task * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsCompleted (task, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is in a completed state.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is not in a completed state.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public static void IsCompletedSuccessfully (System.Threading.Tasks.Task task, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsCompletedSuccessfully(class System.Threading.Tasks.Task task, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompletedSuccessfully(System.Threading.Tasks.Task,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsCompletedSuccessfully (task As Task, name As String)" />
      <MemberSignature Language="F#" Value="static member IsCompletedSuccessfully : System.Threading.Tasks.Task * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsCompletedSuccessfully (task, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance has been completed successfully.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> has not been completed successfully.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsDefault&lt;T&gt; (T value, string name) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsDefault&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(!!T value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsDefault``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsDefault(Of T As Structure) (value As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsDefault : 'T * string -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsDefault (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of <see langword="struct" /> value type being tested.</typeparam>
        <param name="value">The input value to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is <see langword="default" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not <see langword="default" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public static void IsEmpty (string text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEmpty&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; collection, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.ICollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty(Of T) (collection As ICollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : System.Collections.Generic.ICollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (collection, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is != 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEmpty&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty(Of T) (collection As IReadOnlyCollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (collection, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is != 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEmpty&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.List{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty(Of T) (list As List(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : System.Collections.Generic.List&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (list, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is != 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEmpty&lt;T&gt; (Memory&lt;T&gt; memory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Memory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty(Of T) (memory As Memory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : Memory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (memory, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is != 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEmpty&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.ReadOnlyMemory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty(Of T) (memory As ReadOnlyMemory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : ReadOnlyMemory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (memory, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is != 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEmpty&lt;T&gt; (ReadOnlySpan&lt;T&gt; span, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.ReadOnlySpan{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty(Of T) (span As ReadOnlySpan(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : ReadOnlySpan&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (span, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is != 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEmpty&lt;T&gt; (Span&lt;T&gt; span, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Span{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty(Of T) (span As Span(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : Span&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (span, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is != 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEmpty&lt;T&gt; (T[] array, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEmpty&lt;T&gt;(!!T[] array, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEmpty(Of T) (array As T(), name As String)" />
      <MemberSignature Language="F#" Value="static member IsEmpty : 'T[] * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEmpty (array, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see typeparamref="T" /> array instance must be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is != 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (byte value, byte target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(unsigned int8 value, unsigned int8 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As Byte, target As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="target" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Byte" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (char value, char target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(char value, char target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As Char, target As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="target" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Char" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (decimal value, decimal target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(valuetype System.Decimal value, valuetype System.Decimal target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As Decimal, target As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="target" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Decimal" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (double value, double target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(float64 value, float64 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As Double, target As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="target" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Double" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (short value, short target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(int16 value, int16 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As Short, target As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="target" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int16" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (int value, int target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(int32 value, int32 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As Integer, target As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="target" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int32" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (long value, long target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(int64 value, int64 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As Long, target As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="target" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int64" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (nint value, nint target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(native int value, native int target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As IntPtr, target As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="target" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="target">The target <see langword="nint" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (sbyte value, sbyte target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(int8 value, int8 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As SByte, target As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="target" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="target">The target <see cref="T:System.SByte" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (float value, float target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(float32 value, float32 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As Single, target As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="target" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Single" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (ushort value, ushort target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(unsigned int16 value, unsigned int16 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As UShort, target As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="target" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="target">The target <see cref="T:System.UInt16" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (uint value, uint target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(unsigned int32 value, unsigned int32 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As UInteger, target As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="target" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="target">The target <see cref="T:System.UInt32" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (ulong value, ulong target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(unsigned int64 value, unsigned int64 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As ULong, target As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="target" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="target">The target <see cref="T:System.UInt64" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public static void IsEqualTo (nuint value, nuint target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo(native unsigned int value, native unsigned int target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo (value As UIntPtr, target As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="target" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="target">The target <see langword="nuint" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsEqualTo&lt;T&gt; (T value, T target, string name) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsEqualTo&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(!!T value, !!T target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsEqualTo(Of T As IEquatable(Of T)) (value As T, target As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsEqualTo : 'T * 'T * string -&gt; unit (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="target" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="target">The target <typeparamref name="T" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static void IsFalse (bool value, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFalse(bool value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsFalse (value As Boolean, name As String)" />
      <MemberSignature Language="F#" Value="static member IsFalse : bool * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsFalse (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Boolean" /> to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be <see langword="false" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="true" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static void IsFalse (bool value, string name, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFalse(bool value, string name, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsFalse (value As Boolean, name As String, message As String)" />
      <MemberSignature Language="F#" Value="static member IsFalse : bool * string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsFalse (value, name, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Boolean" /> to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <param name="message">A message to display if <paramref name="value" /> is <see langword="true" />.</param>
        <summary>
            Asserts that the input value must be <see langword="false" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="true" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsFaulted">
      <MemberSignature Language="C#" Value="public static void IsFaulted (System.Threading.Tasks.Task task, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFaulted(class System.Threading.Tasks.Task task, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsFaulted(System.Threading.Tasks.Task,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsFaulted (task As Task, name As String)" />
      <MemberSignature Language="F#" Value="static member IsFaulted : System.Threading.Tasks.Task * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsFaulted (task, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is faulted.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is not faulted.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (byte value, byte minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(unsigned int8 value, unsigned int8 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As Byte, minimum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="minimum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (char value, char minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(char value, char minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As Char, minimum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="minimum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (decimal value, decimal minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(valuetype System.Decimal value, valuetype System.Decimal minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As Decimal, minimum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="minimum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (double value, double minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(float64 value, float64 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As Double, minimum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="minimum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (short value, short minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(int16 value, int16 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As Short, minimum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="minimum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (int value, int minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(int32 value, int32 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As Integer, minimum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="minimum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (long value, long minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(int64 value, int64 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As Long, minimum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="minimum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (nint value, nint minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(native int value, native int minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As IntPtr, minimum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (sbyte value, sbyte minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(int8 value, int8 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As SByte, minimum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="minimum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (float value, float minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(float32 value, float32 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As Single, minimum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="minimum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (ushort value, ushort minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(unsigned int16 value, unsigned int16 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As UShort, minimum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="minimum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (uint value, uint minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(unsigned int32 value, unsigned int32 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As UInteger, minimum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="minimum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (ulong value, ulong minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(unsigned int64 value, unsigned int64 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As ULong, minimum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="minimum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan (nuint value, nuint minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan(native unsigned int value, native unsigned int minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan (value As UIntPtr, minimum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsGreaterThan&lt;T&gt; (T value, T minimum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThan&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThan(Of T As IComparable(Of T)) (value As T, minimum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="minimum">The exclusive minimum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (byte value, byte minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(unsigned int8 value, unsigned int8 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As Byte, minimum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="minimum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (char value, char minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(char value, char minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As Char, minimum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="minimum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (decimal value, decimal minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(valuetype System.Decimal value, valuetype System.Decimal minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As Decimal, minimum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="minimum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (double value, double minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(float64 value, float64 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As Double, minimum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="minimum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (short value, short minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(int16 value, int16 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As Short, minimum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="minimum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (int value, int minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(int32 value, int32 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As Integer, minimum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="minimum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (long value, long minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(int64 value, int64 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As Long, minimum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="minimum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (nint value, nint minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(native int value, native int minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As IntPtr, minimum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (sbyte value, sbyte minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(int8 value, int8 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As SByte, minimum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="minimum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (float value, float minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(float32 value, float32 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As Single, minimum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="minimum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (ushort value, ushort minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(unsigned int16 value, unsigned int16 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As UShort, minimum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="minimum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (uint value, uint minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(unsigned int32 value, unsigned int32 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As UInteger, minimum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="minimum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (ulong value, ulong minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(unsigned int64 value, unsigned int64 minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As ULong, minimum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="minimum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo (nuint value, nuint minimum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo(native unsigned int value, native unsigned int minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo (value As UIntPtr, minimum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsGreaterThanOrEqualTo&lt;T&gt; (T value, T minimum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsGreaterThanOrEqualTo&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsGreaterThanOrEqualTo(Of T As IComparable(Of T)) (value As T, minimum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsGreaterThanOrEqualTo : 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo (value, minimum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (byte value, byte minimum, byte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(unsigned int8 value, unsigned int8 minimum, unsigned int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Byte,System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As Byte, minimum As Byte, maximum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : byte * byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="minimum" Type="System.Byte" />
        <Parameter Name="maximum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (char value, char minimum, char maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(char value, char minimum, char maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Char,System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As Char, minimum As Char, maximum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : char * char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="minimum" Type="System.Char" />
        <Parameter Name="maximum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (decimal value, decimal minimum, decimal maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(valuetype System.Decimal value, valuetype System.Decimal minimum, valuetype System.Decimal maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Decimal,System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As Decimal, minimum As Decimal, maximum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : decimal * decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="minimum" Type="System.Decimal" />
        <Parameter Name="maximum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (double value, double minimum, double maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(float64 value, float64 minimum, float64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As Double, minimum As Double, maximum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : double * double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="minimum" Type="System.Double" />
        <Parameter Name="maximum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (short value, short minimum, short maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(int16 value, int16 minimum, int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int16,System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As Short, minimum As Short, maximum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : int16 * int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="minimum" Type="System.Int16" />
        <Parameter Name="maximum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (int value, int minimum, int maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(int32 value, int32 minimum, int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int32,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As Integer, minimum As Integer, maximum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : int * int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="minimum" Type="System.Int32" />
        <Parameter Name="maximum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (long value, long minimum, long maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(int64 value, int64 minimum, int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int64,System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As Long, minimum As Long, maximum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : int64 * int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="minimum" Type="System.Int64" />
        <Parameter Name="maximum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (nint value, nint minimum, nint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(native int value, native int minimum, native int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.IntPtr,System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As IntPtr, minimum As IntPtr, maximum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : nativeint * nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.IntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nint" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (sbyte value, sbyte minimum, sbyte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(int8 value, int8 minimum, int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.SByte,System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As SByte, minimum As SByte, maximum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : sbyte * sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="minimum" Type="System.SByte" />
        <Parameter Name="maximum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (float value, float minimum, float maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(float32 value, float32 minimum, float32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Single,System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As Single, minimum As Single, maximum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : single * single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="minimum" Type="System.Single" />
        <Parameter Name="maximum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (ushort value, ushort minimum, ushort maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(unsigned int16 value, unsigned int16 minimum, unsigned int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt16,System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As UShort, minimum As UShort, maximum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : uint16 * uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="minimum" Type="System.UInt16" />
        <Parameter Name="maximum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (uint value, uint minimum, uint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(unsigned int32 value, unsigned int32 minimum, unsigned int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt32,System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As UInteger, minimum As UInteger, maximum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : uint32 * uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="minimum" Type="System.UInt32" />
        <Parameter Name="maximum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (ulong value, ulong minimum, ulong maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(unsigned int64 value, unsigned int64 minimum, unsigned int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt64,System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As ULong, minimum As ULong, maximum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : uint64 * uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="minimum" Type="System.UInt64" />
        <Parameter Name="maximum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange">
      <MemberSignature Language="C#" Value="public static void IsInRange (nuint value, nuint minimum, nuint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange(native unsigned int value, native unsigned int minimum, native unsigned int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange (value As UIntPtr, minimum As UIntPtr, maximum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : unativeint * unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.UIntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nuint" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRange&lt;T&gt; (T value, T minimum, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRange&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange``1(``0,``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRange(Of T As IComparable(Of T)) (value As T, minimum As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRange : 'T * 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor (int index, string text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor(int32 index, string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor (index As Integer, text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The input index to be used to access <paramref name="text" />.</param>
        <param name="text">The input <see cref="T:System.String" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see cref="T:System.String" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="text" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor&lt;T&gt; (int index, System.Collections.Generic.ICollection&lt;T&gt; collection, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor&lt;T&gt;(int32 index, class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor(Of T) (index As Integer, collection As ICollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * System.Collections.Generic.ICollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, collection, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="collection" />.</param>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.ICollection`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="collection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor&lt;T&gt; (int index, System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor&lt;T&gt;(int32 index, class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor(Of T) (index As Integer, collection As IReadOnlyCollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, collection, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="collection" />.</param>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="collection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor&lt;T&gt; (int index, System.Collections.Generic.List&lt;T&gt; list, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor&lt;T&gt;(int32 index, class System.Collections.Generic.List`1&lt;!!T&gt; list, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor(Of T) (index As Integer, list As List(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * System.Collections.Generic.List&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, list, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="list" />.</param>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.List`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="list" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor&lt;T&gt; (int index, Memory&lt;T&gt; memory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor&lt;T&gt;(int32 index, valuetype System.Memory`1&lt;!!T&gt; memory, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Memory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor(Of T) (index As Integer, memory As Memory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * Memory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, memory, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="memory" />.</param>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Memory`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="memory" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor&lt;T&gt; (int index, ReadOnlyMemory&lt;T&gt; memory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor&lt;T&gt;(int32 index, valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor(Of T) (index As Integer, memory As ReadOnlyMemory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * ReadOnlyMemory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, memory, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="memory" />.</param>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see cref="T:System.ReadOnlyMemory`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="memory" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor&lt;T&gt; (int index, ReadOnlySpan&lt;T&gt; span, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor&lt;T&gt;(int32 index, valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor(Of T) (index As Integer, span As ReadOnlySpan(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * ReadOnlySpan&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, span, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="span" />.</param>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="span" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor&lt;T&gt; (int index, Span&lt;T&gt; span, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor&lt;T&gt;(int32 index, valuetype System.Span`1&lt;!!T&gt; span, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Span{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor(Of T) (index As Integer, span As Span(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * Span&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, span, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="span" />.</param>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Span`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="span" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsInRangeFor&lt;T&gt; (int index, T[] array, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInRangeFor&lt;T&gt;(int32 index, !!T[] array, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsInRangeFor(Of T) (index As Integer, array As T(), name As String)" />
      <MemberSignature Language="F#" Value="static member IsInRangeFor : int * 'T[] * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor (index, array, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="array" />.</param>
        <param name="array">The input <see typeparamref="T" /> array instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is valid for a given <see typeparamref="T" /> array instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="array" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (byte value, byte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(unsigned int8 value, unsigned int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As Byte, maximum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="maximum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (char value, char maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(char value, char maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As Char, maximum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="maximum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (decimal value, decimal maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(valuetype System.Decimal value, valuetype System.Decimal maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As Decimal, maximum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="maximum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (double value, double maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(float64 value, float64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As Double, maximum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="maximum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (short value, short maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(int16 value, int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As Short, maximum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="maximum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (int value, int maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(int32 value, int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As Integer, maximum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="maximum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (long value, long maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(int64 value, int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As Long, maximum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="maximum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (nint value, nint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(native int value, native int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As IntPtr, maximum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (sbyte value, sbyte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(int8 value, int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As SByte, maximum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="maximum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (float value, float maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(float32 value, float32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As Single, maximum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="maximum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (ushort value, ushort maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(unsigned int16 value, unsigned int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As UShort, maximum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="maximum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (uint value, uint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(unsigned int32 value, unsigned int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As UInteger, maximum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="maximum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (ulong value, ulong maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(unsigned int64 value, unsigned int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As ULong, maximum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="maximum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan">
      <MemberSignature Language="C#" Value="public static void IsLessThan (nuint value, nuint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan(native unsigned int value, native unsigned int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan (value As UIntPtr, maximum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="maximum">The exclusive maximum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsLessThan&lt;T&gt; (T value, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThan&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThan(Of T As IComparable(Of T)) (value As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThan : 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThan (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (byte value, byte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(unsigned int8 value, unsigned int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As Byte, maximum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="maximum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (char value, char maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(char value, char maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As Char, maximum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="maximum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (decimal value, decimal maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(valuetype System.Decimal value, valuetype System.Decimal maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As Decimal, maximum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="maximum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (double value, double maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(float64 value, float64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As Double, maximum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="maximum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (short value, short maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(int16 value, int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As Short, maximum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="maximum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (int value, int maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(int32 value, int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As Integer, maximum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="maximum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (long value, long maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(int64 value, int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As Long, maximum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="maximum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (nint value, nint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(native int value, native int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As IntPtr, maximum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (sbyte value, sbyte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(int8 value, int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As SByte, maximum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="maximum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (float value, float maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(float32 value, float32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As Single, maximum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="maximum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (ushort value, ushort maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(unsigned int16 value, unsigned int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As UShort, maximum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="maximum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (uint value, uint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(unsigned int32 value, unsigned int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As UInteger, maximum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="maximum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (ulong value, ulong maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(unsigned int64 value, unsigned int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As ULong, maximum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="maximum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo (nuint value, nuint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo(native unsigned int value, native unsigned int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo (value As UIntPtr, maximum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="maximum">The inclusive maximum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLessThanOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsLessThanOrEqualTo&lt;T&gt; (T value, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsLessThanOrEqualTo&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsLessThanOrEqualTo(Of T As IComparable(Of T)) (value As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsLessThanOrEqualTo : 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo (value, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="maximum">The inclusive maximum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotAssignableToType">
      <MemberSignature Language="C#" Value="public static void IsNotAssignableToType (object value, Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotAssignableToType(object value, class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType(System.Object,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotAssignableToType (value As Object, type As Type, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotAssignableToType : obj * Type * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType (value, type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Object" /> to test.</param>
        <param name="type">The type to look for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value can't be assigned to a specified type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> can be assigned to <paramref name="type" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotAssignableToType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotAssignableToType&lt;T&gt; (object value, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotAssignableToType&lt;T&gt;(object value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType``1(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotAssignableToType(Of T) (value As Object, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotAssignableToType : obj * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type to check the input value against.</typeparam>
        <param name="value">The input <see cref="T:System.Object" /> to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value can't be assigned to a specified type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> can be assigned to type <typeparamref name="T" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (byte value, byte minimum, byte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(unsigned int8 value, unsigned int8 minimum, unsigned int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Byte,System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As Byte, minimum As Byte, maximum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : byte * byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="minimum" Type="System.Byte" />
        <Parameter Name="maximum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (char value, char minimum, char maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(char value, char minimum, char maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Char,System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As Char, minimum As Char, maximum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : char * char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="minimum" Type="System.Char" />
        <Parameter Name="maximum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (decimal value, decimal minimum, decimal maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(valuetype System.Decimal value, valuetype System.Decimal minimum, valuetype System.Decimal maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Decimal,System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As Decimal, minimum As Decimal, maximum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : decimal * decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="minimum" Type="System.Decimal" />
        <Parameter Name="maximum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (double value, double minimum, double maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(float64 value, float64 minimum, float64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As Double, minimum As Double, maximum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : double * double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="minimum" Type="System.Double" />
        <Parameter Name="maximum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (short value, short minimum, short maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(int16 value, int16 minimum, int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int16,System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As Short, minimum As Short, maximum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : int16 * int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="minimum" Type="System.Int16" />
        <Parameter Name="maximum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (int value, int minimum, int maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(int32 value, int32 minimum, int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int32,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As Integer, minimum As Integer, maximum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : int * int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="minimum" Type="System.Int32" />
        <Parameter Name="maximum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (long value, long minimum, long maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(int64 value, int64 minimum, int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int64,System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As Long, minimum As Long, maximum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : int64 * int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="minimum" Type="System.Int64" />
        <Parameter Name="maximum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (nint value, nint minimum, nint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(native int value, native int minimum, native int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.IntPtr,System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As IntPtr, minimum As IntPtr, maximum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : nativeint * nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.IntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see langword="nint" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (sbyte value, sbyte minimum, sbyte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(int8 value, int8 minimum, int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.SByte,System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As SByte, minimum As SByte, maximum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : sbyte * sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="minimum" Type="System.SByte" />
        <Parameter Name="maximum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (float value, float minimum, float maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(float32 value, float32 minimum, float32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Single,System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As Single, minimum As Single, maximum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : single * single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="minimum" Type="System.Single" />
        <Parameter Name="maximum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (ushort value, ushort minimum, ushort maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(unsigned int16 value, unsigned int16 minimum, unsigned int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt16,System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As UShort, minimum As UShort, maximum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : uint16 * uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="minimum" Type="System.UInt16" />
        <Parameter Name="maximum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (uint value, uint minimum, uint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(unsigned int32 value, unsigned int32 minimum, unsigned int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt32,System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As UInteger, minimum As UInteger, maximum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : uint32 * uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="minimum" Type="System.UInt32" />
        <Parameter Name="maximum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (ulong value, ulong minimum, ulong maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(unsigned int64 value, unsigned int64 minimum, unsigned int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt64,System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As ULong, minimum As ULong, maximum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : uint64 * uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="minimum" Type="System.UInt64" />
        <Parameter Name="maximum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween">
      <MemberSignature Language="C#" Value="public static void IsNotBetween (nuint value, nuint minimum, nuint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween(native unsigned int value, native unsigned int minimum, native unsigned int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween (value As UIntPtr, minimum As UIntPtr, maximum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : unativeint * unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.UIntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="minimum">The exclusive minimum <see langword="nuint" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetween&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotBetween&lt;T&gt; (T value, T minimum, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetween&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween``1(``0,``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetween(Of T As IComparable(Of T)) (value As T, minimum As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetween : 'T * 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="minimum">The exclusive minimum <typeparamref name="T" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (byte value, byte minimum, byte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(unsigned int8 value, unsigned int8 minimum, unsigned int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Byte,System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As Byte, minimum As Byte, maximum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : byte * byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="minimum" Type="System.Byte" />
        <Parameter Name="maximum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (char value, char minimum, char maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(char value, char minimum, char maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Char,System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As Char, minimum As Char, maximum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : char * char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="minimum" Type="System.Char" />
        <Parameter Name="maximum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (decimal value, decimal minimum, decimal maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(valuetype System.Decimal value, valuetype System.Decimal minimum, valuetype System.Decimal maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Decimal,System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As Decimal, minimum As Decimal, maximum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : decimal * decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="minimum" Type="System.Decimal" />
        <Parameter Name="maximum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (double value, double minimum, double maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(float64 value, float64 minimum, float64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As Double, minimum As Double, maximum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : double * double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="minimum" Type="System.Double" />
        <Parameter Name="maximum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (short value, short minimum, short maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(int16 value, int16 minimum, int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int16,System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As Short, minimum As Short, maximum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : int16 * int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="minimum" Type="System.Int16" />
        <Parameter Name="maximum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (int value, int minimum, int maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(int32 value, int32 minimum, int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int32,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As Integer, minimum As Integer, maximum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : int * int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="minimum" Type="System.Int32" />
        <Parameter Name="maximum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (long value, long minimum, long maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(int64 value, int64 minimum, int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int64,System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As Long, minimum As Long, maximum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : int64 * int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="minimum" Type="System.Int64" />
        <Parameter Name="maximum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (nint value, nint minimum, nint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(native int value, native int minimum, native int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.IntPtr,System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As IntPtr, minimum As IntPtr, maximum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : nativeint * nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.IntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nint" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (sbyte value, sbyte minimum, sbyte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(int8 value, int8 minimum, int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.SByte,System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As SByte, minimum As SByte, maximum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : sbyte * sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="minimum" Type="System.SByte" />
        <Parameter Name="maximum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (float value, float minimum, float maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(float32 value, float32 minimum, float32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Single,System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As Single, minimum As Single, maximum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : single * single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="minimum" Type="System.Single" />
        <Parameter Name="maximum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (ushort value, ushort minimum, ushort maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(unsigned int16 value, unsigned int16 minimum, unsigned int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt16,System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As UShort, minimum As UShort, maximum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : uint16 * uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="minimum" Type="System.UInt16" />
        <Parameter Name="maximum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (uint value, uint minimum, uint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(unsigned int32 value, unsigned int32 minimum, unsigned int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt32,System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As UInteger, minimum As UInteger, maximum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : uint32 * uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="minimum" Type="System.UInt32" />
        <Parameter Name="maximum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (ulong value, ulong minimum, ulong maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(unsigned int64 value, unsigned int64 minimum, unsigned int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt64,System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As ULong, minimum As ULong, maximum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : uint64 * uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="minimum" Type="System.UInt64" />
        <Parameter Name="maximum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo (nuint value, nuint minimum, nuint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo(native unsigned int value, native unsigned int minimum, native unsigned int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo (value As UIntPtr, minimum As UIntPtr, maximum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : unativeint * unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.UIntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nuint" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotBetweenOrEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotBetweenOrEqualTo&lt;T&gt; (T value, T minimum, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotBetweenOrEqualTo&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo``1(``0,``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotBetweenOrEqualTo(Of T As IComparable(Of T)) (value As T, minimum As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotBetweenOrEqualTo : 'T * 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
        <param name="maximum">The inclusive maximum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotCanceled">
      <MemberSignature Language="C#" Value="public static void IsNotCanceled (System.Threading.Tasks.Task task, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotCanceled(class System.Threading.Tasks.Task task, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCanceled(System.Threading.Tasks.Task,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotCanceled (task As Task, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotCanceled : System.Threading.Tasks.Task * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotCanceled (task, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is not canceled.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotCloseTo">
      <MemberSignature Language="C#" Value="public static void IsNotCloseTo (double value, double target, double delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotCloseTo(float64 value, float64 target, float64 delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotCloseTo (value As Double, target As Double, delta As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotCloseTo : double * double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="target" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Double" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotCloseTo">
      <MemberSignature Language="C#" Value="public static void IsNotCloseTo (int value, int target, uint delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotCloseTo(int32 value, int32 target, unsigned int32 delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int32,System.Int32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotCloseTo (value As Integer, target As Integer, delta As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotCloseTo : int * int * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="target" Type="System.Int32" />
        <Parameter Name="delta" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int32" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotCloseTo">
      <MemberSignature Language="C#" Value="public static void IsNotCloseTo (long value, long target, ulong delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotCloseTo(int64 value, int64 target, unsigned int64 delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int64,System.Int64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotCloseTo (value As Long, target As Long, delta As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotCloseTo : int64 * int64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="target" Type="System.Int64" />
        <Parameter Name="delta" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int64" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotCloseTo">
      <MemberSignature Language="C#" Value="public static void IsNotCloseTo (nint value, nint target, nuint delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotCloseTo(native int value, native int target, native unsigned int delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.IntPtr,System.IntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotCloseTo (value As IntPtr, target As IntPtr, delta As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotCloseTo : nativeint * nativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="target" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="delta" Type="System.UIntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="target">The target <see langword="nint" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotCloseTo">
      <MemberSignature Language="C#" Value="public static void IsNotCloseTo (float value, float target, float delta, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotCloseTo(float32 value, float32 target, float32 delta, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Single,System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotCloseTo (value As Single, target As Single, delta As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotCloseTo : single * single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo (value, target, delta, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="target" Type="System.Single" />
        <Parameter Name="delta" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Single" /> value to test for.</param>
        <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotCompleted">
      <MemberSignature Language="C#" Value="public static void IsNotCompleted (System.Threading.Tasks.Task task, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotCompleted(class System.Threading.Tasks.Task task, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompleted(System.Threading.Tasks.Task,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotCompleted (task As Task, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotCompleted : System.Threading.Tasks.Task * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotCompleted (task, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is not in a completed state.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is in a completed state.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public static void IsNotCompletedSuccessfully (System.Threading.Tasks.Task task, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotCompletedSuccessfully(class System.Threading.Tasks.Task task, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompletedSuccessfully(System.Threading.Tasks.Task,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotCompletedSuccessfully (task As Task, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotCompletedSuccessfully : System.Threading.Tasks.Task * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotCompletedSuccessfully (task, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance has not been completed successfully.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> has been completed successfully.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotDefault&lt;T&gt; (T value, string name) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotDefault&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(!!T value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotDefault``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotDefault(Of T As Structure) (value As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotDefault : 'T * string -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotDefault (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of <see langword="struct" /> value type being tested.</typeparam>
        <param name="value">The input value to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is not <see langword="default" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="default" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty (string text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; collection, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty&lt;T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty(Of T) (collection As ICollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : System.Collections.Generic.ICollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (collection, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty&lt;T&gt; (System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty&lt;T&gt;(class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty(Of T) (collection As IReadOnlyCollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (collection, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.List{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty(Of T) (list As List(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : System.Collections.Generic.List&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (list, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty&lt;T&gt; (Memory&lt;T&gt; memory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty&lt;T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Memory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty(Of T) (memory As Memory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : Memory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (memory, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.ReadOnlyMemory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty(Of T) (memory As ReadOnlyMemory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : ReadOnlyMemory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (memory, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty&lt;T&gt; (ReadOnlySpan&lt;T&gt; span, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.ReadOnlySpan{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty(Of T) (span As ReadOnlySpan(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : ReadOnlySpan&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (span, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty&lt;T&gt; (Span&lt;T&gt; span, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Span{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty(Of T) (span As Span(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : Span&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (span, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEmpty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEmpty&lt;T&gt; (T[] array, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEmpty&lt;T&gt;(!!T[] array, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(``0[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEmpty(Of T) (array As T(), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEmpty : 'T[] * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty (array, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see typeparamref="T" /> array instance must not be empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (byte value, byte target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(unsigned int8 value, unsigned int8 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As Byte, target As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="target" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Byte" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (char value, char target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(char value, char target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As Char, target As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="target" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Char" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (decimal value, decimal target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(valuetype System.Decimal value, valuetype System.Decimal target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As Decimal, target As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="target" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Decimal" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (double value, double target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(float64 value, float64 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As Double, target As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="target" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Double" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (short value, short target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(int16 value, int16 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As Short, target As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="target" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int16" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (int value, int target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(int32 value, int32 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As Integer, target As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="target" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int32" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (long value, long target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(int64 value, int64 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As Long, target As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="target" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Int64" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (nint value, nint target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(native int value, native int target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As IntPtr, target As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="target" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="target">The target <see langword="nint" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (sbyte value, sbyte target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(int8 value, int8 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As SByte, target As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="target" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="target">The target <see cref="T:System.SByte" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (float value, float target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(float32 value, float32 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As Single, target As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="target" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="target">The target <see cref="T:System.Single" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (ushort value, ushort target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(unsigned int16 value, unsigned int16 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As UShort, target As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="target" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="target">The target <see cref="T:System.UInt16" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (uint value, uint target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(unsigned int32 value, unsigned int32 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As UInteger, target As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="target" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="target">The target <see cref="T:System.UInt32" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (ulong value, ulong target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(unsigned int64 value, unsigned int64 target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As ULong, target As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="target" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="target">The target <see cref="T:System.UInt64" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo (nuint value, nuint target, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo(native unsigned int value, native unsigned int target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo (value As UIntPtr, target As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="target" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="target">The target <see langword="nuint" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotEqualTo&lt;T&gt; (T value, T target, string name) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotEqualTo&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(!!T value, !!T target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotEqualTo(Of T As IEquatable(Of T)) (value As T, target As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotEqualTo : 'T * 'T * string -&gt; unit (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="target" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="target">The target <typeparamref name="T" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotFaulted">
      <MemberSignature Language="C#" Value="public static void IsNotFaulted (System.Threading.Tasks.Task task, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotFaulted(class System.Threading.Tasks.Task task, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotFaulted(System.Threading.Tasks.Task,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotFaulted (task As Task, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotFaulted : System.Threading.Tasks.Task * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotFaulted (task, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is not faulted.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is faulted.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (byte value, byte minimum, byte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(unsigned int8 value, unsigned int8 minimum, unsigned int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Byte,System.Byte,System.Byte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As Byte, minimum As Byte, maximum As Byte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : byte * byte * byte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="minimum" Type="System.Byte" />
        <Parameter Name="maximum" Type="System.Byte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (char value, char minimum, char maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(char value, char minimum, char maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Char,System.Char,System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As Char, minimum As Char, maximum As Char, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : char * char * char * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="minimum" Type="System.Char" />
        <Parameter Name="maximum" Type="System.Char" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (decimal value, decimal minimum, decimal maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(valuetype System.Decimal value, valuetype System.Decimal minimum, valuetype System.Decimal maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Decimal,System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As Decimal, minimum As Decimal, maximum As Decimal, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : decimal * decimal * decimal * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="minimum" Type="System.Decimal" />
        <Parameter Name="maximum" Type="System.Decimal" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (double value, double minimum, double maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(float64 value, float64 minimum, float64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As Double, minimum As Double, maximum As Double, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : double * double * double * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="minimum" Type="System.Double" />
        <Parameter Name="maximum" Type="System.Double" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (short value, short minimum, short maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(int16 value, int16 minimum, int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int16,System.Int16,System.Int16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As Short, minimum As Short, maximum As Short, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : int16 * int16 * int16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="minimum" Type="System.Int16" />
        <Parameter Name="maximum" Type="System.Int16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (int value, int minimum, int maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(int32 value, int32 minimum, int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int32,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As Integer, minimum As Integer, maximum As Integer, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : int * int * int * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="minimum" Type="System.Int32" />
        <Parameter Name="maximum" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (long value, long minimum, long maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(int64 value, int64 minimum, int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int64,System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As Long, minimum As Long, maximum As Long, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : int64 * int64 * int64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="minimum" Type="System.Int64" />
        <Parameter Name="maximum" Type="System.Int64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (nint value, nint minimum, nint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(native int value, native int minimum, native int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.IntPtr,System.IntPtr,System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As IntPtr, minimum As IntPtr, maximum As IntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : nativeint * nativeint * nativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.IntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.IntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nint" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see langword="nint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (sbyte value, sbyte minimum, sbyte maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(int8 value, int8 minimum, int8 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.SByte,System.SByte,System.SByte,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As SByte, minimum As SByte, maximum As SByte, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : sbyte * sbyte * sbyte * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="minimum" Type="System.SByte" />
        <Parameter Name="maximum" Type="System.SByte" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (float value, float minimum, float maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(float32 value, float32 minimum, float32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Single,System.Single,System.Single,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As Single, minimum As Single, maximum As Single, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : single * single * single * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="minimum" Type="System.Single" />
        <Parameter Name="maximum" Type="System.Single" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (ushort value, ushort minimum, ushort maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(unsigned int16 value, unsigned int16 minimum, unsigned int16 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt16,System.UInt16,System.UInt16,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As UShort, minimum As UShort, maximum As UShort, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : uint16 * uint16 * uint16 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="minimum" Type="System.UInt16" />
        <Parameter Name="maximum" Type="System.UInt16" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (uint value, uint minimum, uint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(unsigned int32 value, unsigned int32 minimum, unsigned int32 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt32,System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As UInteger, minimum As UInteger, maximum As UInteger, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : uint32 * uint32 * uint32 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="minimum" Type="System.UInt32" />
        <Parameter Name="maximum" Type="System.UInt32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (ulong value, ulong minimum, ulong maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(unsigned int64 value, unsigned int64 minimum, unsigned int64 maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt64,System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As ULong, minimum As ULong, maximum As ULong, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : uint64 * uint64 * uint64 * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="minimum" Type="System.UInt64" />
        <Parameter Name="maximum" Type="System.UInt64" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange">
      <MemberSignature Language="C#" Value="public static void IsNotInRange (nuint value, nuint minimum, nuint maximum, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange(native unsigned int value, native unsigned int minimum, native unsigned int maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange (value As UIntPtr, minimum As UIntPtr, maximum As UIntPtr, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : unativeint * unativeint * unativeint * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="minimum" Type="System.UIntPtr" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maximum" Type="System.UIntPtr" Index="2" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.NativeInteger]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NativeInteger&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="name" Type="System.String" Index="3" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="value">The input <see langword="nuint" /> value to test.</param>
        <param name="minimum">The inclusive minimum <see langword="nuint" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <see langword="nuint" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRange&lt;T&gt; (T value, T minimum, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRange&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange``1(``0,``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRange(Of T As IComparable(Of T)) (value As T, minimum As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRange : 'T * 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
        <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be in a given range.
            </summary>
        <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor (int index, string text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor(int32 index, string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor (index As Integer, text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The input index to be used to access <paramref name="text" />.</param>
        <param name="text">The input <see cref="T:System.String" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.String" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="text" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor&lt;T&gt; (int index, System.Collections.Generic.ICollection&lt;T&gt; collection, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor&lt;T&gt;(int32 index, class System.Collections.Generic.ICollection`1&lt;!!T&gt; collection, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor(Of T) (index As Integer, collection As ICollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * System.Collections.Generic.ICollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, collection, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="collection" />.</param>
        <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.ICollection`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="collection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor&lt;T&gt; (int index, System.Collections.Generic.IReadOnlyCollection&lt;T&gt; collection, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor&lt;T&gt;(int32 index, class System.Collections.Generic.IReadOnlyCollection`1&lt;!!T&gt; collection, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor(Of T) (index As Integer, collection As IReadOnlyCollection(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * System.Collections.Generic.IReadOnlyCollection&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, collection, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="collection" />.</param>
        <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="collection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor&lt;T&gt; (int index, System.Collections.Generic.List&lt;T&gt; list, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor&lt;T&gt;(int32 index, class System.Collections.Generic.List`1&lt;!!T&gt; list, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor(Of T) (index As Integer, list As List(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * System.Collections.Generic.List&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, list, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="list" />.</param>
        <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.List`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="list" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor&lt;T&gt; (int index, Memory&lt;T&gt; memory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor&lt;T&gt;(int32 index, valuetype System.Memory`1&lt;!!T&gt; memory, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Memory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor(Of T) (index As Integer, memory As Memory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * Memory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, memory, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="memory" />.</param>
        <param name="memory">The input <see cref="T:System.Memory`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Memory`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="memory" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor&lt;T&gt; (int index, ReadOnlyMemory&lt;T&gt; memory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor&lt;T&gt;(int32 index, valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor(Of T) (index As Integer, memory As ReadOnlyMemory(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * ReadOnlyMemory&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, memory, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="memory" />.</param>
        <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.ReadOnlyMemory`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="memory" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor&lt;T&gt; (int index, ReadOnlySpan&lt;T&gt; span, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor&lt;T&gt;(int32 index, valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor(Of T) (index As Integer, span As ReadOnlySpan(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * ReadOnlySpan&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, span, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="span" />.</param>
        <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="span" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor&lt;T&gt; (int index, Span&lt;T&gt; span, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor&lt;T&gt;(int32 index, valuetype System.Span`1&lt;!!T&gt; span, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Span{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor(Of T) (index As Integer, span As Span(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * Span&lt;'T&gt; * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, span, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="span" />.</param>
        <param name="span">The input <see cref="T:System.Span`1" /> instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Span`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="span" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotInRangeFor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotInRangeFor&lt;T&gt; (int index, T[] array, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotInRangeFor&lt;T&gt;(int32 index, !!T[] array, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotInRangeFor(Of T) (index As Integer, array As T(), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotInRangeFor : int * 'T[] * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor (index, array, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
        <param name="index">The input index to be used to access <paramref name="array" />.</param>
        <param name="array">The input <see typeparamref="T" /> array instance to use to validate <paramref name="index" />.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input index is not valid for a given <see typeparamref="T" /> array instance.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="array" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotNull&lt;T&gt; (T? value, string name) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNull&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Nullable`1&lt;!!T&gt; value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNull``1(System.Nullable{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotNull(Of T As Structure) (value As Nullable(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotNull : Nullable&lt;'T (requires 'T : struct)&gt; * string -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotNull (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Nullable&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of nullable value type being tested.</typeparam>
        <param name="value">The input value to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is not <see langword="null" />.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotNull&lt;T&gt; (T? value, string name) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNull&lt;class T&gt;(!!T value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNull``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotNull(Of T As Class) (value As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotNull : 'T * string -&gt; unit (requires 'T : null)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotNull (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of reference value type being tested.</typeparam>
        <param name="value">The input value to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is not <see langword="null" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotNullOrEmpty">
      <MemberSignature Language="C#" Value="public static void IsNotNullOrEmpty (string? text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNullOrEmpty(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrEmpty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotNullOrEmpty (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotNullOrEmpty : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrEmpty (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be <see langword="null" /> or empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotNullOrWhitespace">
      <MemberSignature Language="C#" Value="public static void IsNotNullOrWhitespace (string? text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNullOrWhitespace(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhitespace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotNullOrWhitespace (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotNullOrWhitespace : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhitespace (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <AttributeName Language="C#">[System.Obsolete("Use IsNotNullOrWhiteSpace")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IsNotNullOrWhiteSpace")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be <see langword="null" /> or whitespace.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is <see langword="null" /> or whitespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotNullOrWhiteSpace">
      <MemberSignature Language="C#" Value="public static void IsNotNullOrWhiteSpace (string? text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNullOrWhiteSpace(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhiteSpace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotNullOrWhiteSpace (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotNullOrWhiteSpace : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhiteSpace (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be <see langword="null" /> or whitespace.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is whitespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotOfType">
      <MemberSignature Language="C#" Value="public static void IsNotOfType (object value, Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotOfType(object value, class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType(System.Object,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotOfType (value As Object, type As Type, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotOfType : obj * Type * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType (value, type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Object" /> to test.</param>
        <param name="type">The type to look for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is not of a specific type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the type of <paramref name="value" /> is the same as <paramref name="type" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotOfType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNotOfType&lt;T&gt; (object value, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotOfType&lt;T&gt;(object value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType``1(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotOfType(Of T) (value As Object, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotOfType : obj * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the input value.</typeparam>
        <param name="value">The input <see cref="T:System.Object" /> to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is not of a specific type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is of type <typeparamref name="T" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotWhitespace">
      <MemberSignature Language="C#" Value="public static void IsNotWhitespace (string text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotWhitespace(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotWhitespace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotWhitespace (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotWhitespace : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotWhitespace (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <AttributeName Language="C#">[System.Obsolete("Use IsNotWhiteSpace")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IsNotWhiteSpace")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be <see langword="null" /> or whitespace.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is <see langword="null" /> or whitespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNotWhiteSpace">
      <MemberSignature Language="C#" Value="public static void IsNotWhiteSpace (string text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotWhiteSpace(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotWhiteSpace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNotWhiteSpace (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNotWhiteSpace : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNotWhiteSpace (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be <see langword="null" /> or whitespace.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is <see langword="null" /> or whitespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNull&lt;T&gt; (T? value, string name) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNull&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Nullable`1&lt;!!T&gt; value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(System.Nullable{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNull(Of T As Structure) (value As Nullable(Of T), name As String)" />
      <MemberSignature Language="F#" Value="static member IsNull : Nullable&lt;'T (requires 'T : struct)&gt; * string -&gt; unit (requires 'T : struct)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNull (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Nullable&lt;T&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of nullable value type being tested.</typeparam>
        <param name="value">The input value to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is <see langword="null" />.
            </summary>
        <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsNull&lt;T&gt; (T? value, string name) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNull&lt;class T&gt;(!!T value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNull(Of T As Class) (value As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNull : 'T * string -&gt; unit (requires 'T : null)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNull (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of reference value type being tested.</typeparam>
        <param name="value">The input value to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is <see langword="null" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNullOrEmpty">
      <MemberSignature Language="C#" Value="public static void IsNullOrEmpty (string? text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNullOrEmpty(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrEmpty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNullOrEmpty (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNullOrEmpty : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNullOrEmpty (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be <see langword="null" /> or empty.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is neither <see langword="null" /> nor empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNullOrWhitespace">
      <MemberSignature Language="C#" Value="public static void IsNullOrWhitespace (string? text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNullOrWhitespace(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhitespace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNullOrWhitespace (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNullOrWhitespace : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhitespace (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <AttributeName Language="C#">[System.Obsolete("Use IsNullOrWhiteSpace")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IsNullOrWhiteSpace")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be <see langword="null" /> or whitespace.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is neither <see langword="null" /> nor whitespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNullOrWhiteSpace">
      <MemberSignature Language="C#" Value="public static void IsNullOrWhiteSpace (string? text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNullOrWhiteSpace(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhiteSpace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsNullOrWhiteSpace (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsNullOrWhiteSpace : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhiteSpace (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be <see langword="null" /> or whitespace.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is neither <see langword="null" /> nor whitespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsOfType">
      <MemberSignature Language="C#" Value="public static void IsOfType (object value, Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsOfType(object value, class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType(System.Object,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsOfType (value As Object, type As Type, name As String)" />
      <MemberSignature Language="F#" Value="static member IsOfType : obj * Type * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsOfType (value, type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Object" /> to test.</param>
        <param name="type">The type to look for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is of a specific type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if the type of <paramref name="value" /> is not the same as <paramref name="type" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsOfType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsOfType&lt;T&gt; (object value, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsOfType&lt;T&gt;(object value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType``1(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsOfType(Of T) (value As Object, name As String)" />
      <MemberSignature Language="F#" Value="static member IsOfType : obj * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsOfType (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the input value.</typeparam>
        <param name="value">The input <see cref="T:System.Object" /> to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value is of a specific type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not of type <typeparamref name="T" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReferenceEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsReferenceEqualTo&lt;T&gt; (T value, T target, string name) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsReferenceEqualTo&lt;class T&gt;(!!T value, !!T target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceEqualTo``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsReferenceEqualTo(Of T As Class) (value As T, target As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsReferenceEqualTo : 'T * 'T * string -&gt; unit (requires 'T : null)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsReferenceEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="target" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="target">The target <typeparamref name="T" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be the same instance as the target value.
            </summary>
        <remarks>The method is generic to prevent using it with value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not the same instance as <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReferenceNotEqualTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void IsReferenceNotEqualTo&lt;T&gt; (T value, T target, string name) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsReferenceNotEqualTo&lt;class T&gt;(!!T value, !!T target, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceNotEqualTo``1(``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsReferenceNotEqualTo(Of T As Class) (value As T, target As T, name As String)" />
      <MemberSignature Language="F#" Value="static member IsReferenceNotEqualTo : 'T * 'T * string -&gt; unit (requires 'T : null)" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsReferenceNotEqualTo (value, target, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="target" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of input values to compare.</typeparam>
        <param name="value">The input <typeparamref name="T" /> value to test.</param>
        <param name="target">The target <typeparamref name="T" /> value to test for.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must not be the same instance as the target value.
            </summary>
        <remarks>The method is generic to prevent using it with value types.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is the same instance as <paramref name="target" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static void IsTrue (bool value, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsTrue(bool value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsTrue (value As Boolean, name As String)" />
      <MemberSignature Language="F#" Value="static member IsTrue : bool * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsTrue (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Boolean" /> to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input value must be <see langword="true" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static void IsTrue (bool value, string name, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsTrue(bool value, string name, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsTrue (value As Boolean, name As String, message As String)" />
      <MemberSignature Language="F#" Value="static member IsTrue : bool * string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsTrue (value, name, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The input <see cref="T:System.Boolean" /> to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <param name="message">A message to display if <paramref name="value" /> is <see langword="false" />.</param>
        <summary>
            Asserts that the input value must be <see langword="true" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsWhitespace">
      <MemberSignature Language="C#" Value="public static void IsWhitespace (string text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsWhitespace(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsWhitespace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsWhitespace (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsWhitespace : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsWhitespace (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1">
          <AttributeName Language="C#">[System.Obsolete("Use IsWhiteSpace")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IsWhiteSpace")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be whitespace.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is neither <see langword="null" /> nor whitespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static void IsWhiteSpace (string text, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsWhiteSpace(string text, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Diagnostics.Guard.IsWhiteSpace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IsWhiteSpace (text As String, name As String)" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : string * string -&gt; unit" Usage="Microsoft.Toolkit.Diagnostics.Guard.IsWhiteSpace (text, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Diagnostics</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="win-comm-toolkit-dotnet-stable;win-comm-toolkit-dotnet-7.0;win-comm-toolkit-dotnet-7.1" />
      </Parameters>
      <Docs>
        <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
        <param name="name">The name of the input parameter being tested.</param>
        <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be whitespace.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is neither <see langword="null" /> nor whitespace.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
