<Type Name="IMessenger" FullName="Microsoft.Toolkit.Mvvm.Messaging.IMessenger">
  <TypeSignature Language="C#" Value="public interface IMessenger" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMessenger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Toolkit.Mvvm.Messaging.IMessenger" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMessenger" />
  <TypeSignature Language="F#" Value="type IMessenger = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            An interface for a type providing the ability to exchange messages between different objects.
            This can be useful to decouple different modules of an application without having to keep strong
            references to types being referenced. It is also possible to send messages to specific channels, uniquely
            identified by a token, and to have different messengers in different sections of an applications.
            In order to use the <see cref="T:Microsoft.Toolkit.Mvvm.Messaging.IMessenger" /> functionalities, first define a message type, like so:
            <code>
            public sealed class LoginCompletedMessage { }
            </code>
            Then, register your a recipient for this message:
            <code>
            Messenger.Default.Register&lt;MyRecipientType, LoginCompletedMessage&gt;(this, (r, m) =&gt;
            {
                // Handle the message here...
            });
            </code>
            The message handler here is a lambda expression taking two parameters: the recipient and the message.
            This is done to avoid the allocations for the closures that would've been generated if the expression
            had captured the current instance. The recipient type parameter is used so that the recipient can be
            directly accessed within the handler without the need to manually perform type casts. This allows the
            code to be less verbose and more reliable, as all the checks are done just at build time. If the handler
            is defined within the same type as the recipient, it is also possible to directly access private members.
            This allows the message handler to be a static method, which enables the C# compiler to perform a number
            of additional memory optimizations (such as caching the delegate, avoiding unnecessary memory allocations).
            Finally, send a message when needed, like so:
            <code>
            Messenger.Default.Send&lt;LoginCompletedMessage&gt;();
            </code>
            Additionally, the method group syntax can also be used to specify the message handler
            to invoke when receiving a message, if a method with the right signature is available
            in the current scope. This is helpful to keep the registration and handling logic separate.
            Following up from the previous example, consider a class having this method:
            <code>
            private static void Receive(MyRecipientType recipient, LoginCompletedMessage message)
            {
                // Handle the message there
            }
            </code>
            The registration can then be performed in a single line like so:
            <code>
            Messenger.Default.Register(this, Receive);
            </code>
            The C# compiler will automatically convert that expression to a <see cref="T:Microsoft.Toolkit.Mvvm.Messaging.MessageHandler`2" /> instance
            compatible with <see cref="M:Microsoft.Toolkit.Mvvm.Messaging.IMessengerExtensions.Register``2(Microsoft.Toolkit.Mvvm.Messaging.IMessenger,``0,Microsoft.Toolkit.Mvvm.Messaging.MessageHandler{``0,``1})" />.
            This will also work if multiple overloads of that method are available, each handling a different
            message type: the C# compiler will automatically pick the right one for the current message type.
            It is also possible to register message handlers explicitly using the <see cref="T:Microsoft.Toolkit.Mvvm.Messaging.IRecipient`1" /> interface.
            To do so, the recipient just needs to implement the interface and then call the
            <see cref="M:Microsoft.Toolkit.Mvvm.Messaging.IMessengerExtensions.RegisterAll(Microsoft.Toolkit.Mvvm.Messaging.IMessenger,System.Object)" /> extension, which will automatically register
            all the handlers that are declared by the recipient type. Registration for individual handlers is supported as well.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Cleanup">
      <MemberSignature Language="C#" Value="public void Cleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.Messaging.IMessenger.Cleanup" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cleanup ()" />
      <MemberSignature Language="F#" Value="abstract member Cleanup : unit -&gt; unit" Usage="iMessenger.Cleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Performs a cleanup on the current messenger.
            Invoking this method does not unregister any of the currently registered
            recipient, and it can be used to perform cleanup operations such as
            trimming the internal data structures of a messenger implementation.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRegistered&lt;TMessage,TToken&gt;">
      <MemberSignature Language="C#" Value="public bool IsRegistered&lt;TMessage,TToken&gt; (object recipient, TToken token) where TMessage : class where TToken : IEquatable&lt;TToken&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsRegistered&lt;class TMessage, (class System.IEquatable`1&lt;!!TToken&gt;) TToken&gt;(object recipient, !!TToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.Messaging.IMessenger.IsRegistered``2(System.Object,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsRegistered(Of TMessage As Class, TToken As Class) (recipient As Object, token As TToken) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsRegistered : obj * 'oken -&gt; bool (requires 'Message : null and 'oken :&gt; IEquatable&lt;'oken&gt;)" Usage="iMessenger.IsRegistered (recipient, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TMessage">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TToken">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;TToken&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="recipient" Type="System.Object" />
        <Parameter Name="token" Type="TToken" />
      </Parameters>
      <Docs>
        <typeparam name="TMessage">The type of message to check for the given recipient.</typeparam>
        <typeparam name="TToken">The type of token to check the channel for.</typeparam>
        <param name="recipient">The target recipient to check the registration for.</param>
        <param name="token">The token used to identify the target channel to check.</param>
        <summary>
            Checks whether or not a given recipient has already been registered for a message.
            </summary>
        <returns>Whether or not <paramref name="recipient" /> has already been registered for the specified message.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register&lt;TRecipient,TMessage,TToken&gt;">
      <MemberSignature Language="C#" Value="public void Register&lt;TRecipient,TMessage,TToken&gt; (TRecipient recipient, TToken token, Microsoft.Toolkit.Mvvm.Messaging.MessageHandler&lt;TRecipient,TMessage&gt; handler) where TRecipient : class where TMessage : class where TToken : IEquatable&lt;TToken&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Register&lt;class TRecipient, class TMessage, (class System.IEquatable`1&lt;!!TToken&gt;) TToken&gt;(!!TRecipient recipient, !!TToken token, class Microsoft.Toolkit.Mvvm.Messaging.MessageHandler`2&lt;!!TRecipient, !!TMessage&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.Messaging.IMessenger.Register``3(``0,``2,Microsoft.Toolkit.Mvvm.Messaging.MessageHandler{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Register(Of TRecipient As Class, TMessage As Class, TToken As Class) (recipient As TRecipient, token As TToken, handler As MessageHandler(Of TRecipient, TMessage))" />
      <MemberSignature Language="F#" Value="abstract member Register : 'Recipient * 'oken * Microsoft.Toolkit.Mvvm.Messaging.MessageHandler&lt;'Recipient, 'Message (requires 'Recipient : null and 'Message : null)&gt; -&gt; unit (requires 'Recipient : null and 'Message : null and 'oken :&gt; IEquatable&lt;'oken&gt;)" Usage="iMessenger.Register (recipient, token, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRecipient">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TMessage">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TToken">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;TToken&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="recipient" Type="TRecipient" />
        <Parameter Name="token" Type="TToken" />
        <Parameter Name="handler" Type="Microsoft.Toolkit.Mvvm.Messaging.MessageHandler&lt;TRecipient,TMessage&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRecipient">The type of recipient for the message.</typeparam>
        <typeparam name="TMessage">The type of message to receive.</typeparam>
        <typeparam name="TToken">The type of token to use to pick the messages to receive.</typeparam>
        <param name="recipient">The recipient that will receive the messages.</param>
        <param name="token">A token used to determine the receiving channel to use.</param>
        <param name="handler">The <see cref="T:Microsoft.Toolkit.Mvvm.Messaging.MessageHandler`2" /> to invoke when a message is received.</param>
        <summary>
            Registers a recipient for a given type of message.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when trying to register the same message twice.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.Messaging.IMessenger.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit" Usage="iMessenger.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Resets the <see cref="T:Microsoft.Toolkit.Mvvm.Messaging.IMessenger" /> instance and unregisters all the existing recipients.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send&lt;TMessage,TToken&gt;">
      <MemberSignature Language="C#" Value="public TMessage Send&lt;TMessage,TToken&gt; (TMessage message, TToken token) where TMessage : class where TToken : IEquatable&lt;TToken&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TMessage Send&lt;class TMessage, (class System.IEquatable`1&lt;!!TToken&gt;) TToken&gt;(!!TMessage message, !!TToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.Messaging.IMessenger.Send``2(``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send(Of TMessage As Class, TToken As Class) (message As TMessage, token As TToken) As TMessage" />
      <MemberSignature Language="F#" Value="abstract member Send : 'Message * 'oken -&gt; 'Message (requires 'Message : null and 'oken :&gt; IEquatable&lt;'oken&gt;)" Usage="iMessenger.Send (message, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TMessage</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TMessage">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TToken">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;TToken&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="message" Type="TMessage" />
        <Parameter Name="token" Type="TToken" />
      </Parameters>
      <Docs>
        <typeparam name="TMessage">The type of message to send.</typeparam>
        <typeparam name="TToken">The type of token to identify what channel to use to send the message.</typeparam>
        <param name="message">The message to send.</param>
        <param name="token">The token indicating what channel to use.</param>
        <summary>
            Sends a message of the specified type to all registered recipients.
            </summary>
        <returns>The message that was sent (ie. <paramref name="message" />).</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister&lt;TMessage,TToken&gt;">
      <MemberSignature Language="C#" Value="public void Unregister&lt;TMessage,TToken&gt; (object recipient, TToken token) where TMessage : class where TToken : IEquatable&lt;TToken&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unregister&lt;class TMessage, (class System.IEquatable`1&lt;!!TToken&gt;) TToken&gt;(object recipient, !!TToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.Messaging.IMessenger.Unregister``2(System.Object,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unregister(Of TMessage As Class, TToken As Class) (recipient As Object, token As TToken)" />
      <MemberSignature Language="F#" Value="abstract member Unregister : obj * 'oken -&gt; unit (requires 'Message : null and 'oken :&gt; IEquatable&lt;'oken&gt;)" Usage="iMessenger.Unregister (recipient, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TMessage">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TToken">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;TToken&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="recipient" Type="System.Object" />
        <Parameter Name="token" Type="TToken" />
      </Parameters>
      <Docs>
        <typeparam name="TMessage">The type of message to stop receiving.</typeparam>
        <typeparam name="TToken">The type of token to identify what channel to unregister from.</typeparam>
        <param name="recipient">The recipient to unregister.</param>
        <param name="token">The token to use to identify which handlers to unregister.</param>
        <summary>
            Unregisters a recipient from messages of a given type.
            </summary>
        <remarks>If the recipient has no registered handler, this method does nothing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAll">
      <MemberSignature Language="C#" Value="public void UnregisterAll (object recipient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterAll(object recipient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.Messaging.IMessenger.UnregisterAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterAll (recipient As Object)" />
      <MemberSignature Language="F#" Value="abstract member UnregisterAll : obj -&gt; unit" Usage="iMessenger.UnregisterAll recipient" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipient" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="recipient">The recipient to unregister.</param>
        <summary>
            Unregisters a recipient from all registered messages.
            </summary>
        <remarks>
            This method will unregister the target recipient across all channels.
            Use this method as an easy way to lose all references to a target recipient.
            If the recipient has no registered handler, this method does nothing.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAll&lt;TToken&gt;">
      <MemberSignature Language="C#" Value="public void UnregisterAll&lt;TToken&gt; (object recipient, TToken token) where TToken : IEquatable&lt;TToken&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterAll&lt;(class System.IEquatable`1&lt;!!TToken&gt;) TToken&gt;(object recipient, !!TToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Mvvm.Messaging.IMessenger.UnregisterAll``1(System.Object,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterAll(Of TToken As IEquatable(Of TToken)) (recipient As Object, token As TToken)" />
      <MemberSignature Language="F#" Value="abstract member UnregisterAll : obj * 'oken -&gt; unit (requires 'oken :&gt; IEquatable&lt;'oken&gt;)" Usage="iMessenger.UnregisterAll (recipient, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Mvvm</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TToken">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;TToken&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="recipient" Type="System.Object" />
        <Parameter Name="token" Type="TToken" />
      </Parameters>
      <Docs>
        <typeparam name="TToken">The type of token to identify what channel to unregister from.</typeparam>
        <param name="recipient">The recipient to unregister.</param>
        <param name="token">The token to use to identify which handlers to unregister.</param>
        <summary>
            Unregisters a recipient from all messages on a specific channel.
            </summary>
        <remarks>If the recipient has no registered handler, this method does nothing.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
